import{S as wn,i as En,s as _n,e as o,t as s,k as c,c as l,a as p,h as n,d as t,m as u,b as f,g as i,H as a,I as os}from"./vendor-b62d7b9b.js";/* empty css                                               */function bn(an){let y,Ea,M,_a,ba,R,Da,ja,Ge,B,Ia,Ue,A,tn=`<code class="language-javascript"><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> 
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'The first object'</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> 
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Another object'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">42</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Here is a third object'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">100</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Oops! This one is a duplicate'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">42</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// ...etc.</span>
<span class="token punctuation">]</span></code>`,Fe,K,ga,Qe,_,Ta,te,Oa,Sa,se,qa,Ca,Xe,I,g,ne,xa,ze,E,oe,Pa,Ha,le,Ma,Ra,pe,Aa,Na,Be,T,b,re,ie,La,Ja,ce,Wa,Ga,ue,Ua,Fa,Qa,m,fe,he,Xa,za,ke,Ba,Ka,de,Va,Ya,me,Za,$a,ye,et,Ke,O,at,ve,tt,st,Ve,N,sn='<code class="language-javascript"><span class="token keyword">const</span> IDs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span></code>',Ye,V,nt,Ze,d,ot,we,lt,pt,Ee,rt,it,_e,ct,ut,be,ft,ht,De,kt,dt,$e,L,nn=`<code class="language-javascript">IDs<span class="token punctuation">.</span>length <span class="token operator">===</span> items<span class="token punctuation">.</span>length
<span class="token comment">// Always returns false \u{1F914}</span></code>`,ea,h,je,mt,yt,Ie,vt,wt,ge,Et,_t,Te,Oe,bt,Dt,Se,jt,It,qe,gt,Tt,Ce,Ot,St,xe,qt,Ct,aa,Y,xt,ta,J,on=`<code class="language-javascript"><span class="token punctuation">[</span><span class="token operator">...</span>IDs<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">===</span> items<span class="token punctuation">.</span>length
<span class="token comment">// Now it works!</span>
<span class="token comment">// true if all IDs were unique, false if not</span></code>`,sa,Z,Pt,na,W,ln=`<code class="language-javascript"><span class="token comment">// Another way to do the same thing:</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>IDs<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> items<span class="token punctuation">.</span>length</code>`,oa,S,q,Pe,Ht,la,$,Mt,pa,G,pn=`<code class="language-javascript"><span class="token comment">// Reusable function to check uniqueness of keys in an array of objects </span>
<span class="token keyword">const</span> <span class="token function-variable function">isEverythingUnique</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   
    <span class="token keyword">const</span> uniques <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>uniques<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">===</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span></code>`,ra,v,Rt,He,At,Nt,Me,Lt,Jt,Re,Wt,Gt,ia,C,Ut,Ae,Ft,Qt,ca,D,Xt,Ne,zt,Bt,U,Kt,Vt,ua,F,rn=`<code class="language-javascript"><span class="token comment">// Reusable function to show the duplicate keys in an array of objects</span>
<span class="token keyword">const</span> <span class="token function-variable function">getDuplicates</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> keys <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> keys<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!==</span> keys<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span></code>`,fa,x,Yt,Le,Zt,$t,ha,Q,cn=`<code class="language-javascript"><span class="token function">getDuplicates</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">)</span>
 
<span class="token comment">// [42, 42]</span></code>`,ka,P,Je,es,as,We,ts;return{c(){y=o("p"),Ea=s("Recently, working on my "),M=o("a"),_a=s("Svelte"),ba=s(" side project ("),R=o("a"),Da=s("smitty.netlify.com"),ja=s("), I came across the need to verify that all object properties in an array of objects were unique."),Ge=c(),B=o("p"),Ia=s("That\u2019s a little tough to explain in writing, so here\u2019s an example:"),Ue=c(),A=o("pre"),Fe=c(),K=o("p"),ga=s("In my case, the IDs were hard-coded (rather than generated programmatically). As such, they were subject to human error, and I discovered that some IDs were duplicated."),Qe=c(),_=o("p"),Ta=s("This was an issue because the ID numbers were being used for setting the HTML "),te=o("code"),Oa=s("id"),Sa=s("s in a form; that meant some of the "),se=o("code"),qa=s("<label>"),Ca=s(" elements were being associated with the wrong input, which is pretty disastrous in a production app!"),Xe=c(),I=o("h2"),g=o("a"),ne=o("span"),xa=s("The solution:"),ze=c(),E=o("p"),oe=o("strong"),Pa=s("How to find the duplicates though?"),Ha=s(" In my case there were 100 unique objects in the array, so while combing through them manually certainly wasn\u2019t impossible, it was going to be a tedious task. The solution was to use JavaScript\u2019s "),le=o("code"),Ma=s("map"),Ra=s(" method and "),pe=o("code"),Aa=s("Set"),Na=s(" functionality."),Be=c(),T=o("ul"),b=o("li"),re=o("strong"),ie=o("code"),La=s("map"),Ja=s(" takes an array, and "),ce=o("em"),Wa=s("maps"),Ga=s(" each thing in that array to a new array. (Here, we use it to create a new array with "),ue=o("em"),Ua=s("just"),Fa=s(" the original IDs.)"),Qa=c(),m=o("li"),fe=o("strong"),he=o("code"),Xa=s("Set"),za=s("s in JavaScript create new arrays (technically, sets) with only "),ke=o("em"),Ba=s("unique"),Ka=s(" values. (For example, the "),de=o("code"),Va=s("Set"),Ya=s(" of "),me=o("code"),Za=s("[0, 0, 1, 1, 2]"),$a=s(" is "),ye=o("code"),et=s("[0, 1, 2]"),Ke=c(),O=o("p"),at=s("To extract only the IDs of the original array, the code looks like this (where the original array is named "),ve=o("code"),tt=s("items"),st=s("):"),Ve=c(),N=o("pre"),Ye=c(),V=o("p"),nt=s("Now we\u2019ve got an array of only unique IDs. What next?"),Ze=c(),d=o("p"),ot=s("Well, if we "),we=o("em"),lt=s("did"),pt=s(" have duplicate IDs in our original "),Ee=o("code"),rt=s("items"),it=s(" array, then the length of "),_e=o("code"),ct=s("IDs"),ut=s(" will be "),be=o("em"),ft=s("different"),ht=s(" than the length of the original array. So it\u2019s a quick conditional check, which would "),De=o("em"),kt=s("seem"),dt=s(" like this, but beware! We\u2019re missing a step:"),$e=c(),L=o("pre"),ea=c(),h=o("p"),je=o("strong"),mt=s("Heads up!"),yt=s(" That won\u2019t "),Ie=o("em"),vt=s("quite"),wt=s(" work, because "),ge=o("code"),Et=s("Set"),_t=s("s and arrays in JavaScript are "),Te=o("em"),Oe=o("strong"),bt=s("not"),Dt=s(" the same thing! The above comparison will always return "),Se=o("code"),jt=s("false"),It=s(" because, if you check, "),qe=o("code"),gt=s("IDs.length"),Tt=s(" is "),Ce=o("code"),Ot=s("undefined"),St=s(". (That\u2019s because "),xe=o("code"),qt=s(".length"),Ct=s(" is a method on arrays, not sets.)"),aa=c(),Y=o("p"),xt=s("To fix the issue, we can just add a bit of ES6 destructuring to convert the set into an array:"),ta=c(),J=o("pre"),sa=c(),Z=o("p"),Pt=s("If you prefer, this is a little more explicit and works the same way; I just prefer the above shorthand, personally:"),na=c(),W=o("pre"),oa=c(),S=o("h2"),q=o("a"),Pe=o("span"),Ht=s("Make it reusable"),la=c(),$=o("p"),Mt=s("If this is an issue you might run into frequently, you can abstract it to a function like so:"),pa=c(),G=o("pre"),ra=c(),v=o("p"),Rt=s("And call it with, e.g., "),He=o("code"),At=s("isEverythingUnique(items, 'id');"),Nt=s(" (which would return "),Me=o("code"),Lt=s("false"),Jt=s(" in our case, because there are two objects each with "),Re=o("code"),Wt=s("id: 42"),Gt=s(")."),ia=c(),C=o("p"),Ut=s("If the function returns "),Ae=o("code"),Ft=s("true"),Qt=s(", then you know all the keys are unique. Otherwise, you have non-unique keys (IDs)."),ca=c(),D=o("p"),Xt=s("To find out "),Ne=o("em"),zt=s("which"),Bt=s(" ones are duplicates, you can use this handy function which I developed from "),U=o("a"),Kt=s("this Hacker Noon post"),Vt=s(":"),ua=c(),F=o("pre"),fa=c(),x=o("p"),Yt=s("Call this function just like the one above, e.g., "),Le=o("code"),Zt=s("getDuplicates(items, 'id')"),$t=s(", which in our case, would get you an array that contains the non-unique IDs, like this:"),ha=c(),Q=o("pre"),ka=c(),P=o("p"),Je=o("strong"),es=s("Hope you enjoyed!"),as=c(),We=o("strong"),ts=s("Thanks for reading."),this.h()},l(e){y=l(e,"P",{});var r=p(y);Ea=n(r,"Recently, working on my "),M=l(r,"A",{href:!0,rel:!0});var ls=p(M);_a=n(ls,"Svelte"),ls.forEach(t),ba=n(r," side project ("),R=l(r,"A",{href:!0,rel:!0});var ps=p(R);Da=n(ps,"smitty.netlify.com"),ps.forEach(t),ja=n(r,"), I came across the need to verify that all object properties in an array of objects were unique."),r.forEach(t),Ge=u(e),B=l(e,"P",{});var rs=p(B);Ia=n(rs,"That\u2019s a little tough to explain in writing, so here\u2019s an example:"),rs.forEach(t),Ue=u(e),A=l(e,"PRE",{class:!0});var un=p(A);un.forEach(t),Fe=u(e),K=l(e,"P",{});var is=p(K);ga=n(is,"In my case, the IDs were hard-coded (rather than generated programmatically). As such, they were subject to human error, and I discovered that some IDs were duplicated."),is.forEach(t),Qe=u(e),_=l(e,"P",{});var ee=p(_);Ta=n(ee,"This was an issue because the ID numbers were being used for setting the HTML "),te=l(ee,"CODE",{});var cs=p(te);Oa=n(cs,"id"),cs.forEach(t),Sa=n(ee,"s in a form; that meant some of the "),se=l(ee,"CODE",{});var us=p(se);qa=n(us,"<label>"),us.forEach(t),Ca=n(ee," elements were being associated with the wrong input, which is pretty disastrous in a production app!"),ee.forEach(t),Xe=u(e),I=l(e,"H2",{id:!0});var ss=p(I);g=l(ss,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fs=p(g);ne=l(fs,"SPAN",{class:!0}),p(ne).forEach(t),fs.forEach(t),xa=n(ss,"The solution:"),ss.forEach(t),ze=u(e),E=l(e,"P",{});var X=p(E);oe=l(X,"STRONG",{});var hs=p(oe);Pa=n(hs,"How to find the duplicates though?"),hs.forEach(t),Ha=n(X," In my case there were 100 unique objects in the array, so while combing through them manually certainly wasn\u2019t impossible, it was going to be a tedious task. The solution was to use JavaScript\u2019s "),le=l(X,"CODE",{});var ks=p(le);Ma=n(ks,"map"),ks.forEach(t),Ra=n(X," method and "),pe=l(X,"CODE",{});var ds=p(pe);Aa=n(ds,"Set"),ds.forEach(t),Na=n(X," functionality."),X.forEach(t),Be=u(e),T=l(e,"UL",{});var da=p(T);b=l(da,"LI",{});var z=p(b);re=l(z,"STRONG",{});var ms=p(re);ie=l(ms,"CODE",{});var ys=p(ie);La=n(ys,"map"),ys.forEach(t),ms.forEach(t),Ja=n(z," takes an array, and "),ce=l(z,"EM",{});var vs=p(ce);Wa=n(vs,"maps"),vs.forEach(t),Ga=n(z," each thing in that array to a new array. (Here, we use it to create a new array with "),ue=l(z,"EM",{});var ws=p(ue);Ua=n(ws,"just"),ws.forEach(t),Fa=n(z," the original IDs.)"),z.forEach(t),Qa=u(da),m=l(da,"LI",{});var j=p(m);fe=l(j,"STRONG",{});var Es=p(fe);he=l(Es,"CODE",{});var _s=p(he);Xa=n(_s,"Set"),_s.forEach(t),Es.forEach(t),za=n(j,"s in JavaScript create new arrays (technically, sets) with only "),ke=l(j,"EM",{});var bs=p(ke);Ba=n(bs,"unique"),bs.forEach(t),Ka=n(j," values. (For example, the "),de=l(j,"CODE",{});var Ds=p(de);Va=n(Ds,"Set"),Ds.forEach(t),Ya=n(j," of "),me=l(j,"CODE",{});var js=p(me);Za=n(js,"[0, 0, 1, 1, 2]"),js.forEach(t),$a=n(j," is "),ye=l(j,"CODE",{});var Is=p(ye);et=n(Is,"[0, 1, 2]"),Is.forEach(t),j.forEach(t),da.forEach(t),Ke=u(e),O=l(e,"P",{});var ma=p(O);at=n(ma,"To extract only the IDs of the original array, the code looks like this (where the original array is named "),ve=l(ma,"CODE",{});var gs=p(ve);tt=n(gs,"items"),gs.forEach(t),st=n(ma,"):"),ma.forEach(t),Ve=u(e),N=l(e,"PRE",{class:!0});var fn=p(N);fn.forEach(t),Ye=u(e),V=l(e,"P",{});var Ts=p(V);nt=n(Ts,"Now we\u2019ve got an array of only unique IDs. What next?"),Ts.forEach(t),Ze=u(e),d=l(e,"P",{});var w=p(d);ot=n(w,"Well, if we "),we=l(w,"EM",{});var Os=p(we);lt=n(Os,"did"),Os.forEach(t),pt=n(w," have duplicate IDs in our original "),Ee=l(w,"CODE",{});var Ss=p(Ee);rt=n(Ss,"items"),Ss.forEach(t),it=n(w," array, then the length of "),_e=l(w,"CODE",{});var qs=p(_e);ct=n(qs,"IDs"),qs.forEach(t),ut=n(w," will be "),be=l(w,"EM",{});var Cs=p(be);ft=n(Cs,"different"),Cs.forEach(t),ht=n(w," than the length of the original array. So it\u2019s a quick conditional check, which would "),De=l(w,"EM",{});var xs=p(De);kt=n(xs,"seem"),xs.forEach(t),dt=n(w," like this, but beware! We\u2019re missing a step:"),w.forEach(t),$e=u(e),L=l(e,"PRE",{class:!0});var hn=p(L);hn.forEach(t),ea=u(e),h=l(e,"P",{});var k=p(h);je=l(k,"STRONG",{});var Ps=p(je);mt=n(Ps,"Heads up!"),Ps.forEach(t),yt=n(k," That won\u2019t "),Ie=l(k,"EM",{});var Hs=p(Ie);vt=n(Hs,"quite"),Hs.forEach(t),wt=n(k," work, because "),ge=l(k,"CODE",{});var Ms=p(ge);Et=n(Ms,"Set"),Ms.forEach(t),_t=n(k,"s and arrays in JavaScript are "),Te=l(k,"EM",{});var Rs=p(Te);Oe=l(Rs,"STRONG",{});var As=p(Oe);bt=n(As,"not"),As.forEach(t),Rs.forEach(t),Dt=n(k," the same thing! The above comparison will always return "),Se=l(k,"CODE",{});var Ns=p(Se);jt=n(Ns,"false"),Ns.forEach(t),It=n(k," because, if you check, "),qe=l(k,"CODE",{});var Ls=p(qe);gt=n(Ls,"IDs.length"),Ls.forEach(t),Tt=n(k," is "),Ce=l(k,"CODE",{});var Js=p(Ce);Ot=n(Js,"undefined"),Js.forEach(t),St=n(k,". (That\u2019s because "),xe=l(k,"CODE",{});var Ws=p(xe);qt=n(Ws,".length"),Ws.forEach(t),Ct=n(k," is a method on arrays, not sets.)"),k.forEach(t),aa=u(e),Y=l(e,"P",{});var Gs=p(Y);xt=n(Gs,"To fix the issue, we can just add a bit of ES6 destructuring to convert the set into an array:"),Gs.forEach(t),ta=u(e),J=l(e,"PRE",{class:!0});var kn=p(J);kn.forEach(t),sa=u(e),Z=l(e,"P",{});var Us=p(Z);Pt=n(Us,"If you prefer, this is a little more explicit and works the same way; I just prefer the above shorthand, personally:"),Us.forEach(t),na=u(e),W=l(e,"PRE",{class:!0});var dn=p(W);dn.forEach(t),oa=u(e),S=l(e,"H2",{id:!0});var ns=p(S);q=l(ns,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Fs=p(q);Pe=l(Fs,"SPAN",{class:!0}),p(Pe).forEach(t),Fs.forEach(t),Ht=n(ns,"Make it reusable"),ns.forEach(t),la=u(e),$=l(e,"P",{});var Qs=p($);Mt=n(Qs,"If this is an issue you might run into frequently, you can abstract it to a function like so:"),Qs.forEach(t),pa=u(e),G=l(e,"PRE",{class:!0});var mn=p(G);mn.forEach(t),ra=u(e),v=l(e,"P",{});var H=p(v);Rt=n(H,"And call it with, e.g., "),He=l(H,"CODE",{});var Xs=p(He);At=n(Xs,"isEverythingUnique(items, 'id');"),Xs.forEach(t),Nt=n(H," (which would return "),Me=l(H,"CODE",{});var zs=p(Me);Lt=n(zs,"false"),zs.forEach(t),Jt=n(H," in our case, because there are two objects each with "),Re=l(H,"CODE",{});var Bs=p(Re);Wt=n(Bs,"id: 42"),Bs.forEach(t),Gt=n(H,")."),H.forEach(t),ia=u(e),C=l(e,"P",{});var ya=p(C);Ut=n(ya,"If the function returns "),Ae=l(ya,"CODE",{});var Ks=p(Ae);Ft=n(Ks,"true"),Ks.forEach(t),Qt=n(ya,", then you know all the keys are unique. Otherwise, you have non-unique keys (IDs)."),ya.forEach(t),ca=u(e),D=l(e,"P",{});var ae=p(D);Xt=n(ae,"To find out "),Ne=l(ae,"EM",{});var Vs=p(Ne);zt=n(Vs,"which"),Vs.forEach(t),Bt=n(ae," ones are duplicates, you can use this handy function which I developed from "),U=l(ae,"A",{href:!0,rel:!0});var Ys=p(U);Kt=n(Ys,"this Hacker Noon post"),Ys.forEach(t),Vt=n(ae,":"),ae.forEach(t),ua=u(e),F=l(e,"PRE",{class:!0});var yn=p(F);yn.forEach(t),fa=u(e),x=l(e,"P",{});var va=p(x);Yt=n(va,"Call this function just like the one above, e.g., "),Le=l(va,"CODE",{});var Zs=p(Le);Zt=n(Zs,"getDuplicates(items, 'id')"),Zs.forEach(t),$t=n(va,", which in our case, would get you an array that contains the non-unique IDs, like this:"),va.forEach(t),ha=u(e),Q=l(e,"PRE",{class:!0});var vn=p(Q);vn.forEach(t),ka=u(e),P=l(e,"P",{});var wa=p(P);Je=l(wa,"STRONG",{});var $s=p(Je);es=n($s,"Hope you enjoyed!"),$s.forEach(t),as=u(wa),We=l(wa,"STRONG",{});var en=p(We);ts=n(en,"Thanks for reading."),en.forEach(t),wa.forEach(t),this.h()},h(){f(M,"href","https://svelte.dev/"),f(M,"rel","nofollow"),f(R,"href","https://smitty.netlify.com"),f(R,"rel","nofollow"),f(A,"class","language-javascript"),f(ne,"class","icon icon-link"),f(g,"aria-hidden","true"),f(g,"tabindex","-1"),f(g,"href","#the-solution"),f(I,"id","the-solution"),f(N,"class","language-javascript"),f(L,"class","language-javascript"),f(J,"class","language-javascript"),f(W,"class","language-javascript"),f(Pe,"class","icon icon-link"),f(q,"aria-hidden","true"),f(q,"tabindex","-1"),f(q,"href","#make-it-reusable"),f(S,"id","make-it-reusable"),f(G,"class","language-javascript"),f(U,"href","https://hackernoon.com/finding-non-unique-elements-in-javascript-d934e6fd6260"),f(U,"rel","nofollow"),f(F,"class","language-javascript"),f(Q,"class","language-javascript")},m(e,r){i(e,y,r),a(y,Ea),a(y,M),a(M,_a),a(y,ba),a(y,R),a(R,Da),a(y,ja),i(e,Ge,r),i(e,B,r),a(B,Ia),i(e,Ue,r),i(e,A,r),A.innerHTML=tn,i(e,Fe,r),i(e,K,r),a(K,ga),i(e,Qe,r),i(e,_,r),a(_,Ta),a(_,te),a(te,Oa),a(_,Sa),a(_,se),a(se,qa),a(_,Ca),i(e,Xe,r),i(e,I,r),a(I,g),a(g,ne),a(I,xa),i(e,ze,r),i(e,E,r),a(E,oe),a(oe,Pa),a(E,Ha),a(E,le),a(le,Ma),a(E,Ra),a(E,pe),a(pe,Aa),a(E,Na),i(e,Be,r),i(e,T,r),a(T,b),a(b,re),a(re,ie),a(ie,La),a(b,Ja),a(b,ce),a(ce,Wa),a(b,Ga),a(b,ue),a(ue,Ua),a(b,Fa),a(T,Qa),a(T,m),a(m,fe),a(fe,he),a(he,Xa),a(m,za),a(m,ke),a(ke,Ba),a(m,Ka),a(m,de),a(de,Va),a(m,Ya),a(m,me),a(me,Za),a(m,$a),a(m,ye),a(ye,et),i(e,Ke,r),i(e,O,r),a(O,at),a(O,ve),a(ve,tt),a(O,st),i(e,Ve,r),i(e,N,r),N.innerHTML=sn,i(e,Ye,r),i(e,V,r),a(V,nt),i(e,Ze,r),i(e,d,r),a(d,ot),a(d,we),a(we,lt),a(d,pt),a(d,Ee),a(Ee,rt),a(d,it),a(d,_e),a(_e,ct),a(d,ut),a(d,be),a(be,ft),a(d,ht),a(d,De),a(De,kt),a(d,dt),i(e,$e,r),i(e,L,r),L.innerHTML=nn,i(e,ea,r),i(e,h,r),a(h,je),a(je,mt),a(h,yt),a(h,Ie),a(Ie,vt),a(h,wt),a(h,ge),a(ge,Et),a(h,_t),a(h,Te),a(Te,Oe),a(Oe,bt),a(h,Dt),a(h,Se),a(Se,jt),a(h,It),a(h,qe),a(qe,gt),a(h,Tt),a(h,Ce),a(Ce,Ot),a(h,St),a(h,xe),a(xe,qt),a(h,Ct),i(e,aa,r),i(e,Y,r),a(Y,xt),i(e,ta,r),i(e,J,r),J.innerHTML=on,i(e,sa,r),i(e,Z,r),a(Z,Pt),i(e,na,r),i(e,W,r),W.innerHTML=ln,i(e,oa,r),i(e,S,r),a(S,q),a(q,Pe),a(S,Ht),i(e,la,r),i(e,$,r),a($,Mt),i(e,pa,r),i(e,G,r),G.innerHTML=pn,i(e,ra,r),i(e,v,r),a(v,Rt),a(v,He),a(He,At),a(v,Nt),a(v,Me),a(Me,Lt),a(v,Jt),a(v,Re),a(Re,Wt),a(v,Gt),i(e,ia,r),i(e,C,r),a(C,Ut),a(C,Ae),a(Ae,Ft),a(C,Qt),i(e,ca,r),i(e,D,r),a(D,Xt),a(D,Ne),a(Ne,zt),a(D,Bt),a(D,U),a(U,Kt),a(D,Vt),i(e,ua,r),i(e,F,r),F.innerHTML=rn,i(e,fa,r),i(e,x,r),a(x,Yt),a(x,Le),a(Le,Zt),a(x,$t),i(e,ha,r),i(e,Q,r),Q.innerHTML=cn,i(e,ka,r),i(e,P,r),a(P,Je),a(Je,es),a(P,as),a(P,We),a(We,ts)},p:os,i:os,o:os,d(e){e&&t(y),e&&t(Ge),e&&t(B),e&&t(Ue),e&&t(A),e&&t(Fe),e&&t(K),e&&t(Qe),e&&t(_),e&&t(Xe),e&&t(I),e&&t(ze),e&&t(E),e&&t(Be),e&&t(T),e&&t(Ke),e&&t(O),e&&t(Ve),e&&t(N),e&&t(Ye),e&&t(V),e&&t(Ze),e&&t(d),e&&t($e),e&&t(L),e&&t(ea),e&&t(h),e&&t(aa),e&&t(Y),e&&t(ta),e&&t(J),e&&t(sa),e&&t(Z),e&&t(na),e&&t(W),e&&t(oa),e&&t(S),e&&t(la),e&&t($),e&&t(pa),e&&t(G),e&&t(ra),e&&t(v),e&&t(ia),e&&t(C),e&&t(ca),e&&t(D),e&&t(ua),e&&t(F),e&&t(fa),e&&t(x),e&&t(ha),e&&t(Q),e&&t(ka),e&&t(P)}}}const In={title:"How to Check Uniqueness in an Array of Objects in JavaScript",date:"2020-02-17",updated:"2020-05-19",categories:["javascript","web"],coverImage:"EQ0-F2nXUAEpgCx.jpeg",coverWidth:5,coverHeight:3,excerpt:"Working with arrays of objects in JavaScript can be difficult. This post covers how to ensure all object keys (IDs) are unique, and how to find non-unique values."};class gn extends wn{constructor(y){super();En(this,y,null,bn,_n,{})}}export{gn as default,In as metadata};
