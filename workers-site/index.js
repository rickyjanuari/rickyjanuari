(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key2 of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key2) && key2 !== except)
          __defProp(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));

  // .svelte-kit/output/server/chunks/index-2749e1b7.js
  function noop() {
  }
  function run(fn) {
    return fn();
  }
  function blank_object() {
    return /* @__PURE__ */ Object.create(null);
  }
  function run_all(fns) {
    fns.forEach(run);
  }
  function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
  }
  function subscribe(store, ...callbacks) {
    if (store == null) {
      return noop;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
  }
  function set_current_component(component) {
    current_component = component;
  }
  function get_current_component() {
    if (!current_component)
      throw new Error("Function called outside component initialization");
    return current_component;
  }
  function setContext(key2, context) {
    get_current_component().$$.context.set(key2, context);
  }
  function escape(html) {
    return String(html).replace(/["'&<>]/g, (match) => escaped[match]);
  }
  function each(items, fn) {
    let str = "";
    for (let i = 0; i < items.length; i += 1) {
      str += fn(items[i], i);
    }
    return str;
  }
  function validate_component(component, name) {
    if (!component || !component.$$render) {
      if (name === "svelte:component")
        name += " this={...}";
      throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
    }
    return component;
  }
  function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots, context) {
      const parent_component = current_component;
      const $$ = {
        on_destroy,
        context: new Map(context || (parent_component ? parent_component.$$.context : [])),
        on_mount: [],
        before_update: [],
        after_update: [],
        callbacks: blank_object()
      };
      set_current_component({ $$ });
      const html = fn(result, props, bindings, slots);
      set_current_component(parent_component);
      return html;
    }
    return {
      render: (props = {}, { $$slots = {}, context = /* @__PURE__ */ new Map() } = {}) => {
        on_destroy = [];
        const result = { title: "", head: "", css: /* @__PURE__ */ new Set() };
        const html = $$render(result, props, {}, $$slots, context);
        run_all(on_destroy);
        return {
          html,
          css: {
            code: Array.from(result.css).map((css50) => css50.code).join("\n"),
            map: null
          },
          head: result.title + result.head
        };
      },
      $$render
    };
  }
  function add_attribute(name, value, boolean) {
    if (value == null || boolean && !value)
      return "";
    return ` ${name}${value === true && boolean_attributes.has(name) ? "" : `=${typeof value === "string" ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
  }
  function add_classes(classes) {
    return classes ? ` class="${classes}"` : "";
  }
  var current_component, boolean_attributes, escaped, missing_component, on_destroy;
  var init_index_2749e1b7 = __esm({
    ".svelte-kit/output/server/chunks/index-2749e1b7.js"() {
      Promise.resolve();
      boolean_attributes = /* @__PURE__ */ new Set([
        "allowfullscreen",
        "allowpaymentrequest",
        "async",
        "autofocus",
        "autoplay",
        "checked",
        "controls",
        "default",
        "defer",
        "disabled",
        "formnovalidate",
        "hidden",
        "ismap",
        "loop",
        "multiple",
        "muted",
        "nomodule",
        "novalidate",
        "open",
        "playsinline",
        "readonly",
        "required",
        "reversed",
        "selected"
      ]);
      escaped = {
        '"': "&quot;",
        "'": "&#39;",
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;"
      };
      missing_component = {
        $$render: () => ""
      };
    }
  });

  // .svelte-kit/output/server/chunks/hooks-1c45ba0b.js
  var hooks_1c45ba0b_exports = {};
  var init_hooks_1c45ba0b = __esm({
    ".svelte-kit/output/server/chunks/hooks-1c45ba0b.js"() {
    }
  });

  // node_modules/.pnpm/just-throttle@4.0.1/node_modules/just-throttle/index.mjs
  function throttle(fn, interval, options) {
    var timeoutId = null;
    var throttledFn = null;
    var leading = options && options.leading;
    var trailing = options && options.trailing;
    if (leading == null) {
      leading = true;
    }
    if (trailing == null) {
      trailing = !leading;
    }
    if (leading == true) {
      trailing = false;
    }
    var cancel = function() {
      if (timeoutId) {
        clearTimeout(timeoutId);
        timeoutId = null;
      }
    };
    var flush = function() {
      var call = throttledFn;
      cancel();
      if (call) {
        call();
      }
    };
    var throttleWrapper = function() {
      var callNow = leading && !timeoutId;
      var context = this;
      var args = arguments;
      throttledFn = function() {
        return fn.apply(context, args);
      };
      if (!timeoutId) {
        timeoutId = setTimeout(function() {
          timeoutId = null;
          if (trailing) {
            return throttledFn();
          }
        }, interval);
      }
      if (callNow) {
        callNow = false;
        return throttledFn();
      }
    };
    throttleWrapper.cancel = cancel;
    throttleWrapper.flush = flush;
    return throttleWrapper;
  }
  var functionThrottle;
  var init_just_throttle = __esm({
    "node_modules/.pnpm/just-throttle@4.0.1/node_modules/just-throttle/index.mjs"() {
      functionThrottle = throttle;
    }
  });

  // .svelte-kit/output/server/chunks/store-6b7e9707.js
  function writable2(value, start = noop) {
    let stop;
    const subscribers = /* @__PURE__ */ new Set();
    function set(new_value) {
      if (safe_not_equal(value, new_value)) {
        value = new_value;
        if (stop) {
          const run_queue = !subscriber_queue2.length;
          for (const subscriber of subscribers) {
            subscriber[1]();
            subscriber_queue2.push(subscriber, value);
          }
          if (run_queue) {
            for (let i = 0; i < subscriber_queue2.length; i += 2) {
              subscriber_queue2[i][0](subscriber_queue2[i + 1]);
            }
            subscriber_queue2.length = 0;
          }
        }
      }
    }
    function update(fn) {
      set(fn(value));
    }
    function subscribe2(run2, invalidate = noop) {
      const subscriber = [run2, invalidate];
      subscribers.add(subscriber);
      if (subscribers.size === 1) {
        stop = start(set) || noop;
      }
      run2(value);
      return () => {
        subscribers.delete(subscriber);
        if (subscribers.size === 0) {
          stop();
          stop = null;
        }
      };
    }
    return { set, update, subscribe: subscribe2 };
  }
  var subscriber_queue2, Themes, isLoading, prefersReducedMotion, isMenuOpen, isScrollingDown, theme;
  var init_store_6b7e9707 = __esm({
    ".svelte-kit/output/server/chunks/store-6b7e9707.js"() {
      init_index_2749e1b7();
      subscriber_queue2 = [];
      Themes = /* @__PURE__ */ ((Themes2) => {
        Themes2["Dark"] = "dark";
        Themes2["Light"] = "light";
        return Themes2;
      })(Themes || {});
      isLoading = writable2(false);
      prefersReducedMotion = writable2(false);
      isMenuOpen = writable2(false);
      isScrollingDown = writable2(false);
      theme = writable2(Themes.Light);
    }
  });

  // node_modules/.pnpm/just-debounce@1.1.0/node_modules/just-debounce/index.js
  var require_just_debounce = __commonJS({
    "node_modules/.pnpm/just-debounce@1.1.0/node_modules/just-debounce/index.js"(exports, module) {
      module.exports = debounce2;
      function debounce2(fn, delay, atStart, guarantee) {
        var timeout;
        var args;
        var self;
        return function debounced() {
          self = this;
          args = Array.prototype.slice.call(arguments);
          if (timeout && (atStart || guarantee)) {
            return;
          } else if (!atStart) {
            clear();
            timeout = setTimeout(run2, delay);
            return timeout;
          }
          timeout = setTimeout(clear, delay);
          fn.apply(self, args);
          function run2() {
            clear();
            fn.apply(self, args);
          }
          function clear() {
            clearTimeout(timeout);
            timeout = null;
          }
        };
      }
    }
  });

  // .svelte-kit/output/server/entries/pages/__layout.svelte.js
  var layout_svelte_exports = {};
  __export(layout_svelte_exports, {
    default: () => _layout,
    load: () => load
  });
  var import_just_debounce, css$d, LogoSVG, css$c, GridCell, css$b, Grid, css$a, NavLink, css$9, NavLinks, css$8, HamburgerButton, css$7, NavMenu, LightDarkIcon, css$6, DarkModeToggle, css$5, ReduceMotionToggle, css$4, Header, css$3, Footer, css$2, PageTransition, css$1, PageHeading, css, Loader, load, _layout;
  var init_layout_svelte = __esm({
    ".svelte-kit/output/server/entries/pages/__layout.svelte.js"() {
      init_index_2749e1b7();
      init_just_throttle();
      init_store_6b7e9707();
      import_just_debounce = __toESM(require_just_debounce(), 1);
      css$d = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}#logo-svg.svelte-15bqyto.svelte-15bqyto{width:auto}a:hover #logo-svg.svelte-15bqyto #bracket-left.svelte-15bqyto,a:focus #logo-svg.svelte-15bqyto #bracket-left.svelte-15bqyto{transform:translateX(11%)}a:hover #logo-svg.svelte-15bqyto #bracket-right.svelte-15bqyto,a:focus #logo-svg.svelte-15bqyto #bracket-right.svelte-15bqyto{transform:translateX(-11%)}#logo-svg.svelte-15bqyto #bracket-left.svelte-15bqyto,#logo-svg.svelte-15bqyto #bracket-right.svelte-15bqyto{transform:translateX(0);transition:transform 0.3s cubic-bezier(1, 0, 0, 1)}@media(max-width: 23rem){#logo-svg.svelte-15bqyto #logo-text.svelte-15bqyto{display:none}}',
        map: null
      };
      LogoSVG = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { iconOnly = false } = $$props;
        if ($$props.iconOnly === void 0 && $$bindings.iconOnly && iconOnly !== void 0)
          $$bindings.iconOnly(iconOnly);
        $$result.css.add(css$d);
        return `<svg id="${"logo-svg"}" width="${"100%"}" height="${"100%"}" viewBox="${"0 0 763 178"}" version="${"1.1"}" style="${"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;"}" class="${"svelte-15bqyto"}"><g id="${"artboard"}">${!iconOnly ? `<g id="${"logo-text"}" class="${"svelte-15bqyto"}"><path d="${"M180.548,92.393c14.899,-6.183 20.88,-16.623 20.88,-36.794l0,-42.266l6.385,-5.575l0,-0.203l-28.279,0l0,0.203l6.386,5.575l0,49.767c0,12.163 -1.723,21.184 -5.575,29.191l0.203,0.102Zm107.237,-16.623c10.947,0 17.535,-6.082 17.535,-15.204c0,-8.514 -5.575,-12.264 -12.771,-16.724c-7.703,-4.663 -11.656,-7.095 -11.656,-11.555c0,-3.953 2.128,-6.082 5.676,-6.082c3.953,0 7.703,2.534 15.913,17.637l0.203,0l0,-19.968l-5.879,3.649c-2.331,-1.723 -5.879,-3.142 -10.339,-3.142c-10.744,0 -16.724,5.777 -16.724,14.393c0,8.717 5.068,12.67 11.758,16.623c8.21,4.764 12.061,7.399 12.061,11.96c0,4.46 -2.432,6.588 -5.98,6.588c-4.561,0 -8.717,-2.635 -17.332,-19.055l-0.203,0l0,21.387l6.487,-3.649c2.94,2.027 6.893,3.142 11.251,3.142Zm-51.693,0.203c16.42,0 25.745,-9.832 25.745,-26.354c0,-16.927 -7.805,-25.339 -24.123,-25.339c-16.319,0 -25.847,9.426 -25.847,26.251c0,16.927 7.906,25.442 24.225,25.442Zm100.852,-1.724l-5.676,-4.966l0,-33.753c2.432,-2.229 4.966,-3.243 8.108,-3.243c5.474,0 8.21,2.838 8.21,11.555l0,25.441l-5.676,4.966l0,0.203l26.252,0l0,-0.203l-5.676,-4.966l0,-27.367c0,-11.96 -4.46,-17.636 -14.494,-17.636c-7.399,0 -12.771,4.257 -16.724,10.034l0,-34.158l-22.097,6.791l0,0.203l7.197,4.662l0,57.471l-5.575,4.966l0,0.203l26.151,0l0,-0.203Zm-109.772,-24.224c0,-16.826 4.46,-23.82 9.933,-23.82c5.474,0 9.427,6.893 9.427,23.82c0,17.028 -4.46,23.92 -9.832,23.92c-5.473,0 -9.528,-6.791 -9.528,-23.92Z"}" style="${"fill:var(--ink);fill-rule:nonzer;transition:.3s"}"></path><path d="${"M468.71,177.128c10.947,0 17.535,-6.082 17.535,-15.204c0,-8.514 -5.575,-12.264 -12.771,-16.724c-7.704,-4.663 -11.657,-7.095 -11.657,-11.555c0,-3.953 2.129,-6.081 5.677,-6.081c3.953,0 7.703,2.533 15.913,17.636l0.203,0l0,-19.968l-5.879,3.649c-2.331,-1.723 -5.879,-3.142 -10.339,-3.142c-10.744,0 -16.724,5.778 -16.724,14.393c0,8.717 5.068,12.67 11.758,16.623c8.21,4.764 12.061,7.399 12.061,11.96c0,4.46 -2.432,6.588 -5.98,6.588c-4.561,0 -8.717,-2.635 -17.332,-19.055l-0.203,0l0,21.387l6.487,-3.649c2.939,2.027 6.892,3.142 11.251,3.142Zm218.123,0.203c8.616,0 13.582,-3.751 15.001,-12.163l-0.101,-0.203c-1.825,2.027 -4.561,3.547 -7.805,3.547c-4.358,0 -6.081,-2.128 -6.081,-8.919l0,-25.745l12.67,0l0.709,-6.791l-13.379,0l0,-16.724l-0.203,0l-13.481,16.42l-8.615,1.723l-0.71,5.372l8.008,0l0,28.279c0,9.832 4.865,15.204 13.987,15.204Zm-475.067,0c11.656,0 20.475,-6.487 22.907,-16.826l-0.101,-0.101c-4.561,4.155 -10.44,6.284 -17.332,6.284c-13.278,0 -20.576,-8.109 -20.576,-26.049c0,-20.475 7.5,-31.32 16.217,-31.32c5.676,0 9.832,2.433 19.461,23.312l0.203,0l0,-25.947l-7.906,3.851c-2.94,-1.926 -6.893,-3.142 -11.454,-3.142c-20.677,0 -32.536,14.9 -32.536,35.577c0,21.387 10.237,34.361 31.117,34.361Zm52.808,0c16.42,0 25.745,-9.832 25.745,-26.354c0,-16.927 -7.805,-25.339 -24.123,-25.339c-16.319,0 -25.847,9.426 -25.847,26.252c0,16.927 7.906,25.441 24.225,25.441Zm327.185,0c16.42,0 25.745,-9.832 25.745,-26.354c0,-16.927 -7.804,-25.339 -24.123,-25.339c-16.319,0 -25.847,9.426 -25.847,26.252c0,16.927 7.906,25.441 24.225,25.441Zm-45.409,-1.217l13.988,-40.442l6.791,-8.413l0,-0.202l-17.637,0l0,0.202c8.312,8.312 8.312,8.312 7.197,11.555l-7.703,23.009l-11.859,-36.084l-6.893,1.318l-11.453,34.462l-8.92,-29.192l6.487,-5.068l0,-0.202l-26.86,0l0,0.202l4.054,5.068l16.623,44.598l6.386,-0.912l11.656,-34.969l11.859,35.881l6.284,-0.811Zm-163.694,-0.506l-5.575,-4.967l0,-45.611l-21.893,6.588l0,0.203l6.892,4.662l0,34.158l-5.574,4.967l0,0.202l26.15,0l0,-0.202Zm-60.916,0l-5.575,-4.967l0,-69.127l-21.893,6.791l-0.102,0.203l6.994,4.663l0,57.47l-5.575,4.967l0,0.202l26.151,0l0,-0.202Zm30.103,0l-5.574,-4.967l0,-69.127l-21.894,6.791l-0.101,0.203l6.993,4.663l0,57.47l-5.574,4.967l0,0.202l26.15,0l0,-0.202Zm300.528,0l-8.311,-5.372l0,-30.509c1.52,-2.129 3.345,-3.143 5.98,-3.143c3.345,0 5.068,2.636 5.372,7.096l0.101,0c4.967,-1.318 8.109,-5.271 8.109,-10.542c0,-4.966 -2.534,-7.602 -6.892,-7.602c-5.778,0 -9.427,4.764 -13.177,13.582l0.203,-14.393l-21.59,6.69l0,0.203l6.893,4.865l0,34.158l-5.575,4.967l0,0.202l28.887,0l0,-0.202Zm-239.003,0l-5.575,-4.967l0,-33.752c2.332,-2.23 4.967,-3.244 8.109,-3.244c5.474,0 8.109,2.838 8.109,11.555l0,25.441l-5.575,4.967l0,0.202l26.151,0l0,-0.202l-5.575,-4.967l0,-27.367c0,-11.96 -4.46,-17.636 -14.596,-17.636c-7.602,0 -13.176,4.662 -17.129,10.744l0.202,-11.352l-21.285,6.385l-0.101,0.203l6.689,4.865l0,34.158l-5.574,4.967l0,0.202l26.15,0l0,-0.202Zm318.066,0l-5.676,-4.967l0,-33.752c2.432,-2.23 4.966,-3.244 8.108,-3.244c5.474,0 8.21,2.838 8.21,11.555l0,25.441l-5.676,4.967l0,0.202l26.252,0l0,-0.202l-5.676,-4.967l0,-27.367c0,-11.96 -4.46,-17.636 -14.494,-17.636c-7.399,0 -12.772,4.257 -16.724,10.034l0,-34.158l-22.097,6.791l0,0.203l7.197,4.663l0,57.47l-5.575,4.967l0,0.202l26.151,0l0,-0.202Zm-475.78,-24.225c0,-16.826 4.46,-23.819 9.933,-23.819c5.474,0 9.427,6.892 9.427,23.819c0,17.028 -4.46,23.92 -9.832,23.92c-5.473,0 -9.528,-6.791 -9.528,-23.92Zm327.185,0c0,-16.826 4.46,-23.819 9.934,-23.819c5.473,0 9.426,6.892 9.426,23.819c0,17.028 -4.46,23.92 -9.832,23.92c-5.473,0 -9.528,-6.791 -9.528,-23.92Zm-213.765,-31.928c4.359,0 7.906,-3.446 7.906,-7.906c0,-4.561 -3.547,-8.008 -7.906,-8.008c-4.561,0 -8.007,3.447 -8.007,8.008c0,4.46 3.446,7.906 8.007,7.906Z"}" style="${"fill:var(--ink);fill-rule:nonzero;transition:.3s"}"></path></g>` : ``}<path id="${"bracket-left"}" d="${"M24.551,31.574l0,120.094l36.029,0l0,24.019l-60.047,0l0,-168.132l60.047,0l0,24.019l-36.029,0Z"}" style="${"fill:#a7a8aa;"}" class="${"svelte-15bqyto"}"></path><path id="${"bracket-right"}" d="${"M144.646,175.687l-60.048,0l0,-24.019l36.029,0l0,-120.094l-36.029,0l0,-24.019l60.048,0l0,168.132Z"}" style="${"fill:#ffd100;"}" class="${"svelte-15bqyto"}"></path></g></svg>`;
      });
      css$c = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.cell.svelte-1kitaah{opacity:0;mix-blend-mode:overlay;position:absolute;-webkit-animation:svelte-1kitaah-fade_in 0.36s cubic-bezier(0.215, 0.61, 0.355, 1) forwards;animation:svelte-1kitaah-fade_in 0.36s cubic-bezier(0.215, 0.61, 0.355, 1) forwards}.cell.out.svelte-1kitaah{opacity:1;-webkit-animation:svelte-1kitaah-fade_out 0.36s cubic-bezier(0.55, 0.055, 0.675, 0.19) forwards;animation:svelte-1kitaah-fade_out 0.36s cubic-bezier(0.55, 0.055, 0.675, 0.19) forwards}.cell.reduce.svelte-1kitaah{-webkit-animation:none;animation:none;opacity:1}@-webkit-keyframes svelte-1kitaah-fade_in{from{opacity:0;transform:translateY(12px)}to{opacity:1;transform:translateY(0)}}@keyframes svelte-1kitaah-fade_in{from{opacity:0;transform:translateY(12px)}to{opacity:1;transform:translateY(0)}}@-webkit-keyframes svelte-1kitaah-fade_out{from{opacity:1;transform:translateY(0)}to{opacity:0;transform:translateY(-12px)}}@keyframes svelte-1kitaah-fade_out{from{opacity:1;transform:translateY(0)}to{opacity:0;transform:translateY(-12px)}}@-webkit-keyframes svelte-1kitaah-reduce_motion_fade{from{opacity:0}to{opacity:1}}@keyframes svelte-1kitaah-reduce_motion_fade{from{opacity:0}to{opacity:1}}@-webkit-keyframes svelte-1kitaah-reduce_motion_fade_reverse{from{opacity:1}to{opacity:0}}@keyframes svelte-1kitaah-reduce_motion_fade_reverse{from{opacity:1}to{opacity:0}}',
        map: null
      };
      GridCell = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let $prefersReducedMotion, $$unsubscribe_prefersReducedMotion;
        $$unsubscribe_prefersReducedMotion = subscribe(prefersReducedMotion, (value) => $prefersReducedMotion = value);
        let { color = "transparent" } = $$props;
        let { out = false } = $$props;
        let { gridWidth = 0 } = $$props;
        let size = 0.5;
        const randomDelay = () => {
          return Math.random() * 0.5 + "s";
        };
        const randomX = () => {
          const randomLeftValue = Math.floor(Math.random() * gridWidth - 1) - size * 2;
          return `${randomLeftValue / 2}rem`;
        };
        const randomDrop = () => {
          const drop = Math.random() * 100;
          if (drop > 93) {
            return "1rem";
          } else if (drop > 80) {
            return "0.5rem";
          } else if (drop > 60) {
            return "-0.5rem";
          } else if (drop > 40) {
            return "-1rem";
          }
          return "0";
        };
        if ($$props.color === void 0 && $$bindings.color && color !== void 0)
          $$bindings.color(color);
        if ($$props.out === void 0 && $$bindings.out && out !== void 0)
          $$bindings.out(out);
        if ($$props.gridWidth === void 0 && $$bindings.gridWidth && gridWidth !== void 0)
          $$bindings.gridWidth(gridWidth);
        $$result.css.add(css$c);
        $$unsubscribe_prefersReducedMotion();
        return `<div class="${[
          "cell svelte-1kitaah",
          ($prefersReducedMotion ? "reduce" : "") + " " + (out ? "out" : "")
        ].join(" ").trim()}" style="${"background: " + escape(color) + "; width: " + escape(size) + "rem; height: " + escape(size) + "rem; animation-delay: " + escape(randomDelay()) + "; top: " + escape(randomDrop()) + "; left: " + escape(randomX()) + ";"}"></div>`;
      });
      css$b = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.grid-wrapper.svelte-1b0c59v{height:2.5rem;position:relative;contain:layout size style;width:100%;max-width:100vw}.cell-grid.svelte-1b0c59v{height:2.5rem;position:absolute;z-index:2;top:0.5rem;left:0;width:100%;max-width:100vw}.cell-grid.inverted.svelte-1b0c59v{top:2.5rem}.cell-grid.inverted.svelte-1b0c59v:before{--paperHSL:var(--darkBlueHSL);top:0}.cell-grid.svelte-1b0c59v:before{width:100%;content:"";background:linear-gradient(60deg, hsla(var(--paperHSL), 0), hsla(var(--paperHSL), 0.5));height:4rem;position:absolute;top:-1rem;z-index:2;max-width:100vw}',
        map: null
      };
      Grid = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { refresh = "" } = $$props;
        let { inverted = false } = $$props;
        let { squareCount = 0 } = $$props;
        let count = 0;
        let gridWidth;
        let out = false;
        let loadedIn = false;
        const gridColors = [
          "var(--lightGray)",
          "var(--ink)",
          "var(--lightBlue)",
          "var(--darkBlue)",
          "var(--yellow)",
          "var(--orange)"
        ];
        (0, import_just_debounce.default)(() => {
          return;
        }, 300);
        const randomColor = () => {
          const color = Math.floor(Math.random() * gridColors.length);
          return gridColors[color];
        };
        if ($$props.refresh === void 0 && $$bindings.refresh && refresh !== void 0)
          $$bindings.refresh(refresh);
        if ($$props.inverted === void 0 && $$bindings.inverted && inverted !== void 0)
          $$bindings.inverted(inverted);
        if ($$props.squareCount === void 0 && $$bindings.squareCount && squareCount !== void 0)
          $$bindings.squareCount(squareCount);
        $$result.css.add(css$b);
        {
          if (refresh && loadedIn) {
            out = true;
            setTimeout(() => {
              out = false;
            }, 360);
          } else {
            loadedIn = true;
          }
        }
        return `

<div class="${"grid-wrapper svelte-1b0c59v"}"><div class="${["cell-grid svelte-1b0c59v", inverted ? "inverted" : ""].join(" ").trim()}" aria-hidden="${"true"}">${each(Array(count), (cell) => {
          return `${validate_component(GridCell, "GridCell").$$render($$result, { color: randomColor(), out, gridWidth }, {}, {})}`;
        })}</div>
</div>`;
      });
      css$a = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.nav__item.svelte-1jjgk36.svelte-1jjgk36{margin:0 0 0 1.5em}@media(max-width: 768px){.nav__item.svelte-1jjgk36.svelte-1jjgk36{--itemTransition:.4s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;opacity:0;margin-bottom:1.5rem;font-size:1.25rem;line-height:1.5em;color:var(--white);width:100%}@-webkit-keyframes svelte-1jjgk36-move_in_left{from{opacity:0;transform:translateX(-3em)}to{transform:translateX(0);opacity:1}}@keyframes svelte-1jjgk36-move_in_left{from{opacity:0;transform:translateX(-3em)}to{transform:translateX(0);opacity:1}}}.nav__item.open.svelte-1jjgk36.svelte-1jjgk36{-webkit-animation:svelte-1jjgk36-move_in_left var(--itemTransition);animation:svelte-1jjgk36-move_in_left var(--itemTransition)}.nav__item.open.no-motion.svelte-1jjgk36.svelte-1jjgk36{-webkit-animation:none;animation:none;opacity:1}.nav__item.open.svelte-1jjgk36.svelte-1jjgk36:nth-of-type(1){-webkit-animation-delay:0.1s;animation-delay:0.1s}.nav__item.open.svelte-1jjgk36.svelte-1jjgk36:nth-of-type(2){-webkit-animation-delay:0.2s;animation-delay:0.2s}.nav__item.open.svelte-1jjgk36.svelte-1jjgk36:nth-of-type(3){-webkit-animation-delay:0.3s;animation-delay:0.3s}.nav__item.open.svelte-1jjgk36.svelte-1jjgk36:nth-of-type(4){-webkit-animation-delay:0.4s;animation-delay:0.4s}.nav__item.open.svelte-1jjgk36.svelte-1jjgk36:nth-of-type(5){-webkit-animation-delay:0.5s;animation-delay:0.5s}.nav__item.open.svelte-1jjgk36.svelte-1jjgk36:nth-of-type(6){-webkit-animation-delay:0.6s;animation-delay:0.6s}.nav__item.open.svelte-1jjgk36.svelte-1jjgk36:nth-of-type(7){-webkit-animation-delay:0.7s;animation-delay:0.7s}.nav__item.open.svelte-1jjgk36.svelte-1jjgk36:nth-of-type(8){-webkit-animation-delay:0.8s;animation-delay:0.8s}.nav__item.open.svelte-1jjgk36.svelte-1jjgk36:nth-of-type(9){-webkit-animation-delay:0.9s;animation-delay:0.9s}.nav__item.open.svelte-1jjgk36 a.svelte-1jjgk36{color:var(--white)}.nav__item.svelte-1jjgk36 a.svelte-1jjgk36{color:var(--ink);display:block;display:inline-block;font-weight:normal;text-decoration:none;margin:0;position:relative;color:var(--ink);width:-webkit-max-content;width:-moz-max-content;width:max-content}.nav__item.svelte-1jjgk36 a.active.svelte-1jjgk36{font-weight:bold}.nav__item.svelte-1jjgk36 a.active span.svelte-1jjgk36:after{transform:scaleX(1)}.nav__item.svelte-1jjgk36 a span.svelte-1jjgk36{display:inline-block}.nav__item.svelte-1jjgk36 a span.svelte-1jjgk36:after{position:absolute;bottom:0;left:0;content:"";transform:scaleX(0);display:block;width:100%;height:0.1em;background:var(--yellow);transition:transform 0.1s cubic-bezier(0.5, 0, 0.5, 1);transform-origin:right}.nav__item.svelte-1jjgk36 a:hover span.svelte-1jjgk36:after,.nav__item.svelte-1jjgk36 a:focus span.svelte-1jjgk36:after{transform:scaleX(1);transform-origin:left}@media(min-width: 768px){.nav__item.mobile-only.svelte-1jjgk36.svelte-1jjgk36{display:none}}.reduce-motion .nav__item.open{-webkit-animation:none;animation:none;opacity:1}.reduce-motion .nav__item a span::after{transition:none !important}',
        map: null
      };
      NavLink = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let $isMenuOpen, $$unsubscribe_isMenuOpen;
        let $prefersReducedMotion, $$unsubscribe_prefersReducedMotion;
        $$unsubscribe_isMenuOpen = subscribe(isMenuOpen, (value) => $isMenuOpen = value);
        $$unsubscribe_prefersReducedMotion = subscribe(prefersReducedMotion, (value) => $prefersReducedMotion = value);
        let { text } = $$props;
        let { to } = $$props;
        let { path } = $$props;
        let { mobileOnly = false } = $$props;
        let isCurrentPage;
        if ($$props.text === void 0 && $$bindings.text && text !== void 0)
          $$bindings.text(text);
        if ($$props.to === void 0 && $$bindings.to && to !== void 0)
          $$bindings.to(to);
        if ($$props.path === void 0 && $$bindings.path && path !== void 0)
          $$bindings.path(path);
        if ($$props.mobileOnly === void 0 && $$bindings.mobileOnly && mobileOnly !== void 0)
          $$bindings.mobileOnly(mobileOnly);
        $$result.css.add(css$a);
        isCurrentPage = path === to;
        $$unsubscribe_isMenuOpen();
        $$unsubscribe_prefersReducedMotion();
        return `<li class="${[
          "nav__item svelte-1jjgk36",
          ($isMenuOpen ? "open" : "") + " " + ($prefersReducedMotion ? "no-motion" : "") + " " + (mobileOnly ? "mobile-only" : "")
        ].join(" ").trim()}"><a sveltekit:prefetch${add_attribute("href", to, 0)} class="${["nav__link svelte-1jjgk36", isCurrentPage ? "active" : ""].join(" ").trim()}"${add_attribute("aria-current", isCurrentPage ? "page" : false, 0)}><span class="${"svelte-1jjgk36"}">${escape(text)}</span></a>  
</li>`;
      });
      css$9 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}ul.svelte-135787l{display:flex;flex-wrap:wrap;margin:0;width:auto;font-size:0.875rem;list-style-type:none;padding:0}@media(max-width: 768px){ul.svelte-135787l{list-style-type:none;text-align:left;width:100%;display:none;margin:0}ul.open.svelte-135787l{display:block}}',
        map: null
      };
      NavLinks = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let $isMenuOpen, $$unsubscribe_isMenuOpen;
        $$unsubscribe_isMenuOpen = subscribe(isMenuOpen, (value) => $isMenuOpen = value);
        let { path } = $$props;
        if ($$props.path === void 0 && $$bindings.path && path !== void 0)
          $$bindings.path(path);
        $$result.css.add(css$9);
        $$unsubscribe_isMenuOpen();
        return `<ul class="${["svelte-135787l", $isMenuOpen ? "open" : ""].join(" ").trim()}">
  ${validate_component(NavLink, "NavLink").$$render($$result, {
          to: "/",
          text: "About me",
          path,
          mobileOnly: true
        }, {}, {})}
  ${validate_component(NavLink, "NavLink").$$render($$result, { to: "/blog", text: "Blog", path }, {}, {})}
  ${validate_component(NavLink, "NavLink").$$render($$result, { to: "/projects", text: "Projects", path }, {}, {})}
  ${validate_component(NavLink, "NavLink").$$render($$result, {
          to: "/writing-and-speaking",
          text: "Writing & Speaking",
          path
        }, {}, {})}
  ${validate_component(NavLink, "NavLink").$$render($$result, { to: "/contact", text: "Contact", path }, {}, {})}
  ${validate_component(NavLink, "NavLink").$$render($$result, { to: "/products", text: "Products", path }, {}, {})}
  ${validate_component(NavLink, "NavLink").$$render($$result, { to: "/berita", text: "Berita", path }, {}, {})}
  ${validate_component(NavLink, "NavLink").$$render($$result, { to: "/ukm", text: "Ukm", path }, {}, {})}
</ul>`;
      });
      css$8 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}#hamburger.svelte-lsp1gd.svelte-lsp1gd{display:none;justify-content:space-between;flex-direction:column;align-items:stretch;width:var(--buttonSize);height:var(--buttonSize);padding:0.55rem;margin-left:2rem;background:var(--buttonBackground);position:relative;z-index:11;border:2px solid var(--ink);border-radius:var(--buttonSize);overflow:visible;transition-delay:0.15s}#hamburger.svelte-lsp1gd.svelte-lsp1gd:before{content:"";height:var(--buttonSize);width:1px;background:var(--lightGray);display:block;position:absolute;top:-2px;left:-1.1rem;transition:inherit;transition-delay:0.1s}#hamburger.fixed.svelte-lsp1gd.svelte-lsp1gd{position:relative;top:unset;right:unset;-webkit-animation:none;animation:none}#hamburger.fixed.svelte-lsp1gd .line.svelte-lsp1gd{background:var(--white)}#hamburger.fixed.svelte-lsp1gd .line-top.svelte-lsp1gd{transform:translate(0.025em, -0.1em) rotate(-45deg) scaleX(1.5)}#hamburger.fixed.svelte-lsp1gd .line-middle.svelte-lsp1gd{transform:scaleX(0)}#hamburger.fixed.svelte-lsp1gd .line-bottom.svelte-lsp1gd{transform:translate(0.025em, 0.1em) rotate(45deg) scaleX(1.5)}#hamburger.svelte-lsp1gd .line.svelte-lsp1gd{width:100%;height:2px;background:var(--ink);transition:background 0.2s, transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);transform-origin:right}#hamburger.svelte-lsp1gd .line-middle.svelte-lsp1gd{transform-origin:center}#hamburger.svelte-lsp1gd:hover .line.svelte-lsp1gd,#hamburger.svelte-lsp1gd:focus .line.svelte-lsp1gd{background:var(--yellow)}@media(max-width: 768px){#hamburger.svelte-lsp1gd.svelte-lsp1gd{display:flex}}',
        map: null
      };
      HamburgerButton = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let $isMenuOpen, $$unsubscribe_isMenuOpen;
        $$unsubscribe_isMenuOpen = subscribe(isMenuOpen, (value) => $isMenuOpen = value);
        let readableMenuStateOpposite;
        $$result.css.add(css$8);
        readableMenuStateOpposite = $isMenuOpen ? "Close" : "Open";
        $$unsubscribe_isMenuOpen();
        return `<button id="${"hamburger"}"${add_attribute("aria-pressed", $isMenuOpen, 0)} class="${["settings-toggle svelte-lsp1gd", $isMenuOpen ? "fixed" : ""].join(" ").trim()}"><span class="${"sr"}">${escape(readableMenuStateOpposite)} menu</span>
	<div class="${"line line-top svelte-lsp1gd"}" aria-hidden="${"true"}"></div>
	<div class="${"line line-middle svelte-lsp1gd"}" aria-hidden="${"true"}"></div>
	<div class="${"line line-bottom svelte-lsp1gd"}" aria-hidden="${"true"}"></div>
</button>`;
      });
      css$7 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.main-nav.svelte-1gl5mw3{text-align:right;font-family:var(--headingFont)}@media(max-width: 768px){.main-nav.svelte-1gl5mw3{display:block;position:fixed;transition:transform 0.4s cubic-bezier(1, 0, 0, 1), opacity 0.4s cubic-bezier(1, 0, 0, 1);transform:translateX(0);background:hsla(var(--blackHSL), 0.95);width:100vw;height:100vh;top:0;left:-100vw;display:flex;flex-wrap:wrap;place-content:center;padding:3rem;opacity:0;z-index:10}.main-nav.open.svelte-1gl5mw3,.main-nav.svelte-1gl5mw3:focus-within{transform:translateX(100vw);opacity:1}}@media(min-width: 768px){.main-nav.svelte-1gl5mw3{display:flex;justify-content:flex-end}}',
        map: null
      };
      NavMenu = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let $isMenuOpen, $$unsubscribe_isMenuOpen;
        $$unsubscribe_isMenuOpen = subscribe(isMenuOpen, (value) => $isMenuOpen = value);
        let { path } = $$props;
        if ($$props.path === void 0 && $$bindings.path && path !== void 0)
          $$bindings.path(path);
        $$result.css.add(css$7);
        $$unsubscribe_isMenuOpen();
        return `<div>${validate_component(HamburgerButton, "HamburgerButton").$$render($$result, {}, {}, {})}

		<nav class="${["main-nav nav svelte-1gl5mw3", $isMenuOpen ? "open" : ""].join(" ").trim()}" role="${"navigation"}">${validate_component(NavLinks, "NavLinks").$$render($$result, { path }, {}, {})}</nav>
	</div>`;
      });
      LightDarkIcon = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<svg width="${"100%"}" height="${"100%"}" viewBox="${"0 0 210 419"}" version="${"1.1"}" style="${"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;"}"><g id="${"Artboard3"}" transform="${"matrix(1,0,0,1,374.4,-53.7328)"}"><rect x="${"-374.4"}" y="${"53.733"}" width="${"209.435"}" height="${"418.87"}" style="${"fill:none;"}"></rect><g transform="${"matrix(0.232589,0,0,0.232589,-323.649,302.224)"}"><circle cx="${"232.025"}" cy="${"282.304"}" r="${"148.163"}" style="${"fill:none;stroke-width:44.79px;"}"></circle></g><g transform="${"matrix(0.332894,0,0,0.325737,-352.906,286.451)"}"><g><g transform="${"matrix(1,0,0,1,0,4.81304)"}"><path d="${"M250,82.475L250,24.014"}" style="${"fill:none;stroke-width:31.63px;"}"></path></g><g transform="${"matrix(1,0,0,1,0,388.699)"}"><path d="${"M250,82.475L250,24.014"}" style="${"fill:none;stroke-width:31.63px;"}"></path></g></g><g transform="${"matrix(-0.5,-0.866025,0.866025,-0.5,158.494,591.506)"}"><g transform="${"matrix(1,0,0,1,0,4.81304)"}"><path d="${"M250,82.475L250,24.014"}" style="${"fill:none;stroke-width:31.93px;"}"></path></g><g transform="${"matrix(1,0,0,1,0,388.699)"}"><path d="${"M250,82.475L250,24.014"}" style="${"fill:none;stroke-width:31.93px;"}"></path></g></g><g transform="${"matrix(-0.5,0.866025,-0.866025,-0.5,591.506,158.494)"}"><g transform="${"matrix(1,0,0,1,0,4.81304)"}"><path d="${"M250,82.475L250,24.014"}" style="${"fill:none;stroke-width:31.34px;"}"></path></g><g transform="${"matrix(1,0,0,1,0,388.699)"}"><path d="${"M250,82.475L250,24.014"}" style="${"fill:none;stroke-width:31.34px;"}"></path></g></g></g><g transform="${"matrix(0.550187,0,0,0.550187,-373.251,-144.776)"}"><path d="${"M179.963,459.132C173.842,471.079 170.387,484.617 170.387,498.955C170.387,547.265 209.608,586.487 257.918,586.487C264.271,586.487 270.466,585.809 276.438,584.52C261.932,612.833 232.455,632.227 198.483,632.227C150.173,632.227 110.952,593.006 110.952,544.696C110.952,502.739 140.536,467.637 179.963,459.132Z"}" style="${"fill:none;stroke-width:18.93px;"}"></path></g></g></svg>`;
      });
      css$6 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}#dark-mode-toggle{background:var(--buttonBackground)}#dark-mode-toggle:hover svg path,#dark-mode-toggle:hover svg circle,#dark-mode-toggle:focus svg path,#dark-mode-toggle:focus svg circle{stroke:var(--yellow)}#dark-mode-toggle.dark svg{transform:translateY(0)}#dark-mode-toggle svg{--itemTransition:.4s cubic-bezier(.7,-0.01,0,1.01);width:2rem;height:4rem;transform:translateY(-1.975rem);transition:transform var(--itemTransition), fill var(--itemTransition), stroke var(--itemTransition), background var(--itemTransition)}#dark-mode-toggle svg path,#dark-mode-toggle svg circle{transition:transform var(--itemTransition), fill var(--itemTransition), stroke var(--itemTransition), background var(--itemTransition);stroke:var(--ink)}',
        map: null
      };
      DarkModeToggle = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let $theme, $$unsubscribe_theme;
        $$unsubscribe_theme = subscribe(theme, (value) => $theme = value);
        let isDarkMode;
        let enableOrDisable;
        $$result.css.add(css$6);
        isDarkMode = $theme === Themes.Dark;
        enableOrDisable = isDarkMode ? "Disable" : "Enable";
        $$unsubscribe_theme();
        return `<button id="${"dark-mode-toggle"}" class="${["settings-toggle", isDarkMode ? "dark" : ""].join(" ").trim()}" title="${escape(enableOrDisable) + " dark mode"}"${add_attribute("aria-pressed", isDarkMode, 0)}><span class="${"sr"}">${escape(enableOrDisable)} dark mode</span>
  ${validate_component(LightDarkIcon, "LightDarkIcon").$$render($$result, {}, {}, {})}
</button>`;
      });
      css$5 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}#motion-toggle.svelte-1fjs0iv{background:var(--buttonBackground);font-weight:bold;font-size:0.6rem;text-transform:uppercase;color:var(--ink);font-family:var(--headingFont)}#motion-toggle[aria-pressed=true].svelte-1fjs0iv::before{content:"";width:calc(100% + 0.1rem);height:0.1rem;background:var(--ink);display:block;position:absolute;transform-origin:center;top:calc(50% - 0.05rem);left:-0.05rem;z-index:11;border:0;transform:rotate(45deg)}#motion-toggle.svelte-1fjs0iv:hover,#motion-toggle.svelte-1fjs0iv:focus{color:var(--yellow)}',
        map: null
      };
      ReduceMotionToggle = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let $prefersReducedMotion, $$unsubscribe_prefersReducedMotion;
        $$unsubscribe_prefersReducedMotion = subscribe(prefersReducedMotion, (value) => $prefersReducedMotion = value);
        let enableOrDisable;
        $$result.css.add(css$5);
        enableOrDisable = $prefersReducedMotion ? "Disable" : "Enable";
        $$unsubscribe_prefersReducedMotion();
        return `<button id="${"motion-toggle"}" class="${"settings-toggle svelte-1fjs0iv"}" title="${escape(enableOrDisable) + " reduced motion"}"${add_attribute("aria-pressed", $prefersReducedMotion, 0)}><span class="${"sr"}">${escape(enableOrDisable)} reduced motion</span>
  Move
</button>`;
      });
      css$4 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.logo.svelte-1x3mjbx{width:auto;height:2rem;display:block}@media(min-width: 1960px) and (min-height: 1200px){.logo.svelte-1x3mjbx{height:3rem}}.icon-container.svelte-1x3mjbx{display:flex;align-items:center;position:fixed;right:1rem;top:calc(1rem - 2px);transition:opacity 0.2s}@media(min-width: 768px){.icon-container.svelte-1x3mjbx{position:static}}.sticky.svelte-1x3mjbx{--ink:var(--white);--buttonBackground:transparent}.header.svelte-1x3mjbx{display:flex;justify-content:space-between;align-items:center;width:100%;position:relative;z-index:3;padding:var(--quarterNote) var(--margin) var(--halfNote)}@media(min-width: 768px){.header.svelte-1x3mjbx{padding:var(--halfNote) var(--margin)}}.skip-to-content-link.svelte-1x3mjbx{--itemTransition:.15s cubic-bezier(0.86, 0, 0.07, 1);transition:transform var(--itemTransition), opacity var(--itemTransition);position:absolute;top:-6rem;left:1rem;padding:0.5em;opacity:0;display:flex;justify-content:center;align-items:center;height:3rem;background:var(--darkBlue);color:var(--white);font-family:var(--headingFont)}.skip-to-content-link.svelte-1x3mjbx:focus{transform:translateY(7rem);opacity:1;z-index:11}',
        map: null
      };
      Header = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let $isMenuOpen, $$unsubscribe_isMenuOpen;
        let $isScrollingDown, $$unsubscribe_isScrollingDown;
        $$unsubscribe_isMenuOpen = subscribe(isMenuOpen, (value) => $isMenuOpen = value);
        $$unsubscribe_isScrollingDown = subscribe(isScrollingDown, (value) => $isScrollingDown = value);
        let { path } = $$props;
        if ($$props.path === void 0 && $$bindings.path && path !== void 0)
          $$bindings.path(path);
        $$result.css.add(css$4);
        $$unsubscribe_isMenuOpen();
        $$unsubscribe_isScrollingDown();
        return `<div><header class="${"header svelte-1x3mjbx"}"><a class="${"skip-to-content-link svelte-1x3mjbx"}" href="${"#main"}">Skip to main content
    </a>

		<a href="${"/"}" class="${"logo svelte-1x3mjbx"}">${validate_component(LogoSVG, "LogoSVG").$$render($$result, {}, {}, {})}
			<span class="${"sr"}">Home</span></a>
		
		<div class="${[
          "icon-container svelte-1x3mjbx",
          ($isMenuOpen ? "sticky" : "") + " " + ($isScrollingDown && !$isMenuOpen ? "ghosty" : "")
        ].join(" ").trim()}">${validate_component(ReduceMotionToggle, "ReduceMotionToggle").$$render($$result, {}, {}, {})}
			${validate_component(DarkModeToggle, "DarkModeToggle").$$render($$result, {}, {}, {})}
			${validate_component(NavMenu, "NavMenu").$$render($$result, { path }, {}, {})}</div></header>

  ${validate_component(Grid, "Grid").$$render($$result, { refresh: path }, {}, {})}

	<noscript><style>#dark-mode-toggle, 
			#motion-toggle,
			#contact-form {
				display: none;
			}

			.page-head .heading-wrapper .brace.closing-brace {
        transform: translateX(0);
      }</style></noscript>
</div>`;
      });
      css$3 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.footer.svelte-ly5ub.svelte-ly5ub{width:100%;background:var(--darkBlue);color:var(--white);line-height:1.6em;padding:2.5rem var(--margin) 2rem}@media(min-width: 1024px){.footer.svelte-ly5ub.svelte-ly5ub{display:grid;grid-template-columns:1fr 1fr 2fr;align-items:stretch}}@media(min-width: 1024px){.footer.svelte-ly5ub.svelte-ly5ub{font-size:0.8rem}}.footer.svelte-ly5ub h2.svelte-ly5ub{color:inherit;font-size:0.7rem;margin:0 0 var(--quarterNote);width:-webkit-max-content;width:-moz-max-content;width:max-content}.footer.svelte-ly5ub a.svelte-ly5ub{color:inherit;-webkit-text-decoration-color:var(--yellow);text-decoration-color:var(--yellow)}.footer-wrapper.svelte-ly5ub.svelte-ly5ub{overflow:hidden;max-width:100vw}.footer__links.svelte-ly5ub.svelte-ly5ub{padding:0 var(--quarterNote) var(--quarterNote);margin:2rem 2rem 2rem 1rem;border-bottom:1px solid var(--lightBlue)}.footer__links.svelte-ly5ub .svelte-ly5ub::marker{color:var(--lightBlue)}@media(min-width: 1024px){.footer__links.svelte-ly5ub.svelte-ly5ub{border-bottom:0;border-right:1px solid var(--lightBlue);padding:1rem;margin-left:0}}.footer__links.svelte-ly5ub ul.svelte-ly5ub{list-style-type:square;margin:var(--quarterNote) 0}.footer__links.svelte-ly5ub li.svelte-ly5ub{margin:0.5rem 0 0;font-family:var(--headingFont)}.footer.svelte-ly5ub .fine-print.svelte-ly5ub{font-style:italic;margin-left:1rem;align-self:center}@media(min-width: 1024px){.footer.svelte-ly5ub .fine-print.svelte-ly5ub{margin-left:0}}.footer.svelte-ly5ub .fine-print p.svelte-ly5ub{margin:0.5rem 0;max-width:44em}',
        map: null
      };
      Footer = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        const currentYear = new Date().getFullYear();
        $$result.css.add(css$3);
        return `<div class="${"footer-wrapper svelte-ly5ub"}">${validate_component(Grid, "Grid").$$render($$result, { inverted: true }, {}, {})}
  <footer class="${"footer svelte-ly5ub"}"><div class="${"footer__links svelte-ly5ub"}"><h2 class="${"h4 svelte-ly5ub"}" id="${"footer-pages"}">Pages</h2>
      <nav class="${"svelte-ly5ub"}"><ul aria-labelledby="${"footer-pages"}" class="${"svelte-ly5ub"}"><li class="${"svelte-ly5ub"}"><a href="${"/"}" class="${"svelte-ly5ub"}">Home/About</a></li>
          <li class="${"svelte-ly5ub"}"><a href="${"/blog"}" class="${"svelte-ly5ub"}">Blog</a></li>
          <li class="${"svelte-ly5ub"}"><a href="${"/projects"}" class="${"svelte-ly5ub"}">Projects</a></li>
          <li class="${"svelte-ly5ub"}"><a href="${"/writing-and-speaking"}" class="${"svelte-ly5ub"}">Writing &amp; Speaking</a></li>
          <li class="${"svelte-ly5ub"}"><a href="${"/contact"}" class="${"svelte-ly5ub"}">Contact</a></li></ul></nav></div>
    <div class="${"footer__links svelte-ly5ub"}"><h2 class="${"h4 svelte-ly5ub"}" id="${"footer-links"}">Links</h2>
      <ul aria-labelledby="${"footer-links"}" class="${"svelte-ly5ub"}"><li class="${"svelte-ly5ub"}"><a href="${"/api/rss.xml"}" rel="${"external"}" class="${"svelte-ly5ub"}">RSS</a></li>
        <li class="${"svelte-ly5ub"}"><a href="${"https://ko-fi.com/collinsworth"}" class="${"svelte-ly5ub"}">Ko-Fi</a></li>
        <li class="${"svelte-ly5ub"}"><a href="${"https://github.com/rickyjanuari"}" class="${"svelte-ly5ub"}">GitHub</a></li>
        <li class="${"svelte-ly5ub"}"><a href="${"https://codepen.io/collinsworth"}" class="${"svelte-ly5ub"}">CodePen</a></li>
        <li class="${"svelte-ly5ub"}"><a href="${"https://twitter.com/rickyjanuari"}" class="${"svelte-ly5ub"}">Twitter</a></li></ul></div>

    <div class="${"fine-print svelte-ly5ub"}"><p class="${"svelte-ly5ub"}">\xA92015\u2013${escape(currentYear)} Ricky Januari.</p>

      <p class="${"svelte-ly5ub"}">Made with 
        <del>WordPress</del>
        <del>Gridsome</del>
        <a rel="${"external"}" href="${"https://kit.svelte.dev/"}" class="${"svelte-ly5ub"}">SvelteKit</a>; hosted\xA0on\xA0<a rel="${"external"}" href="${"https://netlify.com"}" class="${"svelte-ly5ub"}">Netlify</a>.
      </p></div></footer>
</div>`;
      });
      css$2 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.transition-wrapper.span.svelte-1lfrk4m{grid-column:1/-1;grid-row:1/2}',
        map: null
      };
      PageTransition = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let $$unsubscribe_prefersReducedMotion;
        $$unsubscribe_prefersReducedMotion = subscribe(prefersReducedMotion, (value) => value);
        let { refresh = "" } = $$props;
        let { span = false } = $$props;
        let { transitionIn = true } = $$props;
        let { transitionOut = true } = $$props;
        if ($$props.refresh === void 0 && $$bindings.refresh && refresh !== void 0)
          $$bindings.refresh(refresh);
        if ($$props.span === void 0 && $$bindings.span && span !== void 0)
          $$bindings.span(span);
        if ($$props.transitionIn === void 0 && $$bindings.transitionIn && transitionIn !== void 0)
          $$bindings.transitionIn(transitionIn);
        if ($$props.transitionOut === void 0 && $$bindings.transitionOut && transitionOut !== void 0)
          $$bindings.transitionOut(transitionOut);
        $$result.css.add(css$2);
        $$unsubscribe_prefersReducedMotion();
        return `<div class="${["transition-wrapper svelte-1lfrk4m", span ? "span" : ""].join(" ").trim()}">${slots.default ? slots.default({}) : ``}</div>`;
      });
      css$1 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.page-head.svelte-o53j9t.svelte-o53j9t{--transition:transform .24s cubic-bezier(0.165, 0.84, 0.44, 1);margin-bottom:var(--halfNote);display:flex;align-items:center;flex-wrap:wrap;contain:layout;overflow:hidden;position:relative;z-index:0;font-size:1.1rem;min-height:2.2rem}.page-head.svelte-o53j9t .heading-wrapper.svelte-o53j9t{display:flex;position:relative;width:auto}.page-head.svelte-o53j9t .heading-wrapper .brace.svelte-o53j9t{font-family:var(--headingFont);font-weight:normal;font-size:1.25em;color:var(--lightGray);margin:0 0.1em 0 0;z-index:2;position:relative;left:-1px}.page-head.svelte-o53j9t .heading-wrapper .brace.closing-brace.svelte-o53j9t{color:var(--yellow);margin:0;transition:var(--transition);transform:translateX(calc(-100% + 0.3em));position:absolute;left:100%;width:100%;background:var(--paper);box-shadow:3rem 0 0 1rem var(--paper);overflow:visible}.page-head.svelte-o53j9t .heading-wrapper.in .closing-brace.svelte-o53j9t{transform:translateX(0)}.page-head.svelte-o53j9t .heading-wrapper.no-motion .closing-brace.svelte-o53j9t{transform:translateX(0)}.page-head.svelte-o53j9t h1.svelte-o53j9t{font-size:inherit;margin:0 0.25rem 0 0;padding:0;width:-webkit-max-content;width:-moz-max-content;width:max-content;font-weight:normal;display:flex;align-items:center}.page-head.svelte-o53j9t h1 .title-wrap.svelte-o53j9t{position:relative;z-index:1;background:linear-gradient(90deg, #a7a8aa, #92abb2, #5eca78, #b6ec1f, #ffd100);-webkit-text-fill-color:transparent;-webkit-background-clip:text;background-clip:text;font-family:var(--headingFont);text-transform:lowercase;flex:0 1 auto;white-space:nowrap;line-height:1.2}',
        map: null
      };
      PageHeading = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let $prefersReducedMotion, $$unsubscribe_prefersReducedMotion;
        $$unsubscribe_prefersReducedMotion = subscribe(prefersReducedMotion, (value) => $prefersReducedMotion = value);
        let { title } = $$props;
        let { isSinglePost = false } = $$props;
        let computedTitle = "";
        let isWorking = false;
        if ($$props.title === void 0 && $$bindings.title && title !== void 0)
          $$bindings.title(title);
        if ($$props.isSinglePost === void 0 && $$bindings.isSinglePost && isSinglePost !== void 0)
          $$bindings.isSinglePost(isSinglePost);
        $$result.css.add(css$1);
        {
          if (title) {
            if (title === "/") {
              title = `about me`;
            } else if (title[0] === "/") {
              title = title.slice(1);
            }
            title = title.split("/").join(" / ").replace(/-/g, " ");
            isWorking = false;
            setTimeout(() => {
              isWorking = true;
              computedTitle = title;
            }, 420);
          }
        }
        $$unsubscribe_prefersReducedMotion();
        return `${validate_component(PageTransition, "PageTransition").$$render($$result, { refresh: isSinglePost, span: true }, {}, {
          default: () => {
            return `${!isSinglePost ? `<div class="${"page-head svelte-o53j9t"}"><div class="${[
              "heading-wrapper svelte-o53j9t",
              (isWorking ? "in" : "") + " " + ($prefersReducedMotion ? "no-motion" : "")
            ].join(" ").trim()}"><span class="${"brace svelte-o53j9t"}" aria-hidden="${"true"}">[</span>
        <h1 class="${"svelte-o53j9t"}"><div class="${"title-wrap svelte-o53j9t"}">${escape(computedTitle)}
            <noscript>${escape(title)}</noscript></div></h1>
        <span class="${"brace closing-brace svelte-o53j9t"}" aria-hidden="${"true"}">]</span>
        
        <noscript>
          <style>.closing-brace {
              transform: none !important;
            }</style></noscript></div></div>` : `<div class="${"page-head svelte-o53j9t"}"></div>`}`;
          }
        })}`;
      });
      css = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.loader.svelte-1ahh2zx.svelte-1ahh2zx.svelte-1ahh2zx.svelte-1ahh2zx{background:hsla(var(--paperHSL), 0.7);position:fixed;z-index:3;width:100vw;height:100vh;display:flex;justify-content:center;align-items:center;opacity:0;pointer-events:none;transition:opacity 0.1s}.loader.loading.svelte-1ahh2zx.svelte-1ahh2zx.svelte-1ahh2zx.svelte-1ahh2zx{opacity:1;pointer-events:unset}.loading-wrapper.svelte-1ahh2zx.svelte-1ahh2zx.svelte-1ahh2zx.svelte-1ahh2zx{--unit:2.5rem;--easing:cubic-bezier(0.08, 0.82, 0.17, 1);display:grid;grid-template-columns:1fr repeat(3, var(--unit)) 1fr;grid-gap:1rem}.loading-wrapper.svelte-1ahh2zx .dot.svelte-1ahh2zx.svelte-1ahh2zx.svelte-1ahh2zx{width:var(--unit);height:var(--unit);border-radius:var(--unit);grid-row:1/2;transform:scale(0)}.loading-wrapper.svelte-1ahh2zx .dot.outer.svelte-1ahh2zx.svelte-1ahh2zx.svelte-1ahh2zx{-webkit-animation:svelte-1ahh2zx-outer_pop 1000ms infinite var(--easing);animation:svelte-1ahh2zx-outer_pop 1000ms infinite var(--easing);background:var(--yellow)}.loading-wrapper.svelte-1ahh2zx .dot.outer.svelte-1ahh2zx.svelte-1ahh2zx.svelte-1ahh2zx:nth-of-type(2){-webkit-animation-delay:100ms;animation-delay:100ms;background:var(--lightBlue)}.loading-wrapper.svelte-1ahh2zx .dot.outer.svelte-1ahh2zx.svelte-1ahh2zx.svelte-1ahh2zx:nth-of-type(3){-webkit-animation-delay:200ms;animation-delay:200ms;background:var(--lightGray)}.loading-wrapper.svelte-1ahh2zx .dot.inner.svelte-1ahh2zx.svelte-1ahh2zx.svelte-1ahh2zx{background:var(--paper);-webkit-animation:svelte-1ahh2zx-inner_pop 1000ms infinite var(--easing);animation:svelte-1ahh2zx-inner_pop 1000ms infinite var(--easing)}.loading-wrapper.svelte-1ahh2zx .dot.inner.svelte-1ahh2zx+.inner.svelte-1ahh2zx.svelte-1ahh2zx{-webkit-animation-delay:100ms;animation-delay:100ms}.loading-wrapper.svelte-1ahh2zx .dot.inner.svelte-1ahh2zx+.inner.svelte-1ahh2zx+.inner.svelte-1ahh2zx{-webkit-animation-delay:200ms;animation-delay:200ms}.loading-wrapper.svelte-1ahh2zx .first.svelte-1ahh2zx.svelte-1ahh2zx.svelte-1ahh2zx{grid-column:2/3}.loading-wrapper.svelte-1ahh2zx .second.svelte-1ahh2zx.svelte-1ahh2zx.svelte-1ahh2zx{grid-column:3/4}.loading-wrapper.svelte-1ahh2zx .third.svelte-1ahh2zx.svelte-1ahh2zx.svelte-1ahh2zx{grid-column:4/5}@-webkit-keyframes svelte-1ahh2zx-outer_pop{0%{transform:scale(0)}50%{transform:scale(1)}75%{transform:scale(1)}100%{transform:scale(0)}}@keyframes svelte-1ahh2zx-outer_pop{0%{transform:scale(0)}50%{transform:scale(1)}75%{transform:scale(1)}100%{transform:scale(0)}}@-webkit-keyframes svelte-1ahh2zx-inner_pop{0%{transform:scale(0)}35%{transform:scale(0)}60%{transform:scale(1)}95%{transform:scale(1)}96%{transform:scale(0)}100%{transform:scale(0)}}@keyframes svelte-1ahh2zx-inner_pop{0%{transform:scale(0)}35%{transform:scale(0)}60%{transform:scale(1)}95%{transform:scale(1)}96%{transform:scale(0)}100%{transform:scale(0)}}',
        map: null
      };
      Loader = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { loading } = $$props;
        if ($$props.loading === void 0 && $$bindings.loading && loading !== void 0)
          $$bindings.loading(loading);
        $$result.css.add(css);
        return `<div class="${["loader svelte-1ahh2zx", loading ? "loading" : ""].join(" ").trim()}"><div class="${"loading-wrapper svelte-1ahh2zx"}"><div class="${"dot outer first svelte-1ahh2zx"}"></div>
    <div class="${"dot outer second svelte-1ahh2zx"}"></div>
    <div class="${"dot outer third svelte-1ahh2zx"}"></div>

    <div class="${"dot inner first svelte-1ahh2zx"}"></div>
    <div class="${"dot inner second svelte-1ahh2zx"}"></div>
    <div class="${"dot inner third svelte-1ahh2zx"}"></div></div>
</div>`;
      });
      load = async ({ url }) => {
        const path = url.pathname;
        return { props: { path } };
      };
      _layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let $isScrollingDown, $$unsubscribe_isScrollingDown;
        let $prefersReducedMotion, $$unsubscribe_prefersReducedMotion;
        let $isLoading, $$unsubscribe_isLoading;
        $$unsubscribe_isScrollingDown = subscribe(isScrollingDown, (value) => $isScrollingDown = value);
        $$unsubscribe_prefersReducedMotion = subscribe(prefersReducedMotion, (value) => $prefersReducedMotion = value);
        $$unsubscribe_isLoading = subscribe(isLoading, (value) => $isLoading = value);
        let { path } = $$props;
        let lastScrollPosition = 0;
        const isSinglePostCheck = new RegExp(/\/blog\/[A-z0-9\-_]+\/?$/);
        let isSinglePost;
        functionThrottle(() => {
          if (window.outerWidth >= 768) {
            if ($isScrollingDown)
              isScrollingDown.set(false);
            return;
          }
          const currentScrollPosition = window.scrollY;
          const delta = lastScrollPosition - currentScrollPosition;
          if (delta > 0 && delta < 10) {
            return;
          }
          if (lastScrollPosition > currentScrollPosition) {
            isScrollingDown.set(false);
          } else if (currentScrollPosition > 240) {
            isScrollingDown.set(true);
          }
          lastScrollPosition = currentScrollPosition;
        }, 100);
        if ($$props.path === void 0 && $$bindings.path && path !== void 0)
          $$bindings.path(path);
        isSinglePost = isSinglePostCheck.test(path);
        $$unsubscribe_isScrollingDown();
        $$unsubscribe_prefersReducedMotion();
        $$unsubscribe_isLoading();
        return `

${$$result.head += `<meta property="${"og:site_name"}" content="${"Ricky Januari"}" data-svelte="svelte-1b4bhzt"><meta property="${"og:locale"}" content="${"en_US"}" data-svelte="svelte-1b4bhzt"><meta name="${"twitter:creator"}" content="${"@rickyjanuari"}" data-svelte="svelte-1b4bhzt"><meta name="${"twitter:site"}" content="${"@rickyjanuari"}" data-svelte="svelte-1b4bhzt"><meta name="${"twitter:card"}" content="${"summary_large_image"}" data-svelte="svelte-1b4bhzt">${`<script defer data-domain="${"rickyjanuari.com"}" src="${"https://plausible.io/js/plausible.js"}" data-svelte="svelte-1b4bhzt"><\/script>`}`, ""}

<div id="${"app"}"${add_classes(($prefersReducedMotion ? "reduce-motion" : "").trim())}>${validate_component(Loader, "Loader").$$render($$result, { loading: $isLoading }, {}, {})}

	${validate_component(Header, "Header").$$render($$result, { path }, {}, {})} 

	<div class="${["layout", !isSinglePost ? "subpage" : ""].join(" ").trim()}">${validate_component(PageHeading, "PageHeading").$$render($$result, { title: path, isSinglePost }, {}, {})}

		${validate_component(PageTransition, "PageTransition").$$render($$result, { refresh: path }, {}, {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        })}</div>

	${validate_component(Footer, "Footer").$$render($$result, {}, {}, {})}</div>`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/0.js
  var __exports = {};
  __export(__exports, {
    css: () => css2,
    entry: () => entry,
    js: () => js,
    module: () => layout_svelte_exports
  });
  var entry, js, css2;
  var init__ = __esm({
    ".svelte-kit/output/server/nodes/0.js"() {
      init_layout_svelte();
      entry = "pages/__layout.svelte-a8d13e7f.js";
      js = ["pages/__layout.svelte-a8d13e7f.js", "chunks/vendor-b62d7b9b.js", "chunks/store-17e8b0ad.js", "chunks/navigation-53ece758.js", "chunks/singletons-d1fb5791.js"];
      css2 = ["assets/pages/__layout.svelte-2858a215.css"];
    }
  });

  // .svelte-kit/output/server/chunks/Main-5d179e14.js
  var Main;
  var init_Main_5d179e14 = __esm({
    ".svelte-kit/output/server/chunks/Main-5d179e14.js"() {
      init_index_2749e1b7();
      Main = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<main id="${"main"}" tabindex="${"-1"}">${slots.default ? slots.default({}) : ``}</main>`;
      });
    }
  });

  // .svelte-kit/output/server/entries/pages/__error.svelte.js
  var error_svelte_exports = {};
  __export(error_svelte_exports, {
    default: () => _error,
    load: () => load2
  });
  var css3, load2, _error;
  var init_error_svelte = __esm({
    ".svelte-kit/output/server/entries/pages/__error.svelte.js"() {
      init_index_2749e1b7();
      init_Main_5d179e14();
      css3 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.subhead.svelte-1yjm7i7{font-size:1.4rem;margin:0 0 4rem;max-width:20em;line-height:1.2;font-family:var(--headingFont)}',
        map: null
      };
      load2 = ({ error: error2, status }) => {
        return { props: { error: error2, status } };
      };
      _error = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { status } = $$props;
        let { error: error2 } = $$props;
        if ($$props.status === void 0 && $$bindings.status && status !== void 0)
          $$bindings.status(status);
        if ($$props.error === void 0 && $$bindings.error && error2 !== void 0)
          $$bindings.error(error2);
        $$result.css.add(css3);
        return `${validate_component(Main, "Main").$$render($$result, {}, {}, {
          default: () => {
            return `<h2>${escape(status)}</h2>
  
  <p class="${"subhead svelte-1yjm7i7"}">${escape(error2.message)}</p>
  
  <p><strong>Ope!</strong> Maybe try these links?</p>
  <ul><li><a href="${"/"}">Home</a></li>
    <li><a href="${"/blog"}">Blog</a></li>
    <li><a href="${"/contact?from_page=error"}">Contact</a></li></ul>`;
          }
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/1.js
  var __exports2 = {};
  __export(__exports2, {
    css: () => css4,
    entry: () => entry2,
    js: () => js2,
    module: () => error_svelte_exports
  });
  var entry2, js2, css4;
  var init__2 = __esm({
    ".svelte-kit/output/server/nodes/1.js"() {
      init_error_svelte();
      entry2 = "pages/__error.svelte-23c77fb4.js";
      js2 = ["pages/__error.svelte-23c77fb4.js", "chunks/vendor-b62d7b9b.js", "chunks/Main-f748586d.js"];
      css4 = ["assets/pages/__error.svelte-3f81cfec.css"];
    }
  });

  // .svelte-kit/output/server/entries/pages/index.svelte.js
  var index_svelte_exports = {};
  __export(index_svelte_exports, {
    default: () => Routes
  });
  var Routes;
  var init_index_svelte = __esm({
    ".svelte-kit/output/server/entries/pages/index.svelte.js"() {
      init_index_2749e1b7();
      Routes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<h1>Welcome to SvelteKit</h1>
<p>Visit <a href="${"https://kit.svelte.dev"}">kit.svelte.dev</a> to read the documentation</p>`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/2.js
  var __exports3 = {};
  __export(__exports3, {
    css: () => css5,
    entry: () => entry3,
    js: () => js3,
    module: () => index_svelte_exports
  });
  var entry3, js3, css5;
  var init__3 = __esm({
    ".svelte-kit/output/server/nodes/2.js"() {
      init_index_svelte();
      entry3 = "pages/index.svelte-ed1ebe1d.js";
      js3 = ["pages/index.svelte-ed1ebe1d.js", "chunks/vendor-b62d7b9b.js"];
      css5 = [];
    }
  });

  // .svelte-kit/output/server/chunks/TagList-0e1f394c.js
  var css$12, Tag, css6, TagList;
  var init_TagList_0e1f394c = __esm({
    ".svelte-kit/output/server/chunks/TagList-0e1f394c.js"() {
      init_index_2749e1b7();
      css$12 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.tag.svelte-7wf94y{margin:0}.tag.svelte-7wf94y::marker{content:none}.tag__link.svelte-7wf94y{display:block;padding:1.1em 0.75em;background:var(--lighterBlue);margin:0;color:var(--darkGray);text-decoration:none;font-weight:bold;font-family:var(--headingFont);font-size:0.65em;line-height:0;text-transform:uppercase;transition:background 0.15s, color 0.15s}.tag__link.svelte-7wf94y:hover,.tag__link.svelte-7wf94y:focus{background:var(--yellow);color:var(--black)}.dark .tag .tag__link{color:var(--ink);background:var(--darkBlue)}',
        map: null
      };
      Tag = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { to } = $$props;
        if ($$props.to === void 0 && $$bindings.to && to !== void 0)
          $$bindings.to(to);
        $$result.css.add(css$12);
        return `<li class="${"tag svelte-7wf94y"}"><a${add_attribute("href", to, 0)} class="${"tag__link svelte-7wf94y"}">${slots.default ? slots.default({}) : ``}</a>
	</li>`;
      });
      css6 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.tag-list.svelte-18kfwov{display:flex;flex-wrap:wrap;gap:0.25rem;list-style-type:none;margin:0;padding:0;font-size:0.9rem}',
        map: null
      };
      TagList = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        $$result.css.add(css6);
        return `<ul class="${"tag-list no-bullets svelte-18kfwov"}">${slots.default ? slots.default({}) : ``}
</ul>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/ExternalLink-29dd7148.js
  var css7, ExternalLink;
  var init_ExternalLink_29dd7148 = __esm({
    ".svelte-kit/output/server/chunks/ExternalLink-29dd7148.js"() {
      init_index_2749e1b7();
      css7 = {
        code: "svg.svelte-1mgugza{width:0.5em;height:0.5em;margin-left:5px}path.svelte-1mgugza{stroke:currentColor}",
        map: null
      };
      ExternalLink = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        $$result.css.add(css7);
        return `<svg width="${"100%"}" height="${"100%"}" viewBox="${"0 0 107 107"}" version="${"1.1"}" style="${"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;"}" class="${"svelte-1mgugza"}"><g transform="${"matrix(0.392013,0,0,0.392013,-80.5623,-37.5192)"}"><path d="${"M305.124,108.464L218.264,108.464L218.264,355.115L464.915,355.115L464.915,268.254"}" style="${"fill:none;stroke-width:25.51px;"}" class="${"svelte-1mgugza"}"></path></g><g transform="${"matrix(0.296795,0,0,0.296795,0.308514,-63.7938)"}"><path d="${"M341.589,355.115L341.589,231.789L218.264,231.789"}" style="${"fill:none;stroke-width:33.69px;"}" class="${"svelte-1mgugza"}"></path></g><g transform="${"matrix(0.392013,0,0,0.392013,-80.5623,-37.5192)"}"><path d="${"M464.915,108.464L341.589,231.789"}" style="${"fill:none;stroke-width:25.51px;"}" class="${"svelte-1mgugza"}"></path></g></svg>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/PostList-093c74fc.js
  var css$13, PostPreview, css8, PostList;
  var init_PostList_093c74fc = __esm({
    ".svelte-kit/output/server/chunks/PostList-093c74fc.js"() {
      init_index_2749e1b7();
      init_TagList_0e1f394c();
      init_ExternalLink_29dd7148();
      css$13 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}li.svelte-61bt7k.svelte-61bt7k{margin:0 0 var(--halfNote)}@media(min-width: 1200px){li.svelte-61bt7k.svelte-61bt7k{margin:0}}.post-preview.svelte-61bt7k.svelte-61bt7k{transition:0.2s;transform-origin:bottom left;display:block}@media(min-width: 1200px){.post-preview.svelte-61bt7k.svelte-61bt7k{display:grid;grid-template-columns:1fr 1fr;grid-gap:var(--halfNote);margin-bottom:var(--wholeNote)}}.post-preview.svelte-61bt7k .article-info.svelte-61bt7k{padding:1.5rem 0;max-width:32rem}@media(min-width: 1200px){.post-preview.svelte-61bt7k .article-info.svelte-61bt7k{padding:0}}.post-preview.svelte-61bt7k h2.h3.svelte-61bt7k{margin:0;line-height:1.2;border:0;padding:0;font-size:1.5rem;font-weight:normal}.post-preview.svelte-61bt7k h2.h3.svelte-61bt7k::before{display:none}.post-preview.svelte-61bt7k .image-link.svelte-61bt7k{display:block;width:100%;line-height:1}.post-preview.svelte-61bt7k .image-link img.svelte-61bt7k{margin:0;width:auto;max-width:100%;border:1px solid hsla(var(--darkGrayHSL), 1)}.post-preview.svelte-61bt7k .subtitle.svelte-61bt7k,.post-preview.svelte-61bt7k .excerpt a.svelte-61bt7k{font-weight:bold;text-transform:uppercase;font-family:var(--headingFont);font-style:normal;font-size:0.65rem;margin:0.5rem 0 0}.post-preview.svelte-61bt7k .excerpt.svelte-61bt7k{font-style:italic;margin:var(--quarterNote) 0 1.5rem;font-size:0.8rem;line-height:1.5}.post-preview.svelte-61bt7k .excerpt.svelte-61bt7k:last-child{margin-bottom:0}.post-preview.svelte-61bt7k .excerpt a.svelte-61bt7k{display:block;margin-top:var(--quarterNote)}',
        map: null
      };
      PostPreview = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { external = false } = $$props;
        let { post } = $$props;
        let slugPath;
        let computedURL;
        if ($$props.external === void 0 && $$bindings.external && external !== void 0)
          $$bindings.external(external);
        if ($$props.post === void 0 && $$bindings.post && post !== void 0)
          $$bindings.post(post);
        $$result.css.add(css$13);
        slugPath = external ? "" : "/blog/";
        computedURL = slugPath + post.slug;
        return `<li class="${"svelte-61bt7k"}"><article class="${"post-preview svelte-61bt7k"}"><a${add_attribute("href", computedURL, 0)} sveltekit:prefetch class="${"image-link svelte-61bt7k"}"><img src="${"/images/post_images/" + escape(post.coverImage)}" style="${"aspect-ratio: " + escape(post.coverWidth) + " / " + escape(post.coverHeight) + "; width: " + escape(post.coverWidth) + "; height: " + escape(post.coverHeight)}" alt="${"Preview image for " + escape(post.title)}" loading="${"lazy"}" class="${"svelte-61bt7k"}"></a>

    <div class="${"article-info svelte-61bt7k"}"><h2 class="${"h3 svelte-61bt7k"}"><a${add_attribute("href", computedURL, 0)} sveltekit:prefetch class="${"svelte-61bt7k"}">${external ? `${escape(post.title)} ${validate_component(ExternalLink, "ExternalLink").$$render($$result, {}, {}, {})}` : `${escape(post.title)}`}</a></h2>
      
      ${post.subtitle ? `<p class="${"subtitle svelte-61bt7k"}">${escape(post.subtitle)}</p>` : ``}
      
      <p class="${"excerpt svelte-61bt7k"}">${escape(post.excerpt)}
        <a${add_attribute("href", computedURL, 0)} sveltekit:prefetch class="${"svelte-61bt7k"}">${external ? `Read more on ${escape(post.subtitle)}
            ${validate_component(ExternalLink, "ExternalLink").$$render($$result, {}, {}, {})}` : `Read\xA0more\u2026`}</a></p>
      
      ${post.categories ? `${validate_component(TagList, "TagList").$$render($$result, {}, {}, {
          default: () => {
            return `${each(post.categories, (category) => {
              return `${validate_component(Tag, "Tag").$$render($$result, { to: "/blog/category/" + category + "/" }, {}, {
                default: () => {
                  return `${escape(category)}
          `;
                }
              })}`;
            })}`;
          }
        })}` : ``}</div></article>
</li>`;
      });
      css8 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.post-list.svelte-nkhb48{padding:0;list-style-type:none;margin:0 0 var(--wholeNote);max-width:var(--maxWidth)}@media(min-width: 1200px){.post-list.svelte-nkhb48{max-width:60rem}}',
        map: null
      };
      PostList = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { posts } = $$props;
        let { external = false } = $$props;
        if ($$props.posts === void 0 && $$bindings.posts && posts !== void 0)
          $$bindings.posts(posts);
        if ($$props.external === void 0 && $$bindings.external && external !== void 0)
          $$bindings.external(external);
        $$result.css.add(css8);
        return `<ul class="${"no-bullets post-list svelte-nkhb48"}">${each(posts, (post) => {
          return `${validate_component(PostPreview, "PostPreview").$$render($$result, { post, external }, {}, {})}`;
        })}
</ul>`;
      });
    }
  });

  // .svelte-kit/output/server/entries/pages/writing-and-speaking.svelte.js
  var writing_and_speaking_svelte_exports = {};
  __export(writing_and_speaking_svelte_exports, {
    default: () => Writing_and_speaking
  });
  var EXTERNAL_POSTS, talks, css9, Writing_and_speaking;
  var init_writing_and_speaking_svelte = __esm({
    ".svelte-kit/output/server/entries/pages/writing-and-speaking.svelte.js"() {
      init_index_2749e1b7();
      init_PostList_093c74fc();
      init_Main_5d179e14();
      init_TagList_0e1f394c();
      init_ExternalLink_29dd7148();
      EXTERNAL_POSTS = [
        {
          title: `Create better CSS forms with these design principles`,
          subtitle: `LogRocket Blog`,
          slug: `https://blog.logrocket.com/create-better-css-forms-design-principles/`,
          coverImage: `build-better-css-forms-design-principles.png`,
          coverWidth: 730,
          coverHeight: 487,
          date: `2022-02-23`,
          excerpt: `Many developers, even among the most seasoned senior engineers, balk at the idea of laying out and styling pages on their own. I don\u2019t believe developers need to be designers. But I believe developers can learn to build functional, quality layouts with knowledge of design principles. And, just as a little primer, when I say \u201Cdesign,\u201D I mean both visual and structural.`
        },
        {
          title: `A Complete Beginner's guide to NPM`,
          subtitle: `CSS Tricks`,
          slug: `https://css-tricks.com/a-complete-beginners-guide-to-npm/`,
          coverImage: `npm.webp`,
          coverWidth: 2,
          coverHeight: 1,
          date: `2022-01-20`,
          excerpt: `Whatever npm was\u2014whatever those commands did and wherever you were supposed to type them\u2014nobody had ever taken the time to explain it to me. And the more I read guides written by people who took that knowledge for granted, the more I felt isolated.`
        },
        {
          title: `Building a PWA with Vue.js`,
          subtitle: `LogRocket Blog`,
          slug: `https://blog.logrocket.com/building-pwa-vue/`,
          coverImage: `building-pwa-vue-js.webp`,
          coverWidth: 730,
          coverHeight: 487,
          date: `2021-12-30`,
          excerpt: `When it comes to PWAs, there\u2019s nothing special about Vue specifically, or even frameworks in general. To put it simply: if it loads in a browser, it can be a progressive web app. That groundwork laid, let\u2019s talk specifically about how to build a PWA with Vue, one of my personal favorite tools for web development.`
        },
        {
          title: `Using SVG and Vue.js: A complete guide`,
          subtitle: `LogRocket Blog`,
          slug: `https://blog.logrocket.com/using-svg-and-vue-js-a-complete-guide/`,
          coverImage: `ultimate-guide-SVGs-vue-js.webp`,
          coverWidth: 730,
          coverHeight: 487,
          date: `2021-09-07`,
          excerpt: `From the simple question of how best to load SVG files into your templates, to handling animations and accessibility, there are plenty of pitfalls to avoid. I\u2019ve been working with Vue and SVG for the last few years, and I\u2019ve developed (pun intended) a few tricks and recommendations I\u2019d like to share.`
        },
        {
          title: `What I Learned Building a Word Game App With Nuxt on Google Play`,
          subtitle: `CSS Tricks`,
          slug: `https://css-tricks.com/what-i-learned-building-a-word-game-app-with-nuxt-on-google-play/`,
          coverImage: `quina-post-hero.jpg`,
          coverWidth: 120,
          coverHeight: 63,
          date: `2021-05-21`,
          excerpt: `I fell in love with coding the moment I created my first CSS :hover effect. Years later, that initial bite into interactivity on the web led me to a new goal: making a game.`
        },
        {
          title: `Leveling up Flywheel's retreat website: A developer's tale`,
          subtitle: `The Layout`,
          slug: `https://getflywheel.com/layout/leveling-up-flywheels-retreat-website/`,
          coverImage: `FlyFest_site_Flywheel-1800x620.jpeg`,
          coverWidth: 90,
          coverHeight: 31,
          date: `2019-11-13`,
          excerpt: `A post about Flywheel's internal retreat website; how and why it was created, the tech behind it, and all the fun we had making it. (Note: misattributed to Morgan Smith.)`
        },
        {
          title: `Understanding WordPress Shortcodes`,
          subtitle: `The Layout`,
          slug: `https://getflywheel.com/layout/understanding-wordpress-shortcodes/`,
          coverImage: `Dark_Grey_Shortcode-icon.jpeg`,
          coverWidth: 84,
          coverHeight: 51,
          date: `2019-11-13`,
          excerpt: `The first of a planned series on WordPress shortcodes that never quite got finished (and probably isn't very useful in a post-Gutenberg world anyway), but offers a nice intro to the concept, at least. (Note: misattributed to Morgan Smith.)`
        }
      ];
      talks = [
        {
          title: "Be Classless \u2013 Optimizing Your CSS for WordPress",
          link: "https://wordpress.tv/2015/11/17/rickyjanuari-be-classless-optimizing-your-css/",
          event: "WordCamp Omaha 2015",
          year: 2015
        },
        {
          title: "Easy WordPress Security for Everyone",
          link: "https://wordpress.tv/2017/03/05/rickyjanuari-easy-wordpress-security-for-everyone/",
          event: "WordCamp Omaha 2016",
          year: 2016
        },
        {
          title: "A RESTed Development: Understanding the WP REST API Once and For All",
          link: "",
          event: "WordCamp Omaha 2017",
          year: 2017
        },
        {
          title: "CSS Variables (lightning talk)",
          link: "https://techomaha.com/2018/11/rickyjanuari-css-variables/",
          event: "BarCamp Omaha 2018",
          year: 2018
        },
        {
          title: "Getting the Most Out of Local by Flywheel",
          link: "",
          event: "WordCamp Omaha 2018",
          year: 2018
        },
        {
          title: "How Not to Make a Crappy-Looking Site: a Crash Course on (Web) Design",
          link: "",
          event: "WordCamp Omaha 2019",
          year: 2019
        },
        {
          title: "What is Managed WordPress Hosting?",
          link: "https://www.youtube.com/watch?v=eBS6UBcDI9k",
          event: "Video voiceover",
          year: 2019
        },
        {
          title: "Intro to Accessibility",
          link: "",
          event: "aware3 internal training",
          year: 2021
        },
        {
          title: "Views on Svelte With Ricky Januari",
          link: "https://viewsonvue.com/views-on-svelte-with-rickyjanuari-vue-177",
          event: "Views on Vue podcast",
          year: 2022
        }
      ];
      talks.sort((a, b) => b.year - a.year);
      css9 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.writing.svelte-178pgh1 h2.svelte-178pgh1{margin-bottom:var(--quarterNote)}.writing.svelte-178pgh1 hr.svelte-178pgh1{margin:var(--quarterNote) 0 var(--dottedHalfNote)}.writing.svelte-178pgh1 .subhead.svelte-178pgh1{font-size:1.1rem;font-style:italic;margin:0}',
        map: null
      };
      Writing_and_speaking = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        $$result.css.add(css9);
        return `${validate_component(Main, "Main").$$render($$result, {}, {}, {
          default: () => {
            return `<div class="${"compressed-content wider writing svelte-178pgh1"}"><h2 class="${"svelte-178pgh1"}">Writing</h2>
    <p class="${"subhead svelte-178pgh1"}">Articles written for other publications.</p>
    <hr class="${"svelte-178pgh1"}">
    ${validate_component(PostList, "PostList").$$render($$result, { posts: EXTERNAL_POSTS, external: true }, {}, {})}
    
    <h2 class="${"svelte-178pgh1"}">Speaking, etc.</h2>
    <p class="${"subhead svelte-178pgh1"}">To do: add slide decks where possible.</p>
    <hr class="${"svelte-178pgh1"}">
    <ul>${each(talks, (talk) => {
              return `<li><b>${talk.link ? `<a${add_attribute("href", talk.link, 0)} rel="${"external"}">${escape(talk.title)}
          </a>` : `${escape(talk.title)}`}</b>
        <br>
        <i>${escape(talk.event)}</i>
      </li>`;
            })}</ul></div>`;
          }
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/3.js
  var __exports4 = {};
  __export(__exports4, {
    css: () => css10,
    entry: () => entry4,
    js: () => js4,
    module: () => writing_and_speaking_svelte_exports
  });
  var entry4, js4, css10;
  var init__4 = __esm({
    ".svelte-kit/output/server/nodes/3.js"() {
      init_writing_and_speaking_svelte();
      entry4 = "pages/writing-and-speaking.svelte-81acd422.js";
      js4 = ["pages/writing-and-speaking.svelte-81acd422.js", "chunks/vendor-b62d7b9b.js", "chunks/PostList-5ba61222.js", "chunks/TagList-bde82414.js", "chunks/ExternalLink-10e1f92c.js", "chunks/Main-f748586d.js"];
      css10 = ["assets/pages/writing-and-speaking.svelte-84ba3410.css", "assets/PostList-7831d634.css", "assets/TagList-413d58d5.css", "assets/ExternalLink-0287f125.css"];
    }
  });

  // .svelte-kit/output/server/chunks/Sidebar-bb578ce6.js
  var css11, Sidebar;
  var init_Sidebar_bb578ce6 = __esm({
    ".svelte-kit/output/server/chunks/Sidebar-bb578ce6.js"() {
      init_index_2749e1b7();
      init_TagList_0e1f394c();
      css11 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.sidebar.svelte-1ozvtc2.svelte-1ozvtc2{font-size:0.85rem;max-width:var(--maxWidth);font-family:var(--headingFont);margin:var(--dottedHalfNote) 0 0}@media(min-width: 1440px){.sidebar.svelte-1ozvtc2.svelte-1ozvtc2{margin:0}}.sidebar.svelte-1ozvtc2 h2{font-size:0.8em;font-weight:bold;text-transform:uppercase;margin:3em 0 1em;padding:0 0 0.1em 0;border:none;border-bottom:0.15em solid;width:-webkit-max-content;width:-moz-max-content;width:max-content;text-align:inherit;color:var(--headingColor)}.sidebar.svelte-1ozvtc2 h2::before{display:none}.sidebar.svelte-1ozvtc2 h2.svelte-1ozvtc2:first-child{margin-top:0}.sidebar.svelte-1ozvtc2 ul.svelte-1ozvtc2{margin:0;list-style-type:none;padding:0;line-height:1.2}.sidebar.svelte-1ozvtc2 ul.tag-list li.svelte-1ozvtc2{margin:0;font-size:inherit}.sidebar.svelte-1ozvtc2 ul.sidebar__posts-list li.svelte-1ozvtc2{font-size:inherit}.sidebar.svelte-1ozvtc2 ul.sidebar__posts-list li a.svelte-1ozvtc2{font-size:inerit;color:inherit;text-decoration:none;position:relative;display:inline-block}.sidebar.svelte-1ozvtc2 ul.sidebar__posts-list li a:hover span.svelte-1ozvtc2,.sidebar.svelte-1ozvtc2 ul.sidebar__posts-list li a:focus span.svelte-1ozvtc2{position:relative;outline:none}.sidebar.svelte-1ozvtc2 ul.sidebar__posts-list li a:hover span.svelte-1ozvtc2:before,.sidebar.svelte-1ozvtc2 ul.sidebar__posts-list li a:focus span.svelte-1ozvtc2:before{position:absolute;content:"[";left:-0.35em}.sidebar.svelte-1ozvtc2 ul.sidebar__posts-list li a.svelte-1ozvtc2:hover,.sidebar.svelte-1ozvtc2 ul.sidebar__posts-list li a.svelte-1ozvtc2:focus{outline:none}.sidebar.svelte-1ozvtc2 ul.sidebar__posts-list li a.svelte-1ozvtc2:hover:after,.sidebar.svelte-1ozvtc2 ul.sidebar__posts-list li a.svelte-1ozvtc2:focus:after{position:absolute;content:"]"}',
        map: null
      };
      Sidebar = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { recentPosts } = $$props;
        let { allCategories } = $$props;
        if ($$props.recentPosts === void 0 && $$bindings.recentPosts && recentPosts !== void 0)
          $$bindings.recentPosts(recentPosts);
        if ($$props.allCategories === void 0 && $$bindings.allCategories && allCategories !== void 0)
          $$bindings.allCategories(allCategories);
        $$result.css.add(css11);
        return `<aside class="${"sidebar svelte-1ozvtc2"}">

  <h2 class="${"svelte-1ozvtc2"}">Recent blog posts</h2>

  <ul class="${"sidebar__posts-list svelte-1ozvtc2"}">${each(recentPosts, (post) => {
          return `<li class="${"svelte-1ozvtc2"}"><a href="${"/blog/" + escape(post.slug)}" sveltekit:prefetch class="${"svelte-1ozvtc2"}"><span class="${"svelte-1ozvtc2"}">${escape(post.title)}</span></a>
      </li>`;
        })}</ul>

  <h2 class="${"svelte-1ozvtc2"}">Categories</h2>

  ${validate_component(TagList, "TagList").$$render($$result, {}, {}, {
          default: () => {
            return `${each(allCategories, (category) => {
              return `${validate_component(Tag, "Tag").$$render($$result, { to: "/blog/category/" + category }, {}, {
                default: () => {
                  return `${escape(category)}
      `;
                }
              })}`;
            })}`;
          }
        })}
  
  <h2 class="${"svelte-1ozvtc2"}">More links</h2>

  <ul class="${"svelte-1ozvtc2"}"><li class="${"svelte-1ozvtc2"}"><a href="${"/blog"}" class="${"svelte-1ozvtc2"}">All blog posts</a></li>
    <li class="${"svelte-1ozvtc2"}"><a href="${"/writing-and-speaking"}" class="${"svelte-1ozvtc2"}">Other writing &amp; speaking</a></li>
    <li class="${"svelte-1ozvtc2"}"><a href="${"/"}" class="${"svelte-1ozvtc2"}">Home</a></li></ul>
</aside>`;
      });
    }
  });

  // .svelte-kit/output/server/entries/pages/products/__layout.svelte.js
  var layout_svelte_exports2 = {};
  __export(layout_svelte_exports2, {
    default: () => _layout2,
    load: () => load3
  });
  var css12, load3, _layout2;
  var init_layout_svelte2 = __esm({
    ".svelte-kit/output/server/entries/pages/products/__layout.svelte.js"() {
      init_index_2749e1b7();
      init_Sidebar_bb578ce6();
      init_TagList_0e1f394c();
      css12 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.layout-grid.svelte-33z7dr{display:grid;grid-template-columns:100%}@media(min-width: 1440px){.layout-grid.svelte-33z7dr{grid-gap:0 var(--halfNote);grid-template-columns:var(--sidebarWidth) 1fr var(--sidebarWidth)}}.sidebar-wrapper.svelte-33z7dr{display:none}@media(min-width: 1440px){.sidebar-wrapper.svelte-33z7dr{display:block;align-self:start;position:-webkit-sticky;position:sticky;top:var(--halfNote)}}',
        map: null
      };
      load3 = async ({ fetch: fetch2 }) => {
        await fetch2("/api/rss.xml");
        const res = await fetch2("/api/posts.json");
        const resJSON = await res.json();
        const recentPosts = resJSON.posts.map((post) => ({ slug: post.slug, title: post.title })).slice(0, 5);
        const allCategories = Array.from(new Set(resJSON.posts.flatMap((p) => p.categories)));
        return { props: { recentPosts, allCategories } };
      };
      _layout2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { recentPosts } = $$props;
        let { allCategories } = $$props;
        if ($$props.recentPosts === void 0 && $$bindings.recentPosts && recentPosts !== void 0)
          $$bindings.recentPosts(recentPosts);
        if ($$props.allCategories === void 0 && $$bindings.allCategories && allCategories !== void 0)
          $$bindings.allCategories(allCategories);
        $$result.css.add(css12);
        return `<div class="${"layout-grid svelte-33z7dr"}"><div class="${"sidebar-wrapper svelte-33z7dr"}">${validate_component(Sidebar, "Sidebar").$$render($$result, { recentPosts, allCategories }, {}, {})}</div>
  
  ${slots.default ? slots.default({}) : ``}
</div>`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/4.js
  var __exports5 = {};
  __export(__exports5, {
    css: () => css13,
    entry: () => entry5,
    js: () => js5,
    module: () => layout_svelte_exports2
  });
  var entry5, js5, css13;
  var init__5 = __esm({
    ".svelte-kit/output/server/nodes/4.js"() {
      init_layout_svelte2();
      entry5 = "pages/products/__layout.svelte-cccdbdfd.js";
      js5 = ["pages/products/__layout.svelte-cccdbdfd.js", "chunks/vendor-b62d7b9b.js", "chunks/Sidebar-8b7ed7f7.js", "chunks/TagList-bde82414.js", "chunks/navigation-53ece758.js", "chunks/singletons-d1fb5791.js"];
      css13 = ["assets/pages/blog/__layout.svelte-dc7a1eec.css", "assets/Sidebar-81bd121c.css", "assets/TagList-413d58d5.css"];
    }
  });

  // .svelte-kit/output/server/entries/pages/products/index.svelte.js
  var index_svelte_exports2 = {};
  __export(index_svelte_exports2, {
    default: () => Products,
    load: () => load4
  });
  var load4, Products;
  var init_index_svelte2 = __esm({
    ".svelte-kit/output/server/entries/pages/products/index.svelte.js"() {
      init_index_2749e1b7();
      load4 = async ({ fetch: fetch2 }) => {
        const res = await fetch2("/api/products/products.json");
        const products = await res.json();
        return { props: { products } };
      };
      Products = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { products } = $$props;
        if ($$props.products === void 0 && $$bindings.products && products !== void 0)
          $$bindings.products(products);
        return `${each(products, (product) => {
          return `<h2><!-- HTML_TAG_START -->${product.title.rendered}<!-- HTML_TAG_END --></h2>
    ${product.content.rendered ? `<p><!-- HTML_TAG_START -->${product.content.rendered}<!-- HTML_TAG_END --></p>` : ``}
    <a${add_attribute("href", `/products/${product.slug}`, 0)}>Readmore</a>`;
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/5.js
  var __exports6 = {};
  __export(__exports6, {
    css: () => css14,
    entry: () => entry6,
    js: () => js6,
    module: () => index_svelte_exports2
  });
  var entry6, js6, css14;
  var init__6 = __esm({
    ".svelte-kit/output/server/nodes/5.js"() {
      init_index_svelte2();
      entry6 = "pages/products/index.svelte-53d21f9d.js";
      js6 = ["pages/products/index.svelte-53d21f9d.js", "chunks/vendor-b62d7b9b.js"];
      css14 = [];
    }
  });

  // .svelte-kit/output/server/entries/pages/products/_slug_.svelte.js
  var slug_svelte_exports = {};
  __export(slug_svelte_exports, {
    default: () => U5Bslugu5D,
    load: () => load5
  });
  var load5, U5Bslugu5D;
  var init_slug_svelte = __esm({
    ".svelte-kit/output/server/entries/pages/products/_slug_.svelte.js"() {
      init_index_2749e1b7();
      load5 = async ({ params, fetch: fetch2 }) => {
        const slug = params.slug;
        const res = await fetch2(`/api/products/${slug}.json`);
        const product = await res.json();
        return { props: { product } };
      };
      U5Bslugu5D = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { product } = $$props;
        if ($$props.product === void 0 && $$bindings.product && product !== void 0)
          $$bindings.product(product);
        return `<h1><!-- HTML_TAG_START -->${product.title.rendered}<!-- HTML_TAG_END --></h1>
${product.image ? `<img${add_attribute("src", product.image, 0)} alt="${""}">` : ``}
<p><!-- HTML_TAG_START -->${product.content.rendered}<!-- HTML_TAG_END --></p>`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/6.js
  var __exports7 = {};
  __export(__exports7, {
    css: () => css15,
    entry: () => entry7,
    js: () => js7,
    module: () => slug_svelte_exports
  });
  var entry7, js7, css15;
  var init__7 = __esm({
    ".svelte-kit/output/server/nodes/6.js"() {
      init_slug_svelte();
      entry7 = "pages/products/_slug_.svelte-3a58b0a7.js";
      js7 = ["pages/products/_slug_.svelte-3a58b0a7.js", "chunks/vendor-b62d7b9b.js"];
      css15 = [];
    }
  });

  // .svelte-kit/output/server/entries/pages/projects.svelte.js
  var projects_svelte_exports = {};
  __export(projects_svelte_exports, {
    default: () => Projects
  });
  var CodePenLink, css16, Projects;
  var init_projects_svelte = __esm({
    ".svelte-kit/output/server/entries/pages/projects.svelte.js"() {
      init_index_2749e1b7();
      init_Main_5d179e14();
      CodePenLink = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { hash: hash2 } = $$props;
        if ($$props.hash === void 0 && $$bindings.hash && hash2 !== void 0)
          $$bindings.hash(hash2);
        return `<a href="${"https://codepen.io/collinsworth/pen/" + escape(hash2)}" rel="${"external"}">${slots.default ? slots.default({}) : ``}</a>`;
      });
      css16 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.projects.svelte-phc9ii p.svelte-phc9ii.svelte-phc9ii{max-width:var(--maxWidth)}.projects.svelte-phc9ii article.svelte-phc9ii.svelte-phc9ii{display:grid;grid-template-columns:1fr;gap:var(--halfNote);align-items:start}@media(min-width: 1024px){.projects.svelte-phc9ii article.svelte-phc9ii.svelte-phc9ii{grid-template-columns:2fr 3fr}.projects.svelte-phc9ii article .sticky.svelte-phc9ii.svelte-phc9ii{position:-webkit-sticky;position:sticky;top:var(--halfNote)}}@media(min-width: 1440px){.projects.svelte-phc9ii article.svelte-phc9ii.svelte-phc9ii{grid-template-columns:2fr 3fr}}.projects.svelte-phc9ii article.svelte-phc9ii+article.svelte-phc9ii{margin-top:6rem}.projects.svelte-phc9ii .image-gallery img.svelte-phc9ii.svelte-phc9ii{margin:0 auto var(--halfNote);display:block;max-width:unset;width:calc(100% + var(--margin) * 2);margin-left:calc(var(--margin) * -1)}@media(min-width: 1024px){.projects.svelte-phc9ii .image-gallery img.svelte-phc9ii.svelte-phc9ii{max-width:calc(100% + var(--margin));width:auto;margin-left:0}}',
        map: null
      };
      Projects = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        $$result.css.add(css16);
        return `${$$result.head += `${$$result.title = `<title>Ricky Januari | Projects</title>`, ""}<meta data-key="${"description"}" name="${"description"}" content="${"A sampling of apps and code projects."}" data-svelte="svelte-x0cj59"><meta property="${"og:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-x0cj59"><meta name="${"twitter:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-x0cj59">`, ""}


${validate_component(Main, "Main").$$render($$result, {}, {}, {
          default: () => {
            return `<div class="${"projects compressed-content double-wide svelte-phc9ii"}"><article class="${"svelte-phc9ii"}"><div class="${"sticky svelte-phc9ii"}"><h2>Featured project: Quina</h2>
        
        <p class="${"svelte-phc9ii"}">Quina is a strategic, logical word game available on 
          <a href="${"https://play.google.com/store/apps/details?id=app.quina.collinsworth&hl=en_US\u2277=US"}" rel="${"external"}">Google Play</a>
          and as a <a href="${"https://quina.app"}" rel="${"external"}">Progressive Web App</a>. 
          I wrote about the process of building the app and the tech behind it both 
          <a href="${"/blog/announcing-quina-my-first-app"}">on this blog</a> and 
          <a rel="${"external"}" href="${"https://css-tricks.com/what-i-learned-building-a-word-game-app-with-nuxt-on-google-play/"}">CSS Tricks</a>.
        </p></div>
      
      <div class="${"image-gallery"}"><img src="${"/images/post_images/01-Google-Pixel-4-Front.jpg"}" alt="${"The main menu of Quina, with options for 'New Game', 'How to Play', 'Preferences,' Stats & Awards', 'About/FAQ', and 'Support Quina.'"}" loading="${"lazy"}" width="${"1030"}" height="${"1200"}" style="${"aspect-ratio: 103 / 120"}" class="${"svelte-phc9ii"}">
        <img src="${"/images/quina-mockup1.png"}" alt="${""}" loading="${"lazy"}" width="${"1200"}" height="${"1697"}" style="${"aspect-ratio: 1200 / 1697"}" class="${"svelte-phc9ii"}">
        <img src="${"/images/post_images/tutorial-1.png"}" alt="${"Guess the secred five-letter code word in ten guesses or fewer."}" loading="${"lazy"}" width="${"1600"}" height="${"900"}" style="${"aspect-ratio: 16 / 9"}" class="${"svelte-phc9ii"}">
        <img src="${"/images/quina-clues.png"}" alt="${"Use clues to refine your guesses. A clue of '3/2' means three letters in your guess are also in the code word, and two are in the same position in both words."}" loading="${"lazy"}" width="${"1600"}" height="${"900"}" style="${"aspect-ratio: 16 / 9"}" class="${"svelte-phc9ii"}">
        <img src="${"/images/post_images/tutorial-3.png"}" alt="${"You can tap or long-press letters in your guesses to cross them out or highlight them"}" loading="${"lazy"}" width="${"1600"}" height="${"900"}" style="${"aspect-ratio: 16 / 9"}" class="${"svelte-phc9ii"}">
        <img src="${"/images/post_images/tutorial-4.png"}" alt="${"Quina tracks your stats, such as how many games you've played on each difficulty, longest win streak, and many more!"}" loading="${"lazy"}" width="${"1600"}" height="${"900"}" style="${"aspect-ratio: 16 / 9"}" class="${"svelte-phc9ii"}">
        <img src="${"/images/post_images/02-Google-Pixel-4-Front.png"}" alt="${"Quina features both light and dark mode."}" loading="${"lazy"}" width="${"1600"}" height="${"1442"}" class="${"svelte-phc9ii"}"></div></article>

    <article class="${"svelte-phc9ii"}"><div class="${"sticky svelte-phc9ii"}"><h2>SvelteKit static blog starter</h2>
        
        <p class="${"svelte-phc9ii"}">A fully open-source, pre-configured starter for a SvelteKit blog. Includes Markdown and Sass preprocessing; has mdsvex with rehype plugins pre-installed; and includes automatic prefetching of top-level routes, an RSS feed, and a JSON API.</p>
        <ul><li><a href="${"https://sveltekit-static-starter.netlify.app"}">Live demo</a></li>
          <li><a href="${"https://github.com/rickyjanuari/sveltekit-blog-starter"}">GitHub repo</a></li></ul></div>
      
      <div class="${"image-gallery"}"><figure><iframe src="${"https://sveltekit-static-starter.netlify.app"}" frameborder="${"0"}" title="${"Live demo of the starter, from sveltekit-static-starter.netlify.app"}" width="${"100%"}" height="${"800"}"></iframe>
          <figcaption><a href="${"https://sveltekit-static-starter.netlify.app"}">sveltekit-static-starter.netlify.app</a></figcaption></figure></div></article>
      
    <article class="${"svelte-phc9ii"}"><div class="${"sticky svelte-phc9ii"}"><h2>CodePen Projects</h2>
        <p class="${"svelte-phc9ii"}">A sampling of some games and experiments I&#39;ve built on <a href="${"https://codepen.io/collinsworth"}" rel="${"external"}">CodePen</a>, mostly in Vue, but some in React or vanilla JS as well.</p></div>
      <ul class="${"codepens"}"><li>A ${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "XwPXrM" }, {}, {
              default: () => {
                return `Sliding Puzzle in Vue`;
              }
            })} (with an ${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "MMagLb" }, {}, {
              default: () => {
                return `alternate version`;
              }
            })} that converts images to sliding puzzles)
        </li>
        <li>A fun ${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "OYgGNK" }, {}, {
              default: () => {
                return `Emoji Slider`;
              }
            })} made with Vue
        </li>
        <li>An ${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "MLjVrQ" }, {}, {
              default: () => {
                return `interactive Vue tutorial`;
              }
            })} blog post
        </li>
        <li>The game of ${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "oNbavJN" }, {}, {
              default: () => {
                return `Hangman`;
              }
            })} in Vue, using a quotes API
        </li>
        <li>An ${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "bKXoRN" }, {}, {
              default: () => {
                return `Interactive CSS Filter React Component`;
              }
            })}</li>
        <li>The classic ${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "Pymdxo" }, {}, {
              default: () => {
                return `Color Flood Game`;
              }
            })} build with React
        </li>
        <li>The game of ${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "MWwXpLd" }, {}, {
              default: () => {
                return `Connect Four`;
              }
            })} in Vue
        </li>
        <li>A silly &quot;${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "vYOPKqx" }, {}, {
              default: () => {
                return `Pick Two`;
              }
            })} of three&quot; checklist
        </li>
        <li>Some pure CSS illustrations, like this ${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "vdGYpo" }, {}, {
              default: () => {
                return `Raccoon Mario sprite`;
              }
            })} and this ${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "LVMRwQ" }, {}, {
              default: () => {
                return `Pure CSS Game Boy Advance SP`;
              }
            })}</li>
        <li>A silly ${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "ExjZexY" }, {}, {
              default: () => {
                return `game of cat and mouse`;
              }
            })}</li>
        <li>A small but handy ${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "bGdmmrY" }, {}, {
              default: () => {
                return `liquid measurement converter`;
              }
            })} app
        </li>
        <li>A ${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "WNrpGJX" }, {}, {
              default: () => {
                return `dramatic d20 roller`;
              }
            })}</li>
        <li>${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "ZEGrMRQ" }, {}, {
              default: () => {
                return `Generative typographic art grid`;
              }
            })} in Vue
        </li>
        <li>A ${validate_component(CodePenLink, "CodePenLink").$$render($$result, { hash: "mdJmBQz" }, {}, {
              default: () => {
                return `Hex/RGB(a)`;
              }
            })} color converter in Vue
        </li></ul></article>


    <article class="${"svelte-phc9ii"}"><div class="${"sticky svelte-phc9ii"}"><h2>Other projects and\xA0apps</h2>
        <p class="${"svelte-phc9ii"}">You can also find my work on <a href="${"https://github.com/rickyjanuari"}">GitHub</a> (although truth be told I don&#39;t really bother curating it there at all.)</p></div>
      <ul><li>Website for <a href="${"https://rise.getflywheel.com"}" rel="${"external"}">Rise</a>, Flywheel/WP Engine&#39;s BIPOC employee resource group
        </li>
        <li><a href="${"https://passthepigs.vercel.app/"}" rel="${"external"}">Pass the Pigs scorekeeper app</a> built in React
        </li>
        <li>A handy <a href="${"https://vlmc.netlify.app/"}" rel="${"external"}">liquid measurement converter</a> progressive web app, built with Vue
        </li>
        <li>A Svelte <a href="${"https://dadjokefinder.netlify.app/"}" rel="${"external"}">Dad Joke randomizer and searcher app</a></li>
        <li><a href="${"https://smitty.netlify.app"}" rel="${"external"}">&quot;Smitty&quot;</a>, the Super Metroid Item Tracker app built in Svelte
        </li>
        <li><a href="${"https://wpmultisitedomainreplace.com"}" rel="${"external"}">WPMultisiteDomainReplace.com</a>, a Nuxt app to update your WordPress multisite&#39;s database when switching main domains
        </li>
        <li><a href="${"https://qvicklist.vercel.app/"}" rel="${"external"}">Qvick List</a>, an on-demand Vue to-do list app that saves to local storage. (Needs some updating.)
        </li>
        <li>Flywheel retreat websites for <a href="${"https://fest2019.getflywheel.com/"}" rel="${"external"}">2019</a> and <a href="${"https://fest.getflywheel.com/"}" rel="${"external"}">2020</a>.
        </li>
        <li>A <a href="${"https://github.com/rickyjanuari/flywheel-cloud-wp-load-fix"}">WordPress plugin</a> to help make various other plugins and theme compatible with <a href="${"https://getflywheel.com/cloud-platform/"}">Flywheel&#39;s cloud platform</a></li>
        <li>A Chrome extension, an internal knowledge base, various WordPress themes, a couple of Node CLI tools, and a handful of trainings and presentations (none of which I can show here because employer privacy and such)
        </li></ul></article></div>`;
          }
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/7.js
  var __exports8 = {};
  __export(__exports8, {
    css: () => css17,
    entry: () => entry8,
    js: () => js8,
    module: () => projects_svelte_exports
  });
  var entry8, js8, css17;
  var init__8 = __esm({
    ".svelte-kit/output/server/nodes/7.js"() {
      init_projects_svelte();
      entry8 = "pages/projects.svelte-332c560e.js";
      js8 = ["pages/projects.svelte-332c560e.js", "chunks/vendor-b62d7b9b.js", "chunks/Main-f748586d.js"];
      css17 = ["assets/pages/projects.svelte-5708ff4a.css"];
    }
  });

  // .svelte-kit/output/server/entries/pages/contact.svelte.js
  var contact_svelte_exports = {};
  __export(contact_svelte_exports, {
    default: () => Contact
  });
  var css18, Contact;
  var init_contact_svelte = __esm({
    ".svelte-kit/output/server/entries/pages/contact.svelte.js"() {
      init_index_2749e1b7();
      init_Main_5d179e14();
      css18 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}h2.svelte-e108qu.svelte-e108qu{margin-bottom:var(--eighthNote)}#contact-form.svelte-e108qu.svelte-e108qu{width:100%;margin-top:4rem}#contact-form.svelte-e108qu label.svelte-e108qu{font-family:var(--headingFont);font-weight:bold}#contact-form.svelte-e108qu .error.svelte-e108qu{background-color:var(--red);color:var(--white);padding:calc(var(--quarterNote) * 0.5) var(--quarterNote);margin:var(--quarterNote) 0;font-style:italic}',
        map: null
      };
      Contact = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let formData = {
          from_page: "",
          name: "",
          email: "",
          message: ""
        };
        $$result.css.add(css18);
        return `${$$result.head += `${$$result.title = `<title>Ricky Januari | Contact</title>`, ""}<meta data-key="${"description"}" name="${"description"}" content="${"If you fill out this form, I'll probably send you an email. What a bargain!"}" data-svelte="svelte-1p1z7eq"><meta property="${"og:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-1p1z7eq"><meta name="${"twitter:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-1p1z7eq">`, ""}


${validate_component(Main, "Main").$$render($$result, {}, {}, {
          default: () => {
            return `<div class="${"compressed-content"}"><h2 class="${"svelte-e108qu"}">Get in touch</h2>

		${`<noscript><h3>Sorry, this contact form won&#39;t work without JavaScript enabled.</h3>
				<p>I don&#39;t do any tracking or anything like that though (except some <a href="${"https://plausible.io"}">privacy-respecting analytics</a>), if that&#39;s your concern.</p></noscript>

			<p><i>Happy to chat! I try to respond to everything that isn&#39;t spam.
				</i></p>

			<form id="${"contact-form"}" name="${"contact"}" method="${"post"}" action="${"/success/"}" data-netlify="${"true"}" data-netlify-honeypot="${"bot-field"}" class="${"svelte-e108qu"}"><input type="${"hidden"}" name="${"form-name"}" value="${"contact"}">
				<p hidden><label class="${"svelte-e108qu"}">Don\u2019t fill this out: <input name="${"bot-field"}"></label></p>
				<input type="${"hidden"}" name="${"from_page"}"${add_attribute("value", formData.from_page, 0)}>
				<div class="${"sender-info"}"><div><label for="${"name"}" class="${"label svelte-e108qu"}">Your name</label>
						<input type="${"text"}" name="${"name"}" placeholder="${"What should I call you?"}"${add_attribute("value", formData.name, 0)}></div>
					<div><label for="${"email"}" class="${"svelte-e108qu"}">Your email address
						</label>
						<input type="${"email"}" name="${"email"}" placeholder="${"Where can I send my response?"}"${add_attribute("value", formData.email, 0)}></div></div>

				<div class="${"message-wrapper"}"><label for="${"message"}" class="${"svelte-e108qu"}">What&#39;s on your mind?</label>
					<textarea name="${"message"}" rows="${"6"}" placeholder="${"What would you like to talk about?"}">${""}</textarea></div>

				${``}

				<button type="${"submit"}">Send
				</button></form>`}</div>`;
          }
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/8.js
  var __exports9 = {};
  __export(__exports9, {
    css: () => css19,
    entry: () => entry9,
    js: () => js9,
    module: () => contact_svelte_exports
  });
  var entry9, js9, css19;
  var init__9 = __esm({
    ".svelte-kit/output/server/nodes/8.js"() {
      init_contact_svelte();
      entry9 = "pages/contact.svelte-0e82ece1.js";
      js9 = ["pages/contact.svelte-0e82ece1.js", "chunks/vendor-b62d7b9b.js", "chunks/Main-f748586d.js"];
      css19 = ["assets/pages/contact.svelte-2623752f.css"];
    }
  });

  // .svelte-kit/output/server/entries/pages/berita/__layout.svelte.js
  var layout_svelte_exports3 = {};
  __export(layout_svelte_exports3, {
    default: () => _layout3,
    load: () => load6
  });
  var css20, load6, _layout3;
  var init_layout_svelte3 = __esm({
    ".svelte-kit/output/server/entries/pages/berita/__layout.svelte.js"() {
      init_index_2749e1b7();
      init_Sidebar_bb578ce6();
      init_TagList_0e1f394c();
      css20 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.layout-grid.svelte-33z7dr{display:grid;grid-template-columns:100%}@media(min-width: 1440px){.layout-grid.svelte-33z7dr{grid-gap:0 var(--halfNote);grid-template-columns:var(--sidebarWidth) 1fr var(--sidebarWidth)}}.sidebar-wrapper.svelte-33z7dr{display:none}@media(min-width: 1440px){.sidebar-wrapper.svelte-33z7dr{display:block;align-self:start;position:-webkit-sticky;position:sticky;top:var(--halfNote)}}',
        map: null
      };
      load6 = async ({ fetch: fetch2 }) => {
        await fetch2("/api/rss.xml");
        const res = await fetch2("/api/posts.json");
        const resJSON = await res.json();
        const recentPosts = resJSON.posts.map((post) => ({ slug: post.slug, title: post.title })).slice(0, 5);
        const allCategories = Array.from(new Set(resJSON.posts.flatMap((p) => p.categories)));
        return { props: { recentPosts, allCategories } };
      };
      _layout3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { recentPosts } = $$props;
        let { allCategories } = $$props;
        if ($$props.recentPosts === void 0 && $$bindings.recentPosts && recentPosts !== void 0)
          $$bindings.recentPosts(recentPosts);
        if ($$props.allCategories === void 0 && $$bindings.allCategories && allCategories !== void 0)
          $$bindings.allCategories(allCategories);
        $$result.css.add(css20);
        return `<div class="${"layout-grid svelte-33z7dr"}"><div class="${"sidebar-wrapper svelte-33z7dr"}">${validate_component(Sidebar, "Sidebar").$$render($$result, { recentPosts, allCategories }, {}, {})}</div>
  
  ${slots.default ? slots.default({}) : ``}
</div>`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/9.js
  var __exports10 = {};
  __export(__exports10, {
    css: () => css21,
    entry: () => entry10,
    js: () => js10,
    module: () => layout_svelte_exports3
  });
  var entry10, js10, css21;
  var init__10 = __esm({
    ".svelte-kit/output/server/nodes/9.js"() {
      init_layout_svelte3();
      entry10 = "pages/berita/__layout.svelte-f5e3a422.js";
      js10 = ["pages/berita/__layout.svelte-f5e3a422.js", "chunks/vendor-b62d7b9b.js", "chunks/Sidebar-8b7ed7f7.js", "chunks/TagList-bde82414.js", "chunks/navigation-53ece758.js", "chunks/singletons-d1fb5791.js"];
      css21 = ["assets/pages/blog/__layout.svelte-dc7a1eec.css", "assets/Sidebar-81bd121c.css", "assets/TagList-413d58d5.css"];
    }
  });

  // .svelte-kit/output/server/entries/pages/berita/index.svelte.js
  var index_svelte_exports3 = {};
  __export(index_svelte_exports3, {
    default: () => Berita,
    load: () => load7
  });
  var load7, Berita;
  var init_index_svelte3 = __esm({
    ".svelte-kit/output/server/entries/pages/berita/index.svelte.js"() {
      init_index_2749e1b7();
      load7 = async ({ fetch: fetch2 }) => {
        const res = await fetch2("/api/berita/berita.json");
        const posts = await res.json();
        return { props: { posts } };
      };
      Berita = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { posts } = $$props;
        if ($$props.posts === void 0 && $$bindings.posts && posts !== void 0)
          $$bindings.posts(posts);
        return `${each(posts, (post) => {
          return `<h2><!-- HTML_TAG_START -->${post.title.rendered}<!-- HTML_TAG_END --></h2>
    <img${add_attribute("src", post.image, 0)} alt="${""}">
    <p><!-- HTML_TAG_START -->${post.excerpt.rendered}<!-- HTML_TAG_END --></p>
    <a${add_attribute("href", `/berita/${post.slug}`, 0)}>Readmore</a>`;
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/10.js
  var __exports11 = {};
  __export(__exports11, {
    css: () => css22,
    entry: () => entry11,
    js: () => js11,
    module: () => index_svelte_exports3
  });
  var entry11, js11, css22;
  var init__11 = __esm({
    ".svelte-kit/output/server/nodes/10.js"() {
      init_index_svelte3();
      entry11 = "pages/berita/index.svelte-47a93727.js";
      js11 = ["pages/berita/index.svelte-47a93727.js", "chunks/vendor-b62d7b9b.js"];
      css22 = [];
    }
  });

  // .svelte-kit/output/server/entries/pages/berita/_slug_.svelte.js
  var slug_svelte_exports2 = {};
  __export(slug_svelte_exports2, {
    default: () => U5Bslugu5D2,
    load: () => load8
  });
  var load8, U5Bslugu5D2;
  var init_slug_svelte2 = __esm({
    ".svelte-kit/output/server/entries/pages/berita/_slug_.svelte.js"() {
      init_index_2749e1b7();
      load8 = async ({ params, fetch: fetch2 }) => {
        const slug = params.slug;
        const res = await fetch2(`/api/berita/${slug}.json`);
        const post = await res.json();
        return { props: { post } };
      };
      U5Bslugu5D2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { post } = $$props;
        if ($$props.post === void 0 && $$bindings.post && post !== void 0)
          $$bindings.post(post);
        return `<h1><!-- HTML_TAG_START -->${post.title.rendered}<!-- HTML_TAG_END --></h1>
${post.image ? `<img${add_attribute("src", post.image, 0)} alt="${""}">` : ``}
<p><!-- HTML_TAG_START -->${post.excerpt.rendered}<!-- HTML_TAG_END --></p>`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/11.js
  var __exports12 = {};
  __export(__exports12, {
    css: () => css23,
    entry: () => entry12,
    js: () => js12,
    module: () => slug_svelte_exports2
  });
  var entry12, js12, css23;
  var init__12 = __esm({
    ".svelte-kit/output/server/nodes/11.js"() {
      init_slug_svelte2();
      entry12 = "pages/berita/_slug_.svelte-e72e35cc.js";
      js12 = ["pages/berita/_slug_.svelte-e72e35cc.js", "chunks/vendor-b62d7b9b.js"];
      css23 = [];
    }
  });

  // .svelte-kit/output/server/chunks/resume-728c1975.js
  var resume_728c1975_exports = {};
  __export(resume_728c1975_exports, {
    default: () => Resume
  });
  var Resume;
  var init_resume_728c1975 = __esm({
    ".svelte-kit/output/server/chunks/resume-728c1975.js"() {
      init_index_2749e1b7();
      Resume = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<h2 id="${"summary"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#summary"}"><span class="${"icon icon-link"}"></span></a>Summary</h2>
<p>Front-end developer with 6+ years of experience designing, engineering, managing and supporting web applications. Specializing in UI design and user experience, working with JavaScript (especially Vue, Svelte and React), CSS, and responsive, accessible, semantic HTML.</p>
<h2 id="${"professional-experience"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#professional-experience"}"><span class="${"icon icon-link"}"></span></a>Professional experience</h2>
<h3 id="${"shopify"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#shopify"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://shopify.com/"}" rel="${"nofollow"}">Shopify</a></h3>
<p><strong>Senior Front End Developer</strong></p>
<p><em>August 2021 \u2013 present</em></p>
<ul><li>Collaborated with third-party product owners and API developers to improve Shopify\u2019s Installments product offering</li>
<li>Create internal diagnostics tools for troubleshooting third-party API interactions</li></ul>
<h3 id="${"aware3"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#aware3"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://aware3.com"}" rel="${"nofollow"}">Aware3</a></h3>
<p><strong>Senior JavaScript Developer</strong></p>
<p><em>February 2021 \u2013 August 2021</em></p>
<ul><li>Actively mentored and paired with junior engineers, helping to level up their skills and increase their knowledge and adoption of best practices in front-end, framework, and testing</li>
<li>Built out new financial reporting features and filters aimed at giving <a href="${"https://aware3.com/admin-portal/"}" rel="${"nofollow"}">admin portal</a> users customizable insights into org. finances, giving and transactions (including year-over-year, LYBUNT and SYBUNT)</li>
<li>Created and delivered a one-hour training on engineering web accessibility, covering ability types, assistive technologies, semantic HTML, ARIA, WCAG, and inclusive color, text, images and focus</li>
<li>Worked with designers to build out design system in Storybook and implement new components in Vue/Knockout, ensuring consistent, pixel-perfect UI, and tight coupling with backend Laravel application data</li>
<li>Independently authored unit tests with Karma, Mocha, Chai and Sinon to ensure code reliability</li>
<li>Updated visual regression and acceptance tests as needed</li>
<li>Initiated a streamlining of the ticketing and pull request processes to improve efficiency and team communication by reducing redundancy by consolidating to a single universal workflow</li>
<li>Spearheaded accessibility audits and updates to markup semantics, focus styles, and accessible text</li>
<li>Actively participated in GitHub code reviews and applicant code sample reviews</li></ul>
<h3 id="${"various-publications"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#various-publications"}"><span class="${"icon icon-link"}"></span></a>Various publications</h3>
<p><strong>Freelance technical writer</strong></p>
<p><em>Including articles published for:</em></p>
<ul><li><a href="${"https://css-tricks.com/author/joshcollinsworth/"}" rel="${"nofollow"}">CSS Tricks</a></li>
<li><a href="${"https://blog.logrocket.com/author/joshcollinsworth/"}" rel="${"nofollow"}">LogRocket blog</a></li>
<li><a href="${"https://getflywheel.com/layout/leveling-up-flywheels-retreat-website/"}" rel="${"nofollow"}">The Layout</a> (<em>misattributed</em>)</li></ul>
<h3 id="${"wp-engine"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#wp-engine"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://wpengine.com"}" rel="${"nofollow"}">WP Engine</a></h3>
<p><strong>Associate Front-End Engineer</strong></p>
<p><em>August 2019 \u2013 January 2021</em></p>
<ul><li>Collaborated with product managers, designers, back-end engineers, and internal stakeholders to create and improve products used by Flywheel customers and support, with the mission of improving both sides of the support process. Projects included an in-app communications center to enable important messaging direct to impacted users, and a batch edit feature allowing Flywheel support admins to save an estimated 45\u201390 seconds per site edited</li>
<li>Rebuilt Flywheel\u2019s site migration request form and engineered the UI for a Flywheel migration WordPress plugin, increasing self-service and reducing the CS burden of migrations by 35\u201340% on average</li>
<li>Spearheaded an accessibility audit and overhaul of legacy Rails and Vue components, which brought all uses of iconography, links, buttons and focus styles up to accessibility compliance standards; thoroughly updated internal style guide documentation to ensure proper accessibility moving forward</li>
<li>Volunteered to singlehandedly build four company micro sites, including for the <a href="${"https://rise.getflywheel.com/"}" rel="${"nofollow"}">Rise ERG</a> and its newsletters, and two for all-company retreats called \u201CFly Fest\u201D (<a href="${"https://fest.getflywheel.com/"}" rel="${"nofollow"}">2020</a> and <a href="${"https://fest2019.getflywheel.com/"}" rel="${"nofollow"}">2019</a>)</li>
<li>Singlehandedly remade the admin side of the Flywheel Rails app to improve UI/UX, bring consistency to iconography, overhaul legacy CSS, and even added a dark mode as a personal passion project</li>
<li>Mentored WP Engine\u2019s development intern on processes, Vue, JavaScript, CSS, and code editor tools</li>
<li>Acted as interim project manager on two occasions; directed team feature improvements and bug fixes using Jira and GitHub to track and manage progress in an Agile environment</li>
<li>Actively participated in code reviews, suggesting improvements, proposing alternatives, and discussing tradeoffs of possible development approaches to problem-solving</li></ul>
<h3 id="${"flywheel---managed-wordpress-hosting"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#flywheel---managed-wordpress-hosting"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://getflywheel.com"}" rel="${"nofollow"}">Flywheel - Managed WordPress Hosting</a></h3>
<p><strong>Support Technical Lead (Tier 2); Happiness Engineer</strong></p>
<p><em>September 2015 \u2013 August 2019</em></p>
<p><em>(Acquired by WP Engine June 2019)</em></p>
<ul><li>Led the US Tier 2 support team, including both local and remote engineers, guiding their work and training in WordPress, PHP, platform technologies such as NGINX and Varnish, and developing tools and resources for leveling up their knowledge and skills, such as a micro web app to assist with complex SQL queries, and in-depth training sessions on SSL, DNS, NGINX, and the Flywheel Cloud Platform architecture</li>
<li>Launched a private Chrome extension to add helpful productivity features (and visual themes) to Flywheel\u2019s admin panel, which saves agents an estimated 15\u201320 minutes of productivity per day; acted as lead developer and maintainer on the project, which is still in use by all Flywheel support agents</li>
<li>Developed and taught a \u201CWordPress 101\u201D course to all Flywheel new hires </li>
<li>Built a self-driven \u201Cwho\u2019s who\u201D app built in React using Flywheel\u2019s HR software API to help new and existing employees learn one another\u2019s names and faces in a fun browser game environment</li>
<li>Took on sole leadership for developing and maintaining the support team\u2019s internal knowledge base WordPress site, used by all levels, including entry-level engineers new to the tech, and intermediate- to expert-level engineers as a reference on topics ranging from plugins to NGINX , caching and RegEx</li>
<li>Developed a set-it-and-forget-it <a href="${"https://github.com/rickyjanuari/flywheel-cloud-wp-load-fix/"}" rel="${"nofollow"}">plugin</a> to resolve compatibility issues between some WordPress plugins and themes and the Flywheel Cloud Platform\u2019s file system architecture</li>
<li>Authored numerous help guides and trainings, both customer-facing and internal</li>
<li>Two-time finalist and one-time winner for all-company support MVP of the year</li></ul>
<h3 id="${"aim-code-school"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#aim-code-school"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://aiminstitute.org/programs/technical-training/aim-code-school-2/"}" rel="${"nofollow"}">AIM Code School</a></h3>
<p><strong>WordPress course instructor</strong></p>
<p><em>September 2015 \u2013 July 2018</em></p>
<p><em>(Formerly Interface Code School)</em></p>
<ul><li>Solely responsible for creating and delivering curriculum teaching students WordPress with a focus on theme development. Class sizes ranged from 4\u201312 students, and topics included running WordPress locally, PHP, MySQL, WordPress theming, the template hierarchy, and touched on fundamentals such as web performance, design foundations, and ensuring general accessibility</li>
<li>Guided students in-person and remotely as they built custom WordPress sites and themes either as portfolio pieces or for a real-life clients, often meeting the needs of a local nonprofit organization.</li></ul>
<h3 id="${"david-day--associates"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#david-day--associates"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://dday.com"}" rel="${"nofollow"}">David Day &amp; Associates</a></h3>
<p><strong>Graphic designer/WordPress developer</strong></p>
<p><em>August 2014 \u2013\xA0September 2015</em></p>
<ul><li>Designed and implemented brand standards across print and web platforms</li>
<li>Worked as lead designer on projects such as a rebrand and unification of two separate practices, now known singularly as <a href="${"https://nebraskaspineandpain.com/"}" rel="${"nofollow"}">Nebraska Spine + Pain Center</a>, and rebranding <a href="${"https://www.altergroup.com/"}" rel="${"nofollow"}">The Alter Group</a>, a 60-year-old commercial real estate developer, to bring its look and messaging into a modern market</li>
<li>Heavily customized WordPress websites based on branding and client needs to ensure future-proof edit-ability without sacrificing brand integrity</li>
<li>Participated in discovery sessions, critiques and reviews of concepts and designs</li>
<li>Presented finalized design concepts to clients and maintained client communication as needed</li></ul>
<h2 id="${"skills"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#skills"}"><span class="${"icon icon-link"}"></span></a>Skills</h2>
<ul><li>Proficient with semantic HTML, responsive CSS/Sass, and ES6+ JavaScript; specialized in Vue (Vue Router, Vuex, Nuxt, Gridsome), Svelte and SvelteKit, WordPress, SVG, web animation, performance and optimization.</li>
<li>Experienced with React, TypeScript, Knockout, jQuery, JS testing (Karma, Mocha, Chai, framework utility libraries), PHP, MySQL, Ruby on Rails, Laravel, Docker, AWS, RegEx, NGINX, (Varnish) caching, Redux, Storybook, git/GitHub, NPM, Jira, CLIs, DNS, SemVer.</li></ul>
<h2 id="${"education-etc"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#education-etc"}"><span class="${"icon icon-link"}"></span></a>Education, etc.</h2>
<h3 id="${"metropolitan-community-college"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#metropolitan-community-college"}"><span class="${"icon icon-link"}"></span></a>Metropolitan Community College</h3>
<p><strong>August 2012 \u2013 November 2014</strong></p>
<p><em>Associate\u2019s of Graphic Communication Art and Design</em></p>
<h3 id="${"interface-web-school"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#interface-web-school"}"><span class="${"icon icon-link"}"></span></a>Interface Web School</h3>
<p><strong>Spring 2015</strong></p>
<p><em>WordPress Developer Certification</em></p>
<h3 id="${"codecademy"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#codecademy"}"><span class="${"icon icon-link"}"></span></a>Codecademy</h3>
<p><strong>January 2018</strong></p>
<p><em>Certification: Codecademy Pro Intensive React web app builder course</em></p>
<h2 id="${"more"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#more"}"><span class="${"icon icon-link"}"></span></a>More</h2>
<ul><li><a href="${"/contact?from_page=resume"}">Get in contact</a></li>
<li><a href="${"https://linkedin.com/in/joshcollinsworth"}" rel="${"nofollow"}">LinkedIn</a></li>
<li><a href="${"https://github.com/rickyjanuari"}" rel="${"nofollow"}">GitHub</a></li></ul>`;
      });
    }
  });

  // .svelte-kit/output/server/entries/pages/resume.svelte.js
  var resume_svelte_exports = {};
  __export(resume_svelte_exports, {
    default: () => Resume_1,
    load: () => load9
  });
  var css24, load9, Resume_1;
  var init_resume_svelte = __esm({
    ".svelte-kit/output/server/entries/pages/resume.svelte.js"() {
      init_index_2749e1b7();
      init_Main_5d179e14();
      css24 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.resume h3{margin-bottom:calc(var(--quarterNote) / 2)}.resume h3~p{margin:0}.resume h3 a{text-decoration:underline;text-decoration-thickness:1px;-webkit-text-decoration-color:var(--yellow);text-decoration-color:var(--yellow)}',
        map: null
      };
      load9 = async () => {
        const resume = await Promise.resolve().then(() => (init_resume_728c1975(), resume_728c1975_exports));
        return { props: { Resume: resume.default } };
      };
      Resume_1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { Resume: Resume2 } = $$props;
        if ($$props.Resume === void 0 && $$bindings.Resume && Resume2 !== void 0)
          $$bindings.Resume(Resume2);
        $$result.css.add(css24);
        return `${$$result.head += `${$$result.title = `<title>Ricky Januari | R\xE9sum\xE9</title>`, ""}<meta data-key="${"description"}" name="${"description"}" content="${"My professional resume"}" data-svelte="svelte-1f6uwhd"><meta property="${"og:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-1f6uwhd"><meta name="${"twitter:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-1f6uwhd"><meta name="${"robots"}" content="${"noindex,nofollow"}" data-svelte="svelte-1f6uwhd">`, ""}


${validate_component(Main, "Main").$$render($$result, {}, {}, {
          default: () => {
            return `<div class="${"resume compressed-content"}">${validate_component(Resume2 || missing_component, "svelte:component").$$render($$result, {}, {}, {})}</div>`;
          }
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/12.js
  var __exports13 = {};
  __export(__exports13, {
    css: () => css25,
    entry: () => entry13,
    js: () => js13,
    module: () => resume_svelte_exports
  });
  var entry13, js13, css25;
  var init__13 = __esm({
    ".svelte-kit/output/server/nodes/12.js"() {
      init_resume_svelte();
      entry13 = "pages/resume.svelte-44fa0596.js";
      js13 = ["pages/resume.svelte-44fa0596.js", "chunks/preload-helper-e4860ae8.js", "chunks/vendor-b62d7b9b.js", "chunks/Main-f748586d.js"];
      css25 = ["assets/pages/resume.svelte-00b667c1.css"];
    }
  });

  // .svelte-kit/output/server/entries/pages/blog/__layout.svelte.js
  var layout_svelte_exports4 = {};
  __export(layout_svelte_exports4, {
    default: () => _layout4,
    load: () => load10
  });
  var css26, load10, _layout4;
  var init_layout_svelte4 = __esm({
    ".svelte-kit/output/server/entries/pages/blog/__layout.svelte.js"() {
      init_index_2749e1b7();
      init_Sidebar_bb578ce6();
      init_TagList_0e1f394c();
      css26 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.layout-grid.svelte-33z7dr{display:grid;grid-template-columns:100%}@media(min-width: 1440px){.layout-grid.svelte-33z7dr{grid-gap:0 var(--halfNote);grid-template-columns:var(--sidebarWidth) 1fr var(--sidebarWidth)}}.sidebar-wrapper.svelte-33z7dr{display:none}@media(min-width: 1440px){.sidebar-wrapper.svelte-33z7dr{display:block;align-self:start;position:-webkit-sticky;position:sticky;top:var(--halfNote)}}',
        map: null
      };
      load10 = async ({ fetch: fetch2 }) => {
        await fetch2("/api/rss.xml");
        const res = await fetch2("/api/posts.json");
        const resJSON = await res.json();
        const recentPosts = resJSON.posts.map((post) => ({ slug: post.slug, title: post.title })).slice(0, 5);
        const allCategories = Array.from(new Set(resJSON.posts.flatMap((p) => p.categories)));
        return { props: { recentPosts, allCategories } };
      };
      _layout4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { recentPosts } = $$props;
        let { allCategories } = $$props;
        if ($$props.recentPosts === void 0 && $$bindings.recentPosts && recentPosts !== void 0)
          $$bindings.recentPosts(recentPosts);
        if ($$props.allCategories === void 0 && $$bindings.allCategories && allCategories !== void 0)
          $$bindings.allCategories(allCategories);
        $$result.css.add(css26);
        return `<div class="${"layout-grid svelte-33z7dr"}"><div class="${"sidebar-wrapper svelte-33z7dr"}">${validate_component(Sidebar, "Sidebar").$$render($$result, { recentPosts, allCategories }, {}, {})}</div>
  
  ${slots.default ? slots.default({}) : ``}
</div>`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/13.js
  var __exports14 = {};
  __export(__exports14, {
    css: () => css27,
    entry: () => entry14,
    js: () => js14,
    module: () => layout_svelte_exports4
  });
  var entry14, js14, css27;
  var init__14 = __esm({
    ".svelte-kit/output/server/nodes/13.js"() {
      init_layout_svelte4();
      entry14 = "pages/blog/__layout.svelte-7ed29563.js";
      js14 = ["pages/blog/__layout.svelte-7ed29563.js", "chunks/vendor-b62d7b9b.js", "chunks/Sidebar-8b7ed7f7.js", "chunks/TagList-bde82414.js", "chunks/navigation-53ece758.js", "chunks/singletons-d1fb5791.js"];
      css27 = ["assets/pages/blog/__layout.svelte-dc7a1eec.css", "assets/Sidebar-81bd121c.css", "assets/TagList-413d58d5.css"];
    }
  });

  // .svelte-kit/output/server/chunks/Pagination-3adfb506.js
  var css28, Pagination;
  var init_Pagination_3adfb506 = __esm({
    ".svelte-kit/output/server/chunks/Pagination-3adfb506.js"() {
      init_index_2749e1b7();
      css28 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.pagination.svelte-6wwia.svelte-6wwia{margin:0 0 var(--quarterNote)}.pagination.svelte-6wwia h2.svelte-6wwia{font-size:1rem;padding:0;margin:0 0 var(--eighthNote)}.pagination.svelte-6wwia h2.svelte-6wwia::before{display:none}.pagination.svelte-6wwia ul.svelte-6wwia{display:flex;flex-wrap:wrap;justify-content:start;list-style-type:none;gap:var(--eighthNote);margin:0;padding:0}.pagination.svelte-6wwia ul li.svelte-6wwia{margin:0}.pagination.svelte-6wwia ul a.svelte-6wwia{background:var(--lighterBlue);text-decoration:none;line-height:1;display:flex;align-items:center;justify-content:center;width:2em;height:2em;font-family:var(--headingFont);font-weight:bold;transition:background 0.1s}.pagination.svelte-6wwia ul a.svelte-6wwia:hover{background:var(--yellow)}.pagination.svelte-6wwia ul a[aria-current=true].svelte-6wwia{background:var(--yellow);color:var(--black);border:1px solid currentColor}.dark .pagination ul a{background:var(--darkBlue) !important}.dark .pagination ul a[aria-current=true].svelte-6wwia.svelte-6wwia{background:var(--yellow) !important}',
        map: null
      };
      Pagination = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { currentPage } = $$props;
        let { totalPosts } = $$props;
        let pagesAvailable;
        const isCurrentPage = (page) => page == currentPage;
        if ($$props.currentPage === void 0 && $$bindings.currentPage && currentPage !== void 0)
          $$bindings.currentPage(currentPage);
        if ($$props.totalPosts === void 0 && $$bindings.totalPosts && totalPosts !== void 0)
          $$bindings.totalPosts(totalPosts);
        $$result.css.add(css28);
        pagesAvailable = Math.ceil(totalPosts / 10);
        return `<nav role="${"navigation"}" aria-label="${"Pagination navigation"}" class="${"pagination svelte-6wwia"}"><h2 class="${"svelte-6wwia"}">Go to page:</h2>
  <ul class="${"svelte-6wwia"}">${each(Array.from({ length: pagesAvailable }, (_, i) => i + 1), (page) => {
          return `<li class="${"svelte-6wwia"}"><a href="${"/blog/page/" + escape(page)}"${add_attribute("aria-current", isCurrentPage(page), 0)} class="${"svelte-6wwia"}">${isCurrentPage(page) ? `<span class="${"sr"}">Current page
            </span>` : `<span class="${"sr"}">Go to page
            </span>`}
          ${escape(page)}</a>
      </li>`;
        })}</ul>
</nav>`;
      });
    }
  });

  // .svelte-kit/output/server/entries/pages/blog/index.svelte.js
  var index_svelte_exports4 = {};
  __export(index_svelte_exports4, {
    default: () => Blog,
    load: () => load11
  });
  var load11, Blog;
  var init_index_svelte4 = __esm({
    ".svelte-kit/output/server/entries/pages/blog/index.svelte.js"() {
      init_index_2749e1b7();
      init_Main_5d179e14();
      init_Pagination_3adfb506();
      init_PostList_093c74fc();
      init_TagList_0e1f394c();
      init_ExternalLink_29dd7148();
      load11 = async ({ fetch: fetch2 }) => {
        const res = await fetch2(`/api/posts.json`);
        const { posts } = await res.json();
        const count = await fetch2(`/api/posts/count.json`);
        const { total } = await count.json();
        return { props: { posts, totalPosts: total } };
      };
      Blog = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { posts = [] } = $$props;
        let { totalPosts } = $$props;
        if ($$props.posts === void 0 && $$bindings.posts && posts !== void 0)
          $$bindings.posts(posts);
        if ($$props.totalPosts === void 0 && $$bindings.totalPosts && totalPosts !== void 0)
          $$bindings.totalPosts(totalPosts);
        return `${$$result.head += `${$$result.title = `<title>Ricky Januari | Blog</title>`, ""}<meta data-key="${"description"}" name="${"description"}" content="${"Writings on development, design, and random thoughts."}" data-svelte="svelte-185rn41"><meta property="${"og:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-185rn41"><meta name="${"twitter:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-185rn41">`, ""}


${validate_component(Main, "Main").$$render($$result, {}, {}, {
          default: () => {
            return `<div class="${"compressed-content double-wide"}">${validate_component(PostList, "PostList").$$render($$result, { posts }, {}, {})}

		${validate_component(Pagination, "Pagination").$$render($$result, { currentPage: 1, totalPosts }, {}, {})}</div>`;
          }
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/14.js
  var __exports15 = {};
  __export(__exports15, {
    css: () => css29,
    entry: () => entry15,
    js: () => js15,
    module: () => index_svelte_exports4
  });
  var entry15, js15, css29;
  var init__15 = __esm({
    ".svelte-kit/output/server/nodes/14.js"() {
      init_index_svelte4();
      entry15 = "pages/blog/index.svelte-d68f7e3b.js";
      js15 = ["pages/blog/index.svelte-d68f7e3b.js", "chunks/vendor-b62d7b9b.js", "chunks/Main-f748586d.js", "chunks/Pagination-4f56842f.js", "chunks/PostList-5ba61222.js", "chunks/TagList-bde82414.js", "chunks/ExternalLink-10e1f92c.js"];
      css29 = ["assets/Pagination-7586d39d.css", "assets/PostList-7831d634.css", "assets/TagList-413d58d5.css", "assets/ExternalLink-0287f125.css"];
    }
  });

  // .svelte-kit/output/server/entries/pages/blog/category/index.svelte.js
  var index_svelte_exports5 = {};
  __export(index_svelte_exports5, {
    default: () => Category,
    load: () => load12
  });
  var css30, load12, Category;
  var init_index_svelte5 = __esm({
    ".svelte-kit/output/server/entries/pages/blog/category/index.svelte.js"() {
      init_index_2749e1b7();
      init_Main_5d179e14();
      css30 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}h1.h2.svelte-g8rxtn.svelte-g8rxtn{margin:0 0 var(--wholeNote)}li.svelte-g8rxtn.svelte-g8rxtn{text-transform:uppercase;margin-bottom:var(--quarterNote);font-style:italic}li.svelte-g8rxtn a.svelte-g8rxtn{font-family:var(--headingFont);font-weight:bold;font-size:0.85em;font-style:normal}',
        map: null
      };
      load12 = async ({ fetch: fetch2 }) => {
        const res = await fetch2(`/api/posts.json`);
        let { posts } = await res.json();
        let uniqueCategories = {};
        posts.forEach((post) => {
          post.categories.forEach((category) => {
            if (uniqueCategories.hasOwnProperty(category)) {
              uniqueCategories[category].count += 1;
            } else {
              uniqueCategories[category] = { title: category, count: 1 };
            }
          });
        });
        const sortedUniqueCategories = Object.values(uniqueCategories).sort((a, b) => a.title > b.title);
        return {
          props: { uniqueCategories: sortedUniqueCategories }
        };
      };
      Category = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { uniqueCategories } = $$props;
        if ($$props.uniqueCategories === void 0 && $$bindings.uniqueCategories && uniqueCategories !== void 0)
          $$bindings.uniqueCategories(uniqueCategories);
        $$result.css.add(css30);
        return `${$$result.head += `${$$result.title = `<title>Blog | Categories</title>`, ""}<meta property="${"og:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-hwc2yh"><meta name="${"twitter:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-hwc2yh">`, ""}


${validate_component(Main, "Main").$$render($$result, {}, {}, {
          default: () => {
            return `<div class="${"compressed-content"}"><h1 class="${"h2 svelte-g8rxtn"}">All blog categories</h1>
    
    <ul>${each(uniqueCategories, (category) => {
              return `<li class="${"svelte-g8rxtn"}"><a href="${"/blog/category/" + escape(category.title)}" class="${"svelte-g8rxtn"}">${escape(category.title)}</a>
        (${escape(category.count)})
      </li>`;
            })}</ul></div>`;
          }
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/15.js
  var __exports16 = {};
  __export(__exports16, {
    css: () => css31,
    entry: () => entry16,
    js: () => js16,
    module: () => index_svelte_exports5
  });
  var entry16, js16, css31;
  var init__16 = __esm({
    ".svelte-kit/output/server/nodes/15.js"() {
      init_index_svelte5();
      entry16 = "pages/blog/category/index.svelte-308e92a0.js";
      js16 = ["pages/blog/category/index.svelte-308e92a0.js", "chunks/vendor-b62d7b9b.js", "chunks/Main-f748586d.js"];
      css31 = ["assets/pages/blog/category/index.svelte-a5cabfc2.css"];
    }
  });

  // .svelte-kit/output/server/chunks/PullQuote-effacfdf.js
  var css32, PullQuote;
  var init_PullQuote_effacfdf = __esm({
    ".svelte-kit/output/server/chunks/PullQuote-effacfdf.js"() {
      init_index_2749e1b7();
      css32 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.pull-quote.svelte-1irvttr{float:right;margin:var(--halfNote) -14em var(--dottedHalfNote) var(--halfNote);font-size:1.3rem;line-height:1.4;position:relative;background:var(--paper);overflow:hidden;padding:0 0 0.75rem 0;font-family:var(--headingFont);font-style:normal;font-weight:normal;max-width:18em}@media(min-width: 1440px){.pull-quote.svelte-1irvttr{display:block;font-size:1.4rem}}.pull-quote.svelte-1irvttr:after{content:"";height:0.25rem;width:100%;margin-left:-100%;background:linear-gradient(to right, var(--blueToYellow));bottom:0;position:absolute}.pull-quote em, .pull-quote i{font-weight:bold;font-style:normal}',
        map: null
      };
      PullQuote = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        $$result.css.add(css32);
        return `<aside class="${"pull-quote svelte-1irvttr"}" aria-hidden="${"true"}" hidden>${slots.default ? slots.default({}) : ``}
</aside>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/SideNote-5c625ecb.js
  var css33, SideNote;
  var init_SideNote_5c625ecb = __esm({
    ".svelte-kit/output/server/chunks/SideNote-5c625ecb.js"() {
      init_index_2749e1b7();
      css33 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.side-note.svelte-vja4vv{position:relative;margin:var(--halfNote) 0;font-size:0.8rem;font-style:italic;background:linear-gradient(to right, var(--lighterBlue), var(--lightestBlue));line-height:var(--bodyLineHeight);min-height:4.5rem;width:calc(100% + var(--margin) + var(--margin));margin-left:calc(var(--margin) * -1);padding:calc(var(--quarterNote) * 1.5) var(--quarterNote);color:var(--ink)}.side-note.svelte-vja4vv:before{content:"Side note:";font-weight:bold;font-family:var(--headingFont);font-style:normal;text-transform:uppercase;font-size:0.8em;display:block;line-height:1;margin:0 0 var(--eighthNote)}@media(min-width: 600px){.side-note.svelte-vja4vv{width:100%;margin-left:0;padding:calc(var(--quarterNote) * 1.5)}}.side-note.svelte-vja4vv em,.side-note.svelte-vja4vv i{font-style:normal}.dark .side-note{background:var(--darkerBlue)}',
        map: null
      };
      SideNote = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        $$result.css.add(css33);
        return `<div class="${"side-note svelte-vja4vv"}">${slots.default ? slots.default({}) : ``}
</div>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/12-things-949a7b41.js
  var things_949a7b41_exports = {};
  __export(things_949a7b41_exports, {
    default: () => _12_things,
    metadata: () => metadata
  });
  var metadata, _12_things;
  var init_things_949a7b41 = __esm({
    ".svelte-kit/output/server/chunks/12-things-949a7b41.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      init_SideNote_5c625ecb();
      metadata = {
        "title": "Social Media, Compulsion, and the 12 Things I Learned on My Break from Facebook",
        "date": "2015-03-27",
        "updated": "2021-01-19",
        "categories": ["personal"],
        "tags": ["facebook", "internet", "personal", "social-media"],
        "coverImage": "Untitled-21.png",
        "coverWidth": 9,
        "coverHeight": 5,
        "excerpt": "I\u2019m beginning to believe that becoming more connected with everyone is making me less connected with anyone."
      };
      _12_things = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `I wrote this post back in early 2015, and gave up Facebook permanently later that year. I&#39;ve since deleted Instagram as well, though you can still find me on Twitter for the time being (despite the fact that some of these things are uncomfortably true there as well).
`;
          }
        })}
<p>As many of you may know, I recently took on the self-appointed challenge of staying off Facebook for 60 days. \u2026Well, actually, that\u2019s only partly true; I initially gave up Facebook for an indefinite amount of time. When I made the decision, part of me hoped that maybe it would result in a permanent termination.</p>
<p>But 60 days was all I lasted.</p>
<p>So was I an addict who couldn\u2019t go more than a couple months without a fix? Or was Facebook actually valuable enough to make me reconsider?</p>
<p><strong>To be honest\u2026a little of both.</strong></p>
<p>Below are the realizations I had from approximately January 1 to March 1, 2015.</p>
<h2 id="${"1-facebook-trains-you-to-not-read-things"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#1-facebook-trains-you-to-not-read-things"}"><span class="${"icon icon-link"}"></span></a>#1. Facebook trains you to not read things</h2>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `It wasn\u2019t until I\u2019d gotten back on Facebook that I realized how much text was flying through my field of vision with less than a second\u2019s thought\u2026or wondered what I was looking\xA0for.
`;
          }
        })}
<p>You\u2019re not going to read this whole post. If anything, you\u2019re just going to skim the headlines to see if any of it looks interesting. That\u2019s ok; that\u2019s what I do, too. The internet in general and social media in particular have trained us not so much to read, but to search for what we find interesting. To the human eye, that naturally is not text. But it wasn\u2019t until I\u2019d gotten back on Facebook that I realized how much text was flying through my field of vision with less than a second\u2019s thought\u2026or wondered what I was looking for.</p>
<h2 id="${"2-everything-is-in-numbered-lists-these-days"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#2-everything-is-in-numbered-lists-these-days"}"><span class="${"icon icon-link"}"></span></a>#2. Everything is in Numbered Lists These Days</h2>
<p>I didn\u2019t even write this to be a numbered list originally. I just realized at some point in late January how long it had been since I\u2019d seen an article with a number beginning its title and wondered: why are we attracted to this type of post?</p>
<p>I don\u2019t know, but if you\u2019re already bored, or if you\u2019re used to being directed to a specific number, I think #10 is probably the most important.</p>
<h2 id="${"3-you-dont-get-invited-to-things-when-youre-not-on-facebook"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#3-you-dont-get-invited-to-things-when-youre-not-on-facebook"}"><span class="${"icon icon-link"}"></span></a>#3. You don\u2019t get invited to things when you\u2019re not on Facebook</h2>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Unless it\u2019s too small to actually plan or large enough to sell tickets, Facebook is the only way you\u2019re hearing about\xA0it.
`;
          }
        })}
<p>This one was the most surprising to me. Just try it. You will disappear off your friends\u2019 invite radar once you leave Facebook. Somehow, for better or worse, it\u2019s become the de facto vehicle for invitations of virtually every type, and nobody except maybe your mom will bother to actually contact you directly if you don\u2019t respond. Unless it\u2019s too small to actually plan or large enough to sell tickets, Facebook is the only way you\u2019re hearing about it.</p>
<h2 id="${"4-you-check-your-phone-way-more-than-you-realize-you-do"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#4-you-check-your-phone-way-more-than-you-realize-you-do"}"><span class="${"icon icon-link"}"></span></a>#4. You check your phone WAY more than you realize you do</h2>
<p>As part of this exercise, I uninstalled the Facebook app from my phone. </p>
<p>I was astounded how many times my thumb would automatically, without so much as a conscious thought, move to the space where the Facebook app icon used to be. It would happen dozens of times a day.</p>
<p>I actually found myself wondering\u2014and I\u2019m ashamed to admit this\u2014\u201Cwhat did I do while I was in the bathroom before I got a smartphone?\u201D (Don\u2019t picture that.)</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `I was astounded how many times my thumb would automatically, without so much as a conscious thought, move to the space where the Facebook app icon used to be. It would happen dozens of times a\xA0day.
`;
          }
        })}
<p>Once I was off social media, I started noticing how often the people around me\u2014often people close to me, with whom I was having some sort of social interaction (however minor)\u2014whipped out their smartphones to stare at a feed through which they endlessly scrolled.</p>
<p>I don\u2019t begrudge them; I get it. I\u2019ve done the same thing unconsciously, compulsively, a thousand times. I can\u2019t tell you how many times I\u2019ve wondered why I\u2019m even still scrolling. <strong>I\u2019m more cognizant of that now; the break made me realize that most of the time when I\u2019m browsing my feed, it\u2019s as a junkie looking desperately for his next fix.</strong></p>
<h2 id="${"5-i-was-a-like-addict"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#5-i-was-a-like-addict"}"><span class="${"icon icon-link"}"></span></a>#5. I was a \u201Clike\u201D addict</h2>
<p>And maybe I still am.</p>
<p>Maybe you can relate, or maybe it\u2019s just my addictive and feedback-driven personality, but I realized I was <em>always</em> posting things with whether they would get a click in mind. When I gave up Facebook, I still held on to Twitter and found it frustrating that I would post things that didn\u2019t get responses.</p>
<p>It\u2019s one thing to like the feeling of connectedness that Facebook might bring, or to use it as a form of entertainment or escapism. But to be using it for <em>personal validation</em>? \u2026That\u2019s kind of messed up. But I guess the first step is admitting you have a problem, right?</p>
<h2 id="${"6-the-politics-on-facebook-affect-you-a-lot-more-than-you-think-they-do"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#6-the-politics-on-facebook-affect-you-a-lot-more-than-you-think-they-do"}"><span class="${"icon icon-link"}"></span></a>#6. The politics on Facebook affect you a lot more than you think they do</h2>
<p>Even the political posts I happened to agree with, I realized in their absence, often had a negative effect on my mental and emotional state. This is largely due, no doubt, to the fact that most politically relevant posts on social media are specifically designed to be polarizing. No matter how much you agree or disagree with [insert political voice here], that voice needs you to take action. Those posts need you to react, to feel something. Whether it\u2019s angry, sad, shocked, enraged, despondent, whatever\u2014<strong>political posts are <em>literally</em> hurting you</strong>. They\u2019re ruining your emotional state and they\u2019re driving you to further political extremes.</p>
<p><strong>ALL of the politics on Facebook\u2014including and maybe even especially those that I agreed with\u2014are the part I missed the least.</strong> It was peaceful outside their storm.</p>
<p>When I started using Facebook again, the pages I stopped following weren\u2019t ones that made me angry in disagreement; they were the ones closest to my views. Those views haven\u2019t changed, but I really don\u2019t feel the need to get worked up about them every day of my life.</p>
<h2 id="${"7-the-login-with-facebook-button-is-soooo-convenient"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#7-the-login-with-facebook-button-is-soooo-convenient"}"><span class="${"icon icon-link"}"></span></a>#7. The \u201CLogin with Facebook\u201D button is soooo convenient</h2>
<p>Try locking yourself out of Facebook on all your devices and see how many new apps and websites suddenly become completely unworthy of the trouble to create an account or login.</p>
<h2 id="${"8-i-have-social-media-only-friends-and-i-missed-them"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#8-i-have-social-media-only-friends-and-i-missed-them"}"><span class="${"icon icon-link"}"></span></a>#8. I have social media-only friends (and I missed them)</h2>
<p>I never realized it before the break, but a unique class of friend had emerged for me on Facebook.</p>
<p>Somewhere amid the sea of digital friends that I see or call or speak to exactly zero times a year, a little island with some happy, digital-only buddies had cropped up. I didn\u2019t miss family or local friends when I quit social media, because I still had contact with them. But <strong>I did actually miss some of the people with whom I regularly interacted on Facebook</strong>, people I rarely or never see in real life, but whose online relationship, I was somewhat surprised to learn, had grown meaningful to me.</p>
<h2 id="${"9-smartphones-are-killing-our-necks"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#9-smartphones-are-killing-our-necks"}"><span class="${"icon icon-link"}"></span></a>#9. Smartphones are killing our necks</h2>
<p>Seriously; I never realized how much neck stiffness I had until I stopped checking for updates every two minutes.</p>
<h2 id="${"10-connectedness-is-costing-us"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#10-connectedness-is-costing-us"}"><span class="${"icon icon-link"}"></span></a>#10. Connectedness is costing us</h2>
<p>Or put another way: </p>
<p>I\u2019m beginning to believe that becoming more connected with everyone is making me less connected with anyone.</p>
<p>All that time spent browsing, reading, liking\u2026it has to come from somewhere. Any minute you are or could be in the presence of another human being spent on social media is a minute you\u2019re taking from them and splitting up a dozen, a hundred, or a thousand ways. It\u2019s significantly weakening one good relationship in the name of very slightly strengthening many others.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `I&#39;m beginning to believe that becoming more connected with everyone is making me less connected with\xA0anyone.
`;
          }
        })}
<p>Maybe this is a negative view of the situation, or maybe it\u2019s a bit extreme. Maybe time and relationships aren\u2019t a zero-sum game. But let me ask you a question:</p>
<p>When you\u2019re sitting on the couch or lying in bed, what do you spend more time looking at and interacting with: your phone and the people with whom it connects you\u2026or the person next to you?</p>
<h2 id="${"11-facebook-is-more-of-a-communication-tool-than-you-think"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#11-facebook-is-more-of-a-communication-tool-than-you-think"}"><span class="${"icon icon-link"}"></span></a>#11. Facebook is more of a communication tool than you think</h2>
<p>I never realized how many people fit into the category of \u201D<em>good enough friends that I occasionally need to send them some kind of message directly, but not such good friends that it\u2019s easy for us to call or text each other</em>\u201D until Facebook Messenger was no longer an option. I also didn\u2019t realize how many people would completely drop out of my life, most likely never to be seen or heard from again, if I truly cut Facebook out of it.</p>
<h2 id="${"12-facebook-isnt-meaningless"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#12-facebook-isnt-meaningless"}"><span class="${"icon icon-link"}"></span></a>#12. Facebook isn\u2019t meaningless</h2>
<p>I almost hate to say it, because like I said at the beginning of all this, I sorta hoped that this break would result in a break-up. But it didn\u2019t. It left me right back where I was, because <strong>I realized that for all of Facebook\u2019s myriad flaws, and for its enervating tendency to exacerbate my own shortcomings, it still has value.</strong></p>
<p>I\u2019m back on now because of that. It\u2019s a valuable networking tool and at least a partially meaningful method of interpersonal communication. I\u2019m at a point in life right now where that makes Facebook important enough to keep it around, at least for now.</p>
<p>I\u2019m trying not to check it as much, not to think about it as much. I\u2019m trying to do the slightly more difficult thing and speak to the people in front of me instead of wondering what distraction the device in my pocket might provide. I\u2019m trying, in short, to be a better person, and to not let the promise of blissful digital engagement affect my thought patterns or my mental state as much.</p>
<p>A break from Facebook was very good for me. I encourage everybody to try it, at least once, and at least for a short time.</p>
<p>Even if it\u2019s just to find out what you do without it in the bathroom.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/8-student-portfolio-mistakes-97ac2775.js
  var student_portfolio_mistakes_97ac2775_exports = {};
  __export(student_portfolio_mistakes_97ac2775_exports, {
    default: () => _8_student_portfolio_mistakes,
    metadata: () => metadata2
  });
  var metadata2, _8_student_portfolio_mistakes;
  var init_student_portfolio_mistakes_97ac2775 = __esm({
    ".svelte-kit/output/server/chunks/8-student-portfolio-mistakes-97ac2775.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      metadata2 = {
        "title": "8 Mistakes to Avoid in Your Student Design Portfolio",
        "date": "2015-08-20",
        "updated": "2021-01-19",
        "categories": ["design", "opinion"],
        "coverImage": "Negative-Space.png",
        "coverWidth": 4,
        "coverHeight": 3,
        "excerpt": "Consider this post a guide on how to avoid the most common mistakes young designers make when assembling their portfolios."
      };
      _8_student_portfolio_mistakes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>Let me start this off by saying that I do not claim to be an authoritative expert on the subject of graphic design. Sure, I know some things. I\u2019m technically a professional. But I also personally know at least a dozen people more qualified to write this list than I am. And I am going to express a few opinions with which they may disagree. So the following advice is mine, and it comes merely from my looking back at my own time as a graphic design student and the work it produced, with the benefit of a little bit of perspective and time. Hopefully it will be helpful in navigating you through the pitfalls I failed to avoid. (In other words, I can write this, because I\u2019ve personally made just about all of these mistakes myself.)</p>
<h2 id="${"8-skimping-on-cost"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#8-skimping-on-cost"}"><span class="${"icon icon-link"}"></span></a>8) Skimping on Cost</h2>
<p>It\u2019s obvious when you take shortcuts in design. Nowhere is it more apparent than your student design portfolio, the thing that should represent the absolute premium of all that you have to offer from your time in school.</p>
<p>By the time you\u2019re building your student design portfolio, you know that every aspect of a design communicates on a nonverbal, sometimes even unconscious level. The feel and weight of the paper, the type of ink, the way the pages are held together and the cover itself\u2014all of these things contribute to your overall impression as a designer.</p>
<p>So when you decide to buy a bargain bin book and have the pages printed at the cheapest place you can find, you\u2019re making a decision that communicates your priorities\u2014and coming off like you care more about a few dollars than giving the best possible presentation is not a good impression. How is a potential employer going to trust you with real, paid client work when you clearly cut corners on what is supposed to be the apex of your own work?</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Resourcefulness is a valuable quality to any employer, especially in design. Show that you can solve your own problems to make something impressive on a budget, and it will have at least as much of an impact as anything in the book\xA0itself.
`;
          }
        })}
<p>Now, I understand that not everybody has a lot of income to spend on their book. That\u2019s ok. The point isn\u2019t that you need to prove you spent money; the point is that you need to prove you <em>care</em>. While you shouldn\u2019t skimp on print quality, if you can\u2019t afford a premium book, show your creativity by making one of your own. Or find an innovative way to utilize the one that you can afford. Maybe there\u2019s a tactic to show your work effectively that\u2019s not a book at all. Brainstorm options to stand out on your budget. After all, that\u2019s what your career as a designer will be anyway: working within inflexible parameters to achieve an optimal solution.</p>
<p>Some of the more impressive student design portfolios I\u2019ve seen were hand-assembled by their designers. Another comes to mind that wasn\u2019t even a book at all, but mounted presentation boards stored in a cool little thrift store briefcase. Truth be told, I\u2019ve even shown my portfolio on a borrowed iPad\u2014which I don\u2019t necessarily recommend, but it demonstrates that you do have options.</p>
<p>Resourcefulness is a valuable quality to any employer, especially in design. Show that you can solve your own problems to make something impressive on a budget, and it will have at least as much of an impact as anything in the book itself.</p>
<h2 id="${"7-poor-image-resolution"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#7-poor-image-resolution"}"><span class="${"icon icon-link"}"></span></a>7) Poor Image Resolution</h2>
<p>This is such a simple problem that I\u2019m honestly surprised at the frequency with which I see it, but it keeps cropping up again and again. For whatever reason, graphic design students often try to push an image beyond its limits. Maybe it\u2019s because this practice is more common (and slightly less damaging) on the web. But in print, it never works.</p>
<p>Printed images should ideally be 300dpi or higher, <em>especially</em> in a student design portfolio. If the image you\u2019ve selected isn\u2019t 300dpi at the size you have it, either shrink it or find a new one.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Printed images should ideally be 300dpi or higher, <em>especially</em> in a student design portfolio. If the image you&#39;ve selected isn&#39;t 300dpi at the size you have it, either shrink it or find a new\xA0one.
`;
          }
        })}
<p>And by the way: one of the most glorious things about being a graphic design student is that your work is not bound by the same rules and laws that govern professional work. You can legally use virtually any image you can find as part of your design, provided you\u2019re using it for student work and you aren\u2019t taking credit for or profiting directly from it. So get on Google and adjust those image search parameters. Find something great. And <em>big</em>. And if you absolutely <em>must</em> use an image that\u2019s below 300dpi, figure out how to disguise it. Show some Photoshop skills. (Adding subtle grain can be an effective technique.) Not many things mar a design as noticeably and glaringly as visible pixels do.</p>
<p>And of course, it ought to go without saying that you should <em>never</em> stretch or squash an image outside its original ratio.</p>
<h2 id="${"6-too-much-content"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#6-too-much-content"}"><span class="${"icon icon-link"}"></span></a>6) Too Much Content</h2>
<p>Generally speaking, an interviewer probably has a pretty good idea of your talent level and style by the time you\u2019re through about five spreads (unless you\u2019ve completely back-loaded your book, which I wouldn\u2019t recommend). After that, if you\u2019re not going to start showing some unique items or throwing some curveballs, you\u2019re just repeating yourself. Less is more in pretty much every way in portfolio design.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Ideally, every one of the pieces in your student design portfolio should show off something\u2014a skill, a style, a type of work, or a thought process\u2014that no other piece\xA0does.
`;
          }
        })}
<p>While there\u2019s no magic number for the total projects that you should show, I\u2019d say as a general rule of thumb, cap it at 10\u201312. And probably don\u2019t go below about six unless those six are either expansive brandscapes with multiple pieces each or exceptionally high quality. (But these are just my opinions; if telling your story requires you to break these limits, by all means do.)</p>
<p>Ideally, every one of the pieces in your student design portfolio should show off something\u2014a skill, a style, a type of work, or a thought process\u2014that no other piece does. Don\u2019t include two posters if one will do. Don\u2019t include fifteen projects just because you have that many. And <em>never</em> put a project in your book just because you can\u2019t decide what to cut.</p>
<p><strong>Design is decision-making.</strong> If you can\u2019t make the decision on what to even include in your book for an interview, what does that say of your ability to make the decisions the job itself will require of you?</p>
<h2 id="${"5-not-knowing-your-strengths"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#5-not-knowing-your-strengths"}"><span class="${"icon icon-link"}"></span></a>5) Not Knowing Your Strengths</h2>
<p>You probably did at least a few illustration or art or photography projects in school, and it can be very tempting to use those projects to pad your book\u2014especially if they turned out well. But be cautious, and objective. As a graphic designer, don\u2019t try to be an illustrator unless you can show how your illustration skills can benefit a potential employer or client in at least somewhat realistic projects. That gritty portrait of Brad Pitt in Fight Club may be really cool, but it\u2019s extremely unlikely that any entry-level job in the real world would call for a similar piece of illustration. Show that stuff online, where its audience is, not in your book.</p>
<p>It\u2019s also a good idea to look around at the other similar work out there and ask yourself whether your abilities stack up or offer something unique compared to to the field. Any designer should be able to use Photoshop and the pen tool adequately. If you\u2019re showing illustration, make sure you\u2019re offering something more than that, and in a plausible context.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `If you\u2019re applying for a graphic design job, showcase your skills as they relate to graphic\xA0design.
`;
          }
        })}
<p>Likewise, you may be a killer photographer, but this isn\u2019t a photo book; it\u2019s your portfolio. Use your photography in a way that shows off your skills behind the lens <em>and</em> in the context of a well-designed layout.</p>
<p>And of course wedding invitations are by definition generally very visually appealing, but be sure that if you include some that you made in your book, they demonstrate your own abilities as a graphic designer and not just your skill at Pinterest.</p>
<p><strong>I\u2019m not saying you shouldn\u2019t show extracurricular skills</strong>, or that you shouldn\u2019t let your personal style show through. By all means, do! The more tools in your toolbox, the more valuable you are as a potential employee, and your style is one of the things that may set you apart from other candidates. But utilize your photography, illustration and whatever other abilities in a way that clearly demonstrates your versatility and usefulness as a designer\u2014not just your technical prowess in a non-design field.</p>
<p>In short, if you\u2019re applying for a graphic design job, showcase your skills as they relate to graphic design.</p>
<h2 id="${"4-not-proofreading"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#4-not-proofreading"}"><span class="${"icon icon-link"}"></span></a>4) Not Proofreading</h2>
<p>I cannot overemphasize this point: spellcheck is not good enough.</p>
<p>Not by a long shot, and for many, many reasons. Yes, you should still use it. But you shouldn\u2019t rely on it to do the whole job for you. Spellcheck is a good friend who will let you down at the worst possible moment.</p>
<p>For one thing, spellcheck doesn\u2019t pick up words spelled correctly but in the wrong context. (My favorite example of the inadequacy of spellcheck: it doesn\u2019t know the difference between <em>faces</em> and <em>feces</em>.)</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Spellcheck is a good friend who will let you down at the worst possible\xA0moment.
`;
          }
        })}
<p>For another, spellcheck might not recognize common punctuation errors, or distinguish between homonyms like \u201Cthere,\u201D \u201Ctheir\u201D and \u201Cthey\u2019re.\u201D (I was once at a senior exhibition where a student had used the wrong spelling of the same word three consecutive times, all in huge display type. The design was good, but the perception of the work as sloppy was hard to overcome.)</p>
<p>For a third, you\u2019ve likely got some words that spellcheck won\u2019t recognize somewhere in your book. (For example: names of typefaces, made-up companies, real companies with names that are spelled strangely, and proper nouns, including your own name.)</p>
<p>And for a fourth and final reason to distrust spellcheck: you\u2019ve almost certainly got some text somewhere in your book that\u2019s non-editable. This includes text that\u2019s been converted to outlines, rasterized, or simply hand-drawn\u2014all of which render spellcheck completely and utterly useless.</p>
<h2 id="${"3-too-many-standard-typefaces-especially-helvetica"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#3-too-many-standard-typefaces-especially-helvetica"}"><span class="${"icon icon-link"}"></span></a>3) Too Many Standard Typefaces (Especially Helvetica)</h2>
<p>Stop, stop! Put down your pitchforks. There\u2019s nothing wrong with Helvetica. It is a great typeface and well-deserving of its revered reputation. Let us all give thanks to our benevolent Swiss gods for Helvetica, our mighty salvation. Now go home, angry designer mob.</p>
<p>I\u2019m not saying Helvetica is a bad typeface. It isn\u2019t at all. But I\u2019d consider it progress if fewer students relied on it so heavily.</p>
<p>Students (and many professionals) are naturally drawn to Helvetica for its myriad positive attributes: neutrality, versatility, high quality and readability. But somewhat ironically, this just exacerbates Helvetica\u2019s one glaring weakness: its ubiquity.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `The point of your portfolio is to make you stand out, and it&#39;s hard to stand out as a student using the world&#39;s most generic\xA0typeface.
`;
          }
        })}
<p>Admittedly, the fact that Helvetica is everywhere is not Helvetica\u2019s fault, and could even be used as an argument for its merit. But no matter how good your work is, it still has to be <em>yours</em>, and Helvetica looks like the work of generations of other designers who were using it way before you or I ever heard of it.</p>
<p>The point of your portfolio is to make you stand out, and it\u2019s hard to stand out as a student using the world\u2019s most generic typeface.</p>
<p>However, don\u2019t make the mistake of thinking that this advice is strictly tied to one specific family or font. Helvetica is only the most notorious example. Too many projects that might otherwise look fresh and outstanding instead may feel homogenous and ordinary when overworked type families are employed. Just like Helvetica, there\u2019s nothing wrong with Futura, Myriad, Bodoni or Gill Sans (ok, maybe there\u2019s something wrong with Gill Sans. If you ask me, anyway). But again, the point of your portfolio is to show how you and your work are different than anyone else and their work\u2014how <em>you personally</em> make a project unique with your own individual touch. And that\u2019s tough to do when all your typefaces are also in every other student portfolio out there.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Too many projects that might otherwise look fresh and outstanding instead may feel homogenous and ordinary when overworked type families are\xA0employed.
`;
          }
        })}
<p>There\u2019s another reason to avoid common fonts, and that\u2019s the impression that you risk. Design is all about the choices you make. When you employ standard typefaces, you need to be very careful that the decision is to use an old classic because it\u2019s the best fit for the job\u2014and not the decision to avoid searching beyond the easy-to-reach defaults. Choosing standard fonts too frequently or in questionable contexts can make it look like you\u2019re clinging to your comfort zone.</p>
<p>Instead of relying solely on the classics, I strongly encourage students to spend some quality time browsing font websites, especially those that offer bundles and sales, and make peace with the fact that you\u2019re probably going to have to spend some money on typefaces sooner or later. But even without a budget, services like <a href="${"https://www.google.com/fonts"}" rel="${"nofollow"}">Google Fonts</a> and <a href="${"https://typekit.com/fonts"}" rel="${"nofollow"}">Adobe Typekit</a> offer you access to a fantastic library of type families at no cost. You should at the very least familiarize yourself with those two services and the wide variety of excellent typefaces they offer. (Typekit has some hiccups when used to transfer projects, but that\u2019s a subject for another post.)</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Choosing standard fonts too frequently or in questionable contexts can make it look like you&#39;re clinging to your comfort\xA0zone.
`;
          }
        })}
<p>And just to clarify: I\u2019m not saying you should always use wacky, gaudy, bold or even edgy display fonts. I\u2019m just saying, don\u2019t be too ordinary. There are plenty of sans serifs out there more than capable of doing the job just as well as or better than Helvetica. Give your work a little personality. Take risks.</p>
<p>Of course, it should go without saying that you probably shouldn\u2019t be utilizing the likes of Times, Arial, Calibri, Impact and Brush Script in your book. And if by the point that you\u2019re building your portfolio I still need to tell you to avoid Comic Sans and Papyrus, you might want to either start paying attention in class or asking your school about a refund.</p>
<h2 id="${"2-using-an-unnecessarily-large-book"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#2-using-an-unnecessarily-large-book"}"><span class="${"icon icon-link"}"></span></a>2) Using an Unnecessarily Large Book</h2>
<p>The book <em><a href="${"http://www.underconsideration.com/flaunt/"}" rel="${"nofollow"}">Flaunt</a></em> is a fantastic resource for anybody building a portfolio, packed with valuable advice and inspiration. It was in that book that I first read the following adage: the experience level of a designer is inversely proportional to the size of their book. (\u201CSize\u201D here referring to physical dimensions, not how many projects are included.)</p>
<p>It seems that students tend to find large portfolios alluring, where pros tend to condense more. I understand the former way of thinking because I was there not that long ago, and chose the size of my first book based on the largest project I had at the time. Nobody wants to shrink their beautiful posters down any more than they have to. Why did I agonize over every last pixel if I can\u2019t show them all at full size?</p>
<p>But you should anyway, for a few reasons. First: remember that you have to lug that book around, and if you wind up having your interview at a tiny table in a coffee shop, it will help if you\u2019re not blocking the aisle with massive pages. Plus, if your interviewer wants to pick up your book and thumb through it, a large book makes that unnecessarily difficult.</p>
<p>Plus, it can be to your benefit; any minor imperfections in your work are more easily hidden at letter size and below than at tabloid and above.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `You ought to be demonstrating that you are not limited by the parameters you\u2019re given, but that you flourish in whatever space is available. That impression is easily lost in a portfolio too big to even fit on your interviewer\u2019s\xA0desk.
`;
          }
        })}
<p>Logistical reasoning aside, though, there\u2019s another, arguably more important reason to consider a smaller book: designers very rarely get blank canvases. Designers get parameters, budgets and restrictions. We live in a world of letterheads that require logos and contact info, advertisements stuffed full of copy, and tiny screens packed with headers and menus. We are forced to make the most of very little. Therefore, you ought to be demonstrating that you are not limited by the parameters you\u2019re given, but that you flourish in whatever space is available; that you don\u2019t need a lot of space to make your content look good. That impression is easily lost in a portfolio too big to even fit on your interviewer\u2019s desk.</p>
<h2 id="${"1-not-using-enough-negative-space"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#1-not-using-enough-negative-space"}"><span class="${"icon icon-link"}"></span></a>1) Not Using Enough Negative Space</h2>
<p>It\u2019s easy to fall into the trap of believing that your work must be as large as possible. (See previous point.) Or, for that matter, that you need to include multiple angles of every piece you\u2019ve photographed, as well as a view of each and every spread contained within all of the booklets you\u2019ve assembled.</p>
<p>I understand; you want people to be able to see the details. How will anybody else know that every point, pixel and period is in its proper place if you don\u2019t stretch your available space to its limit?</p>
<p>Don\u2019t think of your portfolio as a collection of projects; it\u2019s a design project in itself.</p>
<p>It should only include what makes you look great. Most interviewers don\u2019t want or need to see every single spread or be able to read every paragraph of body copy (though they will read some\u2014see #4). Decorating a spread just to fill up the space is the visual equivalent of commenting on the weather to fill an awkward silence: it\u2019s meaningless noise.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Don&#39;t think of your portfolio as a collection of projects; it&#39;s a design project in\xA0itself.
`;
          }
        })}
<p>Think of every piece in your book like a movie. Your job is to show the preview. Give enough to get somebody caught up in the world, aware of the story and curious to see more\u2014but not so much they need a soda and popcorn. Make it the best, most intriguing preview you can, but not the whole film. Obviously, when you have a wide brandscape with many touchpoints, it can pay to show them. But consider spreading it out, and not cramming them all on the same page or two.</p>
<p>And when you start cutting things, don\u2019t fill their space back up. Negative space lures attention. It focuses the eye. It is poise made visual. It\u2019s courageous. Negative space is a conscious and deliberate decision, and one that is not always easy to make. So not only does it make your design work look good, it makes <em>you</em> look good.</p>
<p>Trust me: I\u2019ve seen tons of student graphic design portfolios without enough negative space, but I can\u2019t think of a single one that I thought had too much. Literally not one. Some of the best I\u2019ve seen used well under half of the space on many of their pages.</p>
<p>So at the very least, employ a healthy margin. And at most, cut deliberately and harshly, seeing how <em>little</em> you can actually put on the pages of your portfolio. There is, of course, a point of diminishing returns. But you\u2019ll be surprised how far you\u2019ll go before you hit it.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/a-new-headless-site-with-gridsome-c6997bd9.js
  var a_new_headless_site_with_gridsome_c6997bd9_exports = {};
  __export(a_new_headless_site_with_gridsome_c6997bd9_exports, {
    default: () => A_new_headless_site_with_gridsome,
    metadata: () => metadata3
  });
  var css34, Highlight, metadata3, A_new_headless_site_with_gridsome;
  var init_a_new_headless_site_with_gridsome_c6997bd9 = __esm({
    ".svelte-kit/output/server/chunks/a-new-headless-site-with-gridsome-c6997bd9.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      init_SideNote_5c625ecb();
      css34 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.highlight.svelte-1fn0ddn{font-size:1.3em;line-height:1.5;margin:0 0 var(--halfNote);font-weight:normal;font-style:normal;font-family:var(--headingFont)}',
        map: null
      };
      Highlight = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        $$result.css.add(css34);
        return `<div class="${"highlight svelte-1fn0ddn"}">${slots.default ? slots.default({}) : ``}
</div>`;
      });
      metadata3 = {
        "title": "A New Headless Site with Gridsome",
        "date": "2020-06-06",
        "updated": "2021-01-19",
        "categories": ["javascript", "web", "vue", "wordpress"],
        "coverImage": "wp-plus-gridsome.png",
        "coverWidth": 160,
        "coverHeight": 89,
        "excerpt": "A lengthy write-up diving into what headless means, its advantages and disadvantages, some of the techniques and gotchas involved, and, finally, the new design of this site specifically."
      };
      A_new_headless_site_with_gridsome = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `This post is a bit outdated; this website still looks and works mostly the same, but it&#39;s no longer headless WordPress <em>or</em> Gridsome; it&#39;s <a href="${"https://rickyjanuari.com/blog/converting-from-gridsome-to-sveltekit"}">SvelteKit</a>. So a few of the smaller features described here, like the search bar, aren&#39;t in place anymore.
`;
          }
        })}
<p>There\u2019s a joke (the kind that\u2019s made less because it\u2019s funny and more because it\u2019s true) about developers and designers spending more time redesigning their website than actually <em>doing</em> something with it. Right off the bat, I\u2019ll go ahead and admit I fit that clich\xE9; I\u2019ve had some version of this blog live since 2014, and the number of redesigns I\u2019ve done is uncomfortably close to the number of <em>actual blog posts</em> I\u2019ve written in that same time.</p>
<p>In fact, at the time of this writing, the post I wrote about the last redesign\u2014in early 2018\u2014is still in the top 5 most recent posts on the site. (Yikes.)</p>
<p>This one, though, is at least more than a fresh layer of CSS or a new WordPress theme. This one is taking an entirely new approach: going headless with the Jamstack.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `This is going to be a long post, since I\u2019ll go into depth on what headless means, its advantages and disadvantages, some of the techniques involved, and, finally, the design of this site specifically.
`;
          }
        })}
<h2 id="${"what-do-headless-and-jamstack-mean"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-do-headless-and-jamstack-mean"}"><span class="${"icon icon-link"}"></span></a>What do \u201Cheadless\u201D and \u201CJamstack\u201D mean?</h2>
<p>Let\u2019s take a moment to break down those terms.</p>
<p><strong>\u201CHeadless\u201D</strong> WordPress is a bit of a tricky concept to understand\u2014I think in part because \u201Cheadless\u201D isn\u2019t a particularly good metaphor. But to better understand what I mean, let\u2019s talk about what headless WordPress <em>isn\u2019t</em>.</p>
<p>Ordinarily, WordPress is responsible for both the admin side of the site\u2014where you log in and make changes\u2014as well as displaying the public front-end of the site, i.e., the part that visitors actually see and interact with. It\u2019s a full package; WordPress handles both the <em>creation</em> of your content, and <em>how that content is displayed</em> to users, via the theme generally, and its PHP template files interacting with the MySQL database specifically.</p>
<p>In other words: by default, WordPress just takes care of everything.</p>
<p>If that\u2019s, uh, <em>headful</em> WordPress (see what I mean? It\u2019s a bad term), then <em>headless</em> separates the admin and the front-end, leaving WordPress to handle the back-end content creation and site administration, while freeing the front-end presentation to be handled elsewhere, independently.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Headless separates the admin and the front-end, leaving WordPress to handle the back-end content creation and site administration, while freeing the front-end to be handled elsewhere,\xA0independently.
`;
          }
        })}
<p>So a headless WordPress site will still use the WP backend as usual for all the content management, post creation, data storage, etc. From the admin side of the site, nothing changes, which is probably good news for your clients, as well as anyone who just wants to be able to keep using the admin interface they\u2019re already accustomed to.</p>
<p>But instead of having the site\u2019s theme display your pages, posts, etc., a headless site can use virtually anything, thanks to the WordPress REST API.</p>
<p>If you aren\u2019t particularly familiar with the world of modern front-end development outside WordPress, you might not immediately see the advantages, but there are several to be had. Not being locked into PHP as your templating language means you\u2019re instead able to use powerful, modern frameworks like <a href="${"http://vuejs.org"}" rel="${"nofollow"}">Vue</a>, <a href="${"https://svelte.dev/"}" rel="${"nofollow"}">Svelte</a>, <a href="${"https://www.11ty.dev/"}" rel="${"nofollow"}">Eleventy</a>, or\u2014in the case of this site\u2014<a href="${"http://gridsome.org"}" rel="${"nofollow"}">Gridsome</a>, with all the goodies that come along.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `But instead of having the site\u2019s theme display your pages, posts, etc., a headless site can use virtually anything, thanks to the WordPress REST\xA0API.
`;
          }
        })}
<p>This goes hand-in-hand with <strong>Jamstack</strong>, and is actually a decent example of it. The JAM stands for JavaScript, API and Markup\u2014though it\u2019s more of a loose description of <em>typical</em> features of a site rather than a literal definition or group of technologies, so don\u2019t get too hung up on those three things. Jamstack sites always use JavaScript in some fashion, but they don\u2019t all use APIs, necessarily.</p>
<p>The term \u201CJamstack\u201D was coined by <a href="${"http://netlify.com"}" rel="${"nofollow"}">Netlify</a> (which, by the way, is where the front-end of this site is deployed). When people say they are launching or deploying a site \u201Con the Jamstack,\u201D that usually means they\u2019re using a host like Netlify or <a href="${"https://vercel.com/"}" rel="${"nofollow"}">Vercel</a> to compile or \u201Cbuild\u201D their site directly from a git repo, and then host it on a global CDN.</p>
<p>The advantages provided by a headless approach generally boil down to: speed; security; and developer experience.</p>
<h3 id="${"speed"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#speed"}"><span class="${"icon icon-link"}"></span></a>Speed</h3>
<p>As you may know if you\u2019ve ever worked with a very old and/or large WordPress site, waiting for a large page or list of content to load can be very slow, because you\u2019re relying on PHP to both query the MySQL database for the content, <em>and</em> then run the (in)famous WordPress loop to render it.</p>
<p>Using the WP API is typically faster, because PHP isn\u2019t really rendering anything; the site is just sending text data in the form of JSON. And if you use a JavaScript-powered static site generator like Gridsome or Eleventy or Gatsby, that content can even be pre-rendered\u2014building out a full static HTML site from the result of querying the WordPress database, reducing visitors\u2019 wait time to practically nothing.</p>
<p>Using a static site generator (SSG) also means you can deploy all of your site\u2019s content on a global CDN, so it\u2019s immediately available and speedy anywhere around the globe.</p>
<h3 id="${"security"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#security"}"><span class="${"icon icon-link"}"></span></a>Security</h3>
<p>The security of adding a layer between your front-end and your database (while, in my opinion, not one of the bigger selling points of the Jamstack) is not to be overlooked. When your front-end doesn\u2019t offer any direct access to the database\u2014and instead, is just a collection of immutable files on a CDN server\u2014that means the methods of attacking your site are minimized. No SQL injections, and you offer no immediate benefit if somebody <em>does</em> manage to hack the DB.</p>
<p>With a headless approach, you also have the option of locking down your original WordPress install in ways you might not have been able to when you relied on WP to serve the front-end of your site.</p>
<p>That said, security probably shouldn\u2019t be your biggest reason to move to the Jamstack, since it\u2019s a tangential benefit, and since it won\u2019t solve bad WordPress security to begin with.</p>
<h3 id="${"developer-experience"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#developer-experience"}"><span class="${"icon icon-link"}"></span></a>Developer Experience</h3>
<p>Finally, working with modern frameworks like those mentioned above (though there are many others) is often more enjoyable for developers, as it allows you to introduce more modern tooling into your workflow, both in how the code is built and how it\u2019s deployed. (Typically, Jamstack sites are set up to deploy directly from a git repo, so that every time you push to the repo, the site deploys the code automatically, saving you from ever touching something like FTP.)</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Naturally, developer experience should be the least of our concerns; our users\u2019 experience with the site is more important than ours. But if we\u2019re being responsible with our choices, developer experience should ideally help translate into better user experience, too.
`;
          }
        })}
<h2 id="${"headless-wordpress-drawbacks"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#headless-wordpress-drawbacks"}"><span class="${"icon icon-link"}"></span></a>Headless WordPress drawbacks</h2>
<p>You might be wondering at this point if there are disadvantages to going headless. And the answer, in a word, is: yes. There are distinct and often significant tradeoffs for the speed, security and dev ergonomics that come with headless architecture.</p>
<h3 id="${"less-control-over-appearance-from-wordpress"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#less-control-over-appearance-from-wordpress"}"><span class="${"icon icon-link"}"></span></a>Less control over appearance from WordPress</h3>
<p>By far the biggest drawback, in the case of WordPress, is that your site\u2019s theme\u2014as well as pretty much any plugin that does anything on the front-end of the site\u2014will be rendered effectively useless, at least as far as its user-facing functionality. With headless, since your front-end isn\u2019t rendered by your theme\u2019s PHP template files anymore, plugins that change the appearance or layout of the site will lose their effect.</p>
<p>Actually, the drawback isn\u2019t limited to plugins and themes; core WordPress features, like the customizer, widgets, and nav menus (basically, the whole Appearance tab in admin) will be rendered powerless by a headless setup.</p>
<h3 id="${"greater-hosting-needs"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#greater-hosting-needs"}"><span class="${"icon icon-link"}"></span></a>Greater hosting needs</h3>
<p>Another drawback is that you\u2019re essentially hosting the site twice. Like I mentioned, I have the front-end of this site on Netlify, which has a free tier, so I\u2019m at liberty to continue using whatever WordPress hosting I want without it costing me any more. (At least, not unless this blog really blows up for some reason, which seems very unlikely.) But that might not be the case for you, depending on your site\u2019s traffic and needs. And then again, hosting isn\u2019t costing me any <em>less</em>, either.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `With headless, since your front-end isn\u2019t rendered by your theme\u2019s PHP template files anymore, plugins that change the appearance or layout of the site will lose their\xA0effect.
`;
          }
        })}
<p>And if you <em>are</em> pre-rendering content with an SSG (as opposed to querying data from your WP site\u2019s API on the fly), you\u2019ll need to redeploy the site each time content changes. (There are <a href="${"https://wordpress.org/plugins/search/Netlify/"}" rel="${"nofollow"}">plugins</a> to solve that particular pain point, though.)</p>
<h3 id="${"tricky-dns-setup"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#tricky-dns-setup"}"><span class="${"icon icon-link"}"></span></a>Tricky DNS setup</h3>
<p>Something else to keep in mind: DNS is going to require some careful, likely much more complex setup with headless (more on that later), and unless you do some fancy stuff with your theme and DNS, post previews won\u2019t really work anymore.</p>
<h3 id="${"fewer-hosting-features-are-relevant"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#fewer-hosting-features-are-relevant"}"><span class="${"icon icon-link"}"></span></a>Fewer hosting features are relevant</h3>
<p>You might also be giving up some luxuries provided by your host, such as staging sites, for example. (You can still use staging, of course, but what you see there won\u2019t match what you\u2019ll see on the live headless site unless you do a lot of extra config.)</p>
<p>Those tradeoffs probably sound very scary, and for a lot of WordPress users, they make moving to headless a non-starter. That\u2019s ok. Every site has different needs, and if sticking with the WordPress you\u2019ve come to know and love sounds like your best path forward, rest assured you\u2019re not alone and you will not be unsupported in that choice.</p>
<h2 id="${"why-i-chose-headless"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#why-i-chose-headless"}"><span class="${"icon icon-link"}"></span></a>Why I chose headless</h2>
<p>I\u2019ll be honest: this is my personal site, and as such, I treat it a bit like a playground to try new things and generally do whatever I feel like, development-wise.</p>
<p>I really enjoyed this post from Ethan Marcotte, \u201D<a href="${"https://ethanmarcotte.com/wrote/let-a-website-be-a-worry-stone/"}" rel="${"nofollow"}">Let a website be a worry stone</a>,\u201D which (to crudely summarize) advocates for developers to spend less time chasing perfection in their sites, and instead, treat them like a \u201Cworry stone,\u201D i.e., as something to rub the rough edges off of bit by bit over time (and as a necessary and healthy distraction when one is needed).</p>
<p>That\u2019s part of what made me go all-in on Gridsome. I\u2019d been messing around with it (and its <a href="${"https://gridsome.org/starters/default-word-press-starter/"}" rel="${"nofollow"}">WordPress starter</a>) for close to a year when I read that post and made the decision to dive in.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Gridsome\u2019s blazing speed and powerful, straightforward features sold me. It makes building fast sites both easy and\xA0enjoyable.
`;
          }
        })}
<p>I\u2019m a huge fan of Vue, so Gridsome being a Vue-based framework was a big selling point for me, even though Gridsome itself is relatively immature, at only version 0.7 at the time of writing (which I\u2019ll admit led to some frustrations in the development process). I\u2019ve seen enough sites powered by Gridsome, and enough interest in the community, to abandon worry, however, and jump in anyway. But originally, Gridsome\u2019s blazing speed and powerful, straightforward features sold me. It makes building fast sites both easy and enjoyable.</p>
<p>Gridsome doesn\u2019t <em>need</em> a back-end like WordPress, though, and I toyed with the idea of moving away from WP altogether and making my site fully static, writing new posts in Markdown rather than in the WordPress editor (particularly given my recent frustrations with WordPress\u2019s Gutenberg editor). There\u2019s a strong appeal to just having <em>everything</em> live together in the same repo, and giving up on a database altogether. (Wes Bos and Scott Tolinski have some good podcast content on this in the episodes of <a href="${"https://syntax.fm/"}" rel="${"nofollow"}">Syntax FM</a> covering their personal blogs.)</p>
<p>Eventually, however, I decided it was worth keeping WordPress around for a while, for a few reasons.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `The block editor, it turns out, is also the best link between a headless back-end and its decoupled front-end.
`;
          }
        })}
<p>One is: <strong>I still want to see where Gutenberg goes</strong>. The block editor is still a <em>long</em> way from where it needs to be (and I still tweet out my frustrations with it from time to time), but it\u2019s also very exciting.</p>
<p>The block editor, it turns out, is also the best link between a headless back-end and its decoupled front-end.</p>
<p>I came across a plugin called <a href="${"https://wordpress.org/plugins/block-lab/"}" rel="${"nofollow"}">Block Lab</a>, which I highly recommend whether you\u2019re using headless or not. Block Lab beautifully simplifies the process of creating basic custom blocks for use in the Gutenberg editor, and the accompanying PHP mini-template files (component files, I suppose you might call them) which render the content of those custom blocks.</p>
<p>I thought this was amazingly handy given the editor\u2019s lack of some types of blocks that I wanted to create, and it was when I began putting this plugin to use I realized that <em>custom blocks will be custom on the headless front-end, too</em>.</p>
<p>That is: when custom Block Lab blocks are used in page or post content, all of their custom template code comes with them, even through the WordPress API.</p>
<p>That\u2019s very cool, because it means I can still create custom blocks without really needing to build them twice; all I do is put a class in the PHP template file for the block, and target that class with CSS on my headless front-end.</p>
<p>And as a <em>really</em> cool feature: Block Lab checks your theme for a <code>blocks.css</code> file which, if present, loads in the editor, too! So you can style your editing experience as easily as the front-end experience, if you so choose. Realizing that going headless didn\u2019t mean giving up the power of a fully customizable block editor was a big persuasion in sticking with WordPress.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Realizing that going headless didn\u2019t mean giving up the power of a fully customizable block editor was a big persuasion in sticking with\xA0WordPress.
`;
          }
        })}
<p>I also mentioned earlier that there are plugins available to rebuild your site on Netlify every time your WordPress content changes (I\u2019m personally using <a href="${"https://wordpress.org/plugins/deploy-netlifypress/"}" rel="${"nofollow"}">NetlifyPress</a> at the moment), which makes the transition easier, too. Knowing that I can keep my editing process fully in WordPress, without the need to open a completely separate dashboard any time I want to publish or update content, makes things a lot easier.</p>
<p>Another reason, though, is that even though the site is headless, the WordPress REST API can still be live and fully available.</p>
<p>With a typical Jamstack site, dynamic things such as search forms\u2014any type of form, really\u2014can be problematic, as you don\u2019t typically have a database to query (though you could). Typically, when using a static site generator, the best you could do would be to pre-generate category or tag pages, or try to filter content client-side. But either of those approaches still fall short of a genuine search experience.</p>
<p>Keeping my WordPress site live means that I can have the best of both worlds in this regard; I can pre-generate all my content, and I can also allow custom on-the-fly searches that\u2019ll be backed by the WordPress API.</p>
<p>In addition, I don\u2019t need to worry about porting my WordPress site\u2019s RSS feed; I can just point the <code>/feed</code> URL back to the original WordPress site and keep using the same one I always have.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Keeping my WordPress site live means that I can have the best of both worlds in this regard; I can pre-generate all my content, and I can also allow custom on-the-fly searches that\u2019ll be backed by the WordPress\xA0API.
`;
          }
        })}
<p>All of this flexibility is actually what sold me on sticking with a WordPress back-end, rather than going fully static. I knew that if I couldn\u2019t get a good form solution going on the Jamstack, I could always just use DNS to point a page back to WordPress and slap a <a href="${"https://ninjaforms.com/"}" rel="${"nofollow"}">Ninja Form</a> on it, the user being none the wiser. (As it turns out, Netlify <em>does</em> have a rather nifty forms solution, but I like knowing that I can fall back to WordPress for anything I\u2019m not finding or not comfortable with on the Jamstack.)</p>
<h2 id="${"the-new-site"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#the-new-site"}"><span class="${"icon icon-link"}"></span></a>The new site</h2>
<p>I\u2019ve done <em>so</em> much talking about the tech behind the site I haven\u2019t even mentioned the site itself!</p>
<p>Obviously, I liked my old brand (I designed it, after all), but I felt it was maybe aging a little\u2014not necessarily in appearance (though that, too), but more just in terms of reflecting and expressing who and where I am.</p>
<p>It sounds silly, but in late 2017/early 2018 when I was launching the last site, I was in a very, very different place in my life and in my career. (I was neither a dad nor a full-time developer at the time, as the main examples.) The old look was fine, but it didn\u2019t feel like it represented who I am as well as it could anymore.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `The old look was fine, but it didn\u2019t feel like it represented who I am as well as it could\xA0anymore.
`;
          }
        })}
<p>Naturally, being a designer and a font hoarder, I spent days scouring my library, comparing typefaces and pairings before eventually settling on <em>Pensum Display Basic</em> and <em>Averta Standard</em> as the new typefaces of choice (along with <em>MonoLisa</em> as the font used for code). You can see them all and try them out on the <a href="${"/uses"}">/uses</a> page.</p>
<p>One of the uses for (at least some of) those fonts: code and preformatted code blocks. I anticipate including blocks of code in more of my blog posts going forward, so I thought I should style those blocks up appropriately. This is done with <a href="${"https://prismjs.com/#supported-languages"}" rel="${"nofollow"}">Prism</a>, a lightweight and customizable JavaScript library for code highlighting. I\u2019ve set it up to mirror my <em>actual</em> VS Code preferences.</p>
<p>Want to get super meta? Here\u2019s what a code block looks like on this new site, along with some of the CSS rendering it:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token selector">pre[class*='language-']</span> <span class="token punctuation">&#123;</span>
	<span class="token property">padding</span><span class="token punctuation">:</span> 4rem 1rem 1.5rem<span class="token punctuation">;</span>
	<span class="token property">margin</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--halfNote<span class="token punctuation">)</span> 0<span class="token punctuation">;</span>
	<span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
	<span class="token property">border-radius</span><span class="token punctuation">:</span> 0.3em<span class="token punctuation">;</span>
	<span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">pre.language-css:before</span> <span class="token punctuation">&#123;</span>
	<span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'CSS:'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `This site may load up to six fonts on a page, which is admittedly quite a few by web standards. I didn\u2019t want to compromise on the design, though, so I used other means to mitigate the performance impact, including subsetting each font, conditional loading, and setting font-display: swap to avoid invisible text.
`;
          }
        })}
<p>This change in fonts also necessitated a redesign of my personal logo, since the old one wouldn\u2019t have fit with the new look and feel.</p>
<p>I\u2019ll be honest: every time I create a new version of my logo, I feel less and less pressure to make it \u201Csomething,\u201D and instead just go with what feels right to me. I suppose you could view this either as atrophy or maturation of my design skills; I\u2019ll let you be the judge of that. But in any case, this logo is a little bit of a remix of the last one, but doesn\u2019t try quite so hard to wink at you (at least, not until you hover on it in the site header).</p>
<div style="${"padding: 2.5rem; background: var(--white)"}"><img src="${"/images/post_images/Full-Logo-2018.svg"}" alt="${"The 2018 version of the logo, in Amsi Pro Ultra"}" style="${"margin-bottom: 4rem"}">
  <img src="${"/images/post_images/2020-logo-final.svg"}" alt="${"The newer 2020 version of the logo, in Pensum Display Basic Bold"}"></div>
<p>As a nice side effect, the old favicon uses two pairs of brackets, where the new one uses only one, which makes it easy to distinguish between the secondary back-end (where I didn\u2019t bother updating the favicon) and the primary front-end at a glance in my browser tabs.</p>
<p>For the projects, I actually <em>did</em> decide to use Markdown files. Each project, on the \u201Cback end,\u201D is a <code>.md</code> file in my repo, with frontmatter for the title, category, etc., and the content in the form of Markdown. This lets me do some fun things with filtering, sorting, and templates to view the projects, and also allows me to play around with more of Gridsome\u2019s features, dipping my toes in the water of what moving to a fully static site might look like.</p>
<p>Speaking of fun things: I tried to put something interesting (interesting for me to build, at least, if not for visitors to look at) throughout the site. There\u2019s the aforementioned font tester on the <a href="${"/uses"}">/uses</a> page, the search feature on the <a href="${"/blog"}">/blog</a> page, and also, a very pointless and highly subjective chart of my professional skills on the about page. (There\u2019s also a bit of cheekiness to be found in the footer.)</p>
<p>On the topic of visual interest: the new site generates a bit extra using a couple of custom editor blocks; <strong>Callouts</strong> (which work a lot like pull quotes from a print publication), and <strong>Highlights</strong> (which serve to enlarge key pieces of text). Both make the posts a bit more skimmable (not a word; I\u2019m ok with it), and help convey its main points at a glance.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `When you\u2019re on a wide enough screen, the callouts appear with the article text conventionally wrapping around them (and hidden using ARIA to prevent screen readers repeating the text).
`;
          }
        })}
<p>You\u2019ve probably seen both of them in this article already, but not if you\u2019re reading this on mobile. Callouts <em>repeat</em> text, which is confusing when you\u2019ve only got a single column on a mobile screen, so I hide those at mobile widths. When you\u2019re on a wide enough screen, the callouts appear with the article text conventionally wrapping around them (and hidden using ARIA to prevent screen readers repeating the text).</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Highlight blocks aren&#39;t present on the site any longer (save for this page) since it didn&#39;t seem to make sense to have two different ways to call out text, and the styling conflicted a bit with headings. Instead I settled on a different solution to the &quot;repeat reading&quot; problem described above (I stopped caring), and combined both blocks into one.
`;
          }
        })}
<p>Highlights, in either case, only appear as larger text (no different to screen readers, since it didn\u2019t feel like emphasizing entire sentences or paragraphs was probably the right thing to do), though they\u2019re styled a bit differently on mobile, just to fit their surroundings better.</p>
${validate_component(Highlight, "Highlight").$$render($$result, {}, {}, {
          default: () => {
            return `Highlights take the text of the paragraph and\u2014what else\u2014highlight it, just like so. (How meta!)`;
          }
        })}
<p>The colorful square grid on the header and footer were really the heart of the visual aspect of the design, and they grew out of a <a href="${"https://codepen.io/collinsworth/pen/ZEGrMRQ"}" rel="${"nofollow"}">typographic experiment I made on CodePen</a>. I realized early on that the site was pretty stark and needed just a pop of color and interest, so I plagiarized myself and reused that colorful grid, and just for fun, made it re-render itself into a new random shape on every new page load.</p>
<p>Speaking of page loads: I experimented with many, many different animations and transitions on the site before finally settling on the advantages of the current setup. There was a time I had full in <em>and</em> out transitions for the pages, but that required some custom setup that eventually I decided was too much of a burden\u2014especially because the \u201Cout\u201D transition effectively slowed down the site.</p>
<p>The old sidebar is gone, but there\u2019s room to bring it back. I liked the offset layout.</p>
<p>Meanwhile, I enjoyed adding some new accessibility features. The \u201Cskip to main content\u201D link isn\u2019t new, but it\u2019s something I had to recreate, moving away from WordPress.</p>
<p>The site also features a settings menu (which you\u2019ll notice sticking around, pun intended, in the bottom left of the window). This allows you to toggle dark mode and reduced motion on the site. Both of these options detect and default to your own user preference if set (in the case of dark mode, using a CSS media query to avoid a flash of white), but both will override your OS/browser default if you manually toggle them, and store your preferred value in the browser\u2019s local storage. (Which, incidentally, is the full extent of the data this site collects and special permissions it might need.)</p>
<p>And finally, as far as benefits, I think the results speak for themselves. Here\u2019s the <strong>Lighthouse mobile test result</strong>:</p>
<p><img src="${"/images/post_images/Image-2020-06-05-at-11.47.11-AM-1024x391.png"}" alt="${"The mobile results for this site's homepage in a Lighthouse test, with perfect 100 scores in performance, accessibility, best practices and SEO."}"></p>
<p>And here\u2019s the <strong>GTMetrix</strong> score:</p>
<p><img src="${"/images/post_images/gtmetrix-1024x330.png"}" alt="${"GTMetrix gives this site a 100% on PageSpeed and a 98% from YSlow."}"></p>
<p>Incidentally, the 98% is because YSlow wants me to compress <em>everything</em>, but Netlify doesn\u2019t compress components that are already less than 1kb to begin with. So I\u2019d be trying to bloat a component just to make a speed test happy in order to get that last two percent, ironically.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `It may seem like my home page isn\u2019t a good benchmark, since it has virtually no content, and that\u2019s definitely fair. However, note that Gridsome does some front-loading behind the scenes, pre-loading data for all the routes linked on the homepage, so that they can be rendered as quickly as possible once the user clicks one.
`;
          }
        })}
<h2 id="${"what-to-watch-out-for-when-going-headless"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-to-watch-out-for-when-going-headless"}"><span class="${"icon icon-link"}"></span></a>What to watch out for when going headless</h2>
<p>If you decide to go headless with your own WordPress site, I have a few warnings to consider from my recent experience.</p>
<h3 id="${"dns-is-going-to-be-a-complex-challenge"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#dns-is-going-to-be-a-complex-challenge"}"><span class="${"icon icon-link"}"></span></a><strong>DNS is going to be a complex challenge.</strong></h3>
<p>With headless WordPress, you\u2019re effectively coordinating communication between two codependent sites; the WordPress back-end and the decoupled front-end. That requires a cautious and capable understanding of both DNS and WordPress\u2014specifically, the WordPress database.</p>
<p>In my case, there was a pretty considerable slew of DNS changes to be considered, and a search-and-replace of the original site\u2019s database.</p>
<p>Bear in mind also that <strong>the original site will need to remain at least partially available</strong> (at least, if you plan on deploying more than once), even if you point your main domain to the headless front-end, and crucially, even if you don\u2019t need API access on the original site.</p>
<p>In my case, I pointed <code>rickyjanuari.com</code> away from the WordPress site and to the headless front-end, but created a separate A record for <code>api.rickyjanuari.com</code>, and used that subdomain as the access point for the original site.</p>
<p>That gets things working; however, you\u2019ll probably want to make sure WordPress also redirects all traffic that would normally hit the front-end (regardless of domain) back to your live headless front end; otherwise, people will still be able to see the old version of the site <em>and</em> the new one, one on each domain. (This could probably be done with a redirection plugin, but you may want to use your web server\u2019s config directly instead. Either way, it\u2019s going to require a knowledgeable and delicate touch.)</p>
<p>Another DNS warning: <strong>you <em>don\u2019t</em> want to redirect any wp-* path</strong>. That includes <code>wp-admin</code> and <code>wp-login</code> (so you can still access the original WP site), as well as <code>wp-json</code> for the API, and <code>wp-content</code> to load any images and other assets that may still come from the original site. (At least, not unless you\u2019re planning on downloading all your images and serving them from the same relative path on the headless front end; I decided not to do that in my case, since I already get good image handling from <a href="${"https://wordpress.org/plugins/jetpack/"}" rel="${"nofollow"}">Jetpack</a>.)</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Ordinarily, WordPress handles creating responsive images for you with source sets; that\u2019s another thing you\u2019ll lose going headless. Gridsome and other SSGs can help make that up if you serve images from the headless front end, though.
`;
          }
        })}
<p>Which reminds me: keep in mind that you\u2019ll be changing things, DNS-wise, to go live with the headless front-end. Odds are, you\u2019ll have at least a few places in your headless site\u2019s configuration that will still be referencing the \u201Clive\u201D URL, and you\u2019ll need to deftly handle that during the go-live process.</p>
<p>And it goes without saying, but: if you have email on your domain, make sure you don\u2019t break it with DNS changes. (As long as you don\u2019t change name servers or MX records, you should be safe.)</p>
<h2 id="${"seo-and-redirects"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#seo-and-redirects"}"><span class="${"icon icon-link"}"></span></a>SEO and redirects</h2>
<p>Also: be sure all of your 301 redirects are in place and handled properly, and that you\u2019ve taken care of any other SEO considerations (like adding meta descriptions, for example) before going live with a headless site. WordPress takes care of a <em>lot</em> of things for you in this area (especially if you\u2019re using an SEO plugin), and you\u2019ll need to make sure you\u2019re not shooting yourself in the foot when you go live.</p>
<p>Also, if you have Google Analytics or similar tracking codes or JavaScript loading in the <code>&lt;head&gt;</code> of your site, you\u2019ll need to be sure those get moved over to the new front-end as well.</p>
<h3 id="${"deploys-are-only-free-to-a-point"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#deploys-are-only-free-to-a-point"}"><span class="${"icon icon-link"}"></span></a>Deploys are only free to a point</h3>
<p>And finally: if you have automatic deploys enabled in WordPress, remember that static hosts tend to charge by the build minute, and that most likely, your <em>whole</em> site will be rebuilt every time you update a post.</p>
<p>Watch those minutes, especially if you (like me) enjoy tweaking posts after they\u2019re published. While some hosts have incremental builds (mostly for Gatsby at this point, as far as I know, since it\u2019s the biggest fish in that particular pond), typically every page and\u2014crucially\u2014each <em>image</em> will be built each time the site is deployed.</p>
<p>The images step is easily the most time-consuming part of this site\u2019s build (Gridsome does some nice things in the build step to minimize image sizes), so keep that all in mind. When your site is static, you need to re-deploy each time you edit content, and there\u2019s a point where that\u2019s going to start costing you.</p>
<hr>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `In the end, I had a lot of fun building this site, and I\u2019m excited for it to be live in the world, and to continue smoothing out its rough\xA0edges.
`;
          }
        })}
<p>Thanks for taking the time to read about my headless WordPress site. And by the way, <a href="${"https://github.com/rickyjanuari/joco-gridsome"}" rel="${"nofollow"}">here\u2019s a link to the GitHub repo</a>, if you\u2019re the sort of person who enjoys checking out that sort of thing. (It\u2019s still a little bit of a mess.)</p>
<p>In the end, I had a lot of fun building this site, and I\u2019m excited for it to be live in the world, and to continue smoothing out its rough edges.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/Callout-7f4de651.js
  var css35, Callout;
  var init_Callout_7f4de651 = __esm({
    ".svelte-kit/output/server/chunks/Callout-7f4de651.js"() {
      init_index_2749e1b7();
      css35 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.callout.svelte-su6unk{margin:var(--halfNote) 0;font-size:1.3rem;line-height:1.4}@media(min-width: 1440px){.callout.svelte-su6unk{margin:0 0 var(--quarterNote);font-size:inherit;line-height:inherit;font-family:inherit}}',
        map: null
      };
      Callout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        $$result.css.add(css35);
        return `<p class="${"callout svelte-su6unk"}">${slots.default ? slots.default({}) : ``}
</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/add-blog-comments-static-site-7efb9968.js
  var add_blog_comments_static_site_7efb9968_exports = {};
  __export(add_blog_comments_static_site_7efb9968_exports, {
    default: () => Add_blog_comments_static_site,
    metadata: () => metadata4
  });
  var metadata4, Add_blog_comments_static_site;
  var init_add_blog_comments_static_site_7efb9968 = __esm({
    ".svelte-kit/output/server/chunks/add-blog-comments-static-site-7efb9968.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      init_Callout_7f4de651();
      metadata4 = {
        "title": "Adding blog comments to your static site with utterances",
        "date": "2021-11-06",
        "updated": "2021-11-09",
        "categories": ["web", "javascript", "svelte"],
        "coverImage": "utterances.png",
        "coverWidth": 16,
        "coverHeight": 9,
        "excerpt": "The web world is full of tradeoffs. Going from a CMS to a static site keeps things simple\u2014but that simplicity comes with costs. Luckily, giving up comments on your blog doesn't have to be one of them."
      };
      Add_blog_comments_static_site = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>The web world is full of tradeoffs. As I wrote in my post about <a href="${"/blog/goodbye-wordpress"}">moving away from WordPress</a>, going from a CMS to a static site keeps things simple. That simplicity, however, comes with costs\u2014one of which is the ability to have comments on blog posts. </p>
<p>I had to throw away all the existing comments on my blog when I moved away from WordPress. (Not that there were a lot; most of them were from ages ago, and on my <a href="${"/blog/pantone"}">Pantone post</a>, which somehow retains considerable SEO juice.) Due to the nature of static sites generally not having a database or a server to process data, there are few good, simple ways to allow user comments.</p>
<p>There are plenty of options out there to solve this problem, of varying degrees of simplicity. But I\u2019ve recently settled on a nifty little GitHub-based library called <a href="${"https://utteranc.es"}" rel="${"nofollow"}">utterances</a>.</p>
<h2 id="${"what-is-utterances-and-what-does-it-do"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-is-utterances-and-what-does-it-do"}"><span class="${"icon icon-link"}"></span></a>What is utterances, and what does it do?</h2>
<p>Have you ever been on a website and found a Facebook-powered comments section, which allowed you to add your own comments to the content using your own Facebook login?</p>
<p>If so, you\u2019ve got the idea. Utterances is <em>that</em>, just with GitHub instead of Facebook.</p>
<p>The <a href="${"https://utteranc.es/"}" rel="${"nofollow"}">utterances documentation and demo</a> covers the topic pretty well. (In fact, it\u2019s more concise than this post.) But to summarize: utterances is a tiny script that runs on the page to display a comments form, along with any comments that have been made on the page already. Behind the scenes, this is all powered by GitHub\u2014and specifically, by GitHub issues.</p>
<p>When a user creates a new comment (which, it should be noted, they must be logged into GitHub to do), if there are no comments yet, utterances will create a new GitHub issue for the current page, and the user\u2019s comment becomes the first comment on that issue. Any new comments will appear as further comments on the same issue\u2014so that you (eventually/ideally) have one \u201Cissue\u201D per route.</p>
<p>Whenever your page loads, utterance will go fetch the issue matching the current route, and plop all the comments from that issue onto the page, in sequential order.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Utterances adds GitHub-powered comments to your site, simply and easily.
`;
          }
        })}
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Utterances adds GitHub-powered comments to your site, simply and easily.
`;
          }
        })}
<p>You don\u2019t really need to know anything about GitHub issues, or even that GitHub issues is the engine under the hood. (After all, these comments aren\u2019t really issues at all; they\u2019re just a convenient way to store data associated with your repo and in the same place as your code.)</p>
<p>All you need to know is: utterances adds GitHub-powered comments to your site, simply and easily.</p>
<h2 id="${"how-to-set-up-utterances"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#how-to-set-up-utterances"}"><span class="${"icon icon-link"}"></span></a>How to set up utterances</h2>
<p>Again, the <a href="${"https://utteranc.es/"}" rel="${"nofollow"}">utterances site</a> covers this nicely, so I\u2019ll just hit the high notes here:</p>
<ol><li><p><strong>Make sure your site\u2019s GitHub repo is public, not private.</strong> If your issues aren\u2019t public (whose aren\u2019t? haha), they can\u2019t be pulled onto the page by utterances.</p></li>
<li><p><strong>Be sure to <a href="${"https://github.com/apps/utterances"}" rel="${"nofollow"}">enable the utterances app</a> in GitHub</strong>. This is the part that gives utterances permission to create new issues. You have the choice of whether to enable it for <em>all</em> of your repos, or to pick and choose.</p>
<p>Note that you may also need to be sure that issues are enabled in the repo\u2019s settings, particularly if the repo in question is a fork of another one. That option can be found on the first page in the repo\u2019s \u201CSettings\u201D tab, near the top.</p></li>
<li><p><strong>Finally, add the utterances script snippet to your site</strong>. We\u2019ll dig into this a bit more next, since\u2014while not too complex\u2014it\u2019s the area that gave me the most trouble.</p></li></ol>
<h3 id="${"adding-utterances-to-the-page"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#adding-utterances-to-the-page"}"><span class="${"icon icon-link"}"></span></a>Adding utterances to the page</h3>
<p>The last step of the process is to add a small script (which, you may be happy to know, includes no tracking) wherever your comments form should appear. That script will look a little something like this:</p>
<pre class="${"language-html"}"><!-- HTML_TAG_START -->${`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>
  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://utteranc.es/client.js<span class="token punctuation">"</span></span>
  <span class="token attr-name">repo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-name/repo-name<span class="token punctuation">"</span></span>
  <span class="token attr-name">issue-term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pathname<span class="token punctuation">"</span></span>
  <span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-light<span class="token punctuation">"</span></span>
  <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span>
  <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Some of those attributes are familiar, standard HTML attributes; others are specialized and used only by utterances when it loads. The <code>theme</code> option controls the appearance of the form (there are several options), and the <code>issue-term</code> controls how any new issues will be named in your repo (there are also several options here, though I\u2019ve described the default).</p>
<p>There are other custom attributes available, too, such as a <code>label</code> attribute to auto-add an existing label to utterances-created issues. (This is helpful as a sorting mechanism, so that you can distinguish \u201Creal\u201D issues from comments issues.) Once more, be sure to have a look at the <a href="${"https://utteranc.es"}" rel="${"nofollow"}">utterances site</a> for full details.</p>
<p>But in any case, the idea is: you\u2019ll state your preferred options inline as part of a script tag, and then drop that script into the HTML wherever you want your comments to appear. When the script loads, it\u2019ll parse your preferences from the HTML and make the magic happen.</p>
<p>This is simple enough when actually working with straight HTML, but it poses a small challenge in SvelteKit (and likely in some other frameworks, too), where <code>&lt;script&gt;</code> tags have special meaning. Most frameworks have rules about where you can just sling <code>script</code> tags. In fact, the Svelte compiler will yell at you for it.</p>
<p>The workaround is a <em>little</em> verbose, but simple enough; the more Svelte-y way of handling it (and in fact, utterances itself) was brought to my attention via this tweet from <a href="${"https://twitter.com/sarah11918"}" rel="${"nofollow"}">@sarah11918</a>:</p>
<blockquote class="${"twitter-tweet"}"><p lang="${"en"}" dir="${"ltr"}">Spent my morning with <a href="${"https://twitter.com/rickyjanuari?ref_src=twsrc%5Etfw"}">@rickyjanuari</a> &#39;s <a href="${"https://t.co/DEaQ4JJ79m"}">https://t.co/DEaQ4JJ79m</a> and WHAT a treat! (Appreciated React comps approach.)<br><br>It&#39;s the perfect pairing for trying out <a href="${"https://twitter.com/james_r_perkins?ref_src=twsrc%5Etfw"}">@james_r_perkins</a> &#39;s instructions for adding comments to an <a href="${"https://twitter.com/astrodotbuild?ref_src=twsrc%5Etfw"}">@astrodotbuild</a> blog using <a href="${"https://twitter.com/sveltejs?ref_src=twsrc%5Etfw"}">@sveltejs</a>! <a href="${"https://t.co/xOn3GgUXwR"}">https://t.co/xOn3GgUXwR</a></p>\u2014 Sarah Rainsberger (@sarah11918) <a href="${"https://twitter.com/sarah11918/status/1456636003968561154?ref_src=twsrc%5Etfw"}">November 5, 2021</a></blockquote>
<p>(Fun how a tweet about a post comes full circle and becomes a new post, eh?)</p>
<p>Credit to James Perkins for <a href="${"https://www.jamesperkins.dev/post/supercharge-your-astro-blog"}" rel="${"nofollow"}">that approach from his blog</a>, in which he uses the <code>onMount</code> hook to create a script, set its properties, and inject it just before a target <code>&lt;div&gt;</code>, all inside of a Svelte <code>&lt;Comments /&gt;</code> component. This allows the Svelte component itself to be placed anywhere you\u2019d like the comments form to show up.</p>
<p>I followed the spirit of his example closely, but changed it in a few ways. Here\u2019s my finished comments component (slightly simplified to remove some code irrelevant to this post):</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- Comments.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMount <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'svelte'</span>
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> prefersDarkMode <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'$lib/data/store'</span>

  <span class="token comment">// Translate the user's dark mode preference to a theme</span>
  <span class="token keyword">const</span> siteTheme <span class="token operator">=</span> $prefersDarkMode <span class="token operator">?</span> <span class="token string">'github-dark'</span> <span class="token operator">:</span> <span class="token string">'github-light'</span>

  <span class="token comment">// An object with all the utterances options I want</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">'https://utteranc.es/client.js'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">repo</span><span class="token operator">:</span> <span class="token string">'rickyjanuari/joco-sveltekit'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'comments'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">crossorigin</span><span class="token operator">:</span> <span class="token string">'anonymous'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">theme</span><span class="token operator">:</span> siteTheme<span class="token punctuation">,</span>
    <span class="token literal-property property">async</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    <span class="token string-property property">'issue-term'</span><span class="token operator">:</span> <span class="token string">'pathname'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">onMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> utteranceScript <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> targetTag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'utterances-comments'</span><span class="token punctuation">)</span>
  
    <span class="token comment">// Loop over the options &amp; apply each property as an attribute</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> options<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      utteranceScript<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> options<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    targetTag<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>utteranceScript<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utterances-comments<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>The main differences are:</p>
<ul><li><p>I prefer to abstract the script attributes to an <code>options</code> object (and also, prefer descriptive variable names). While this makes the code longer, I feel it also makes it more readable (or at least, less repetitive);</p></li>
<li><p>Since my site has two themes, I dynamically set the GitHub theme based on the user\u2019s site-level preference. (This site <em>does</em> detect and respect the user\u2019s dark mode preference by default, but <em>also</em> allows them to override it, just in case they like the opposite version here. So OS preference may or may not be site preference); and</p></li>
<li><p>Finally, I put the script itself <em>inside</em> the target <code>div</code>, rather than before it. This is mostly just to avoid having an empty div lying around, but it could also potentially help with styling. (The comments form itself is in an <code>iframe</code>, so you can\u2019t style it directly regardless, but at least this way you can have control over the wrapping <code>div</code>.)</p></li></ul>
<p>To restate/emphasize, since I\u2019m talking about somebody else\u2019s code here: this is all just personal preference. Both versions have advantages, and either is perfectly fine.</p>
<h2 id="${"pros-and-cons"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#pros-and-cons"}"><span class="${"icon icon-link"}"></span></a>Pros and cons</h2>
<p>I found utterances to be a good fit for me and my site personally, but there are reasons you may or may not come to the same conclusion.</p>
<h3 id="${"utterances-benefits"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#utterances-benefits"}"><span class="${"icon icon-link"}"></span></a>Utterances benefits</h3>
<p>I\u2019ve already mentioned how simple utterances is, and how easy it is to set up. Beyond that, utterances is also free, open-source, and ad-free\u2014all of which are great.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Utterances is a perfect fit for static sites, because it doesn&#39;t require a rebuild to display new content.
`;
          }
        })}
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Utterances is a perfect fit for static sites, because it doesn&#39;t require a rebuild to display new content.
`;
          }
        })}
<p>Also, because it uses GitHub as the comments engine under the hood, you can do all the same things you can with GitHub comments, like use Markdown; preview your comment before posting; and add reactions to other people\u2019s comments.</p>
<p>Finally: utterances is a perfect fit for static sites, because it doesn\u2019t require a rebuild to display new content; adding and retrieving comments is all handled client-side.</p>
<h3 id="${"utterances-tradeoffs"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#utterances-tradeoffs"}"><span class="${"icon icon-link"}"></span></a>Utterances tradeoffs</h3>
<p>It\u2019s hard to complain about such a simple and effective solution, but as with all things, this approach comes with tradeoffs.</p>
<p>Most obviously, there <em>is</em> some vendor lock-in. I don\u2019t mind this too much personally, but if you feel this might not be your ideal long-term comments solution, it\u2019s something to keep in mind.</p>
<p>Another item worth mentioning: since this is all powered by GitHub comments under the hood, a user needs a GitHub login in order to comment. I decided that\u2019s fine in my case, since this blog is increasingly development-focused, but your needs and audience may vary. This probably wouldn\u2019t be a good approach for a non-technical audience.</p>
<p>Also, there\u2019s no commenting on other comments or threading comments, at least not for now\u2014though as mentioned before, there are at least reaction emoji available. But again, this <em>is</em> open-source, so it\u2019s possible we could see that change.</p>
<p>Finally, I suppose you could consider it a drawback that your comments management moves to GitHub. Personally, I like that my comments are now hosted in the same place as the code itself, but I can see where going into GitHub to manage content could be undesirable in some cases. At the very least, it means you have less control over approving and moderating comments that you might with, say, WordPress. (That said, however: GitHub almost certainly has much better control over spam issues and comments than I\u2019d ever be able to devise.) Also, while I haven\u2019t spent much time looking, I\u2019d bet there are VS Code extensions to help you manage issues right in your editor.</p>
<h2 id="${"conclusion"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#conclusion"}"><span class="${"icon icon-link"}"></span></a>Conclusion</h2>
<p>As you\u2019ve seen, I\u2019ll be using utterances on this site for at least the time being. I like the idea of having comments here rather than trying to direct users to a contact form. If you also like the idea or found this post useful, consider trying it out yourself. (Or, you know\u2026leave a comment.) \u{1F609}</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/adding-gutenberg-full-and-wide-width-image-support-to-your-wordpress-theme-5d471a4a.js
  var adding_gutenberg_full_and_wide_width_image_support_to_your_wordpress_theme_5d471a4a_exports = {};
  __export(adding_gutenberg_full_and_wide_width_image_support_to_your_wordpress_theme_5d471a4a_exports, {
    default: () => Adding_gutenberg_full_and_wide_width_image_support_to_your_wordpress_theme,
    metadata: () => metadata5
  });
  var metadata5, Adding_gutenberg_full_and_wide_width_image_support_to_your_wordpress_theme;
  var init_adding_gutenberg_full_and_wide_width_image_support_to_your_wordpress_theme_5d471a4a = __esm({
    ".svelte-kit/output/server/chunks/adding-gutenberg-full-and-wide-width-image-support-to-your-wordpress-theme-5d471a4a.js"() {
      init_index_2749e1b7();
      metadata5 = {
        "title": "Adding Gutenberg Full- and Wide-Width Image Support to Your WordPress Theme",
        "date": "2019-03-16",
        "updated": "2020-05-13",
        "categories": ["css", "web", "wordpress"],
        "coverImage": "gutenberg-wide-illustration.png",
        "coverWidth": 32,
        "coverHeight": 29,
        "excerpt": "Gutenberg brings with it the ability to set image blocks as full-width or wide-width. This article talks about how to enable support for that feature in your theme, and one way to write the CSS that makes it work."
      };
      Adding_gutenberg_full_and_wide_width_image_support_to_your_wordpress_theme = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>Recently, I\u2019ve been using (and loving) the new <a href="${"https://wordpress.org/gutenberg/"}" rel="${"nofollow"}">Gutenberg editor</a> in WordPress 5.0+. It\u2019s a huge step forward in both what developers can offer, and what users can expect out of their content creation experience.</p>
<p>One of the new features of Gutenberg that I particularly enjoy is the ability to set an image as either \u201Cwide width\u201D or \u201Cfull width,\u201D to allow it to break out of its container element in order to span a greater width of the screen.</p>
<p>Here\u2019s a visual example of what I mean:</p>
<p><img src="${"/images/post_images/Untitled-1024x928.png"}" alt="${"Most of the content is constrained to a fixed-width container, but wide-width and full-width elements may expand outside that container's boundaries."}"></p>
<p><strong>Ordinarily, an image would be constrained to the content width</strong> (visualized by the dotted lines in the image above). Being able to allow images to break out of those confines is a powerful layout tool, though, as it allows content authors to add a great deal of visual interest and hierarchy to any page, post, or content supported by the new Gutenberg editor!</p>
<h2 id="${"adding-theme-support"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#adding-theme-support"}"><span class="${"icon icon-link"}"></span></a>Adding Theme Support</h2>
<p>Adding support for wide- and full-width images is up to the theme developer. Fortunately, from the backend, it\u2019s dead simple; just add this line to the theme\u2019s <code>functions.php</code> file (please be sure to use a <a href="${"https://api.rickyjanuari.com/wordpress-child-theme-explanation/"}" rel="${"nofollow"}">child theme</a> as appropriate):</p>
<pre class="${"language-php"}"><!-- HTML_TAG_START -->${`<code class="language-php"><span class="token comment">//functions.php </span>
 
<span class="token function">add_theme_support</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'align-wide'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>That tidy little snippet will make two new options available for image blocks in the Gutenberg editor, in addition to the usual options: \u201Cwide width\u201D and \u201Cfull width,\u201D highlighted in the image below:</p>
<p><img src="${"/images/post_images/gutenberg-image-toolbar-with-wide.png"}" alt="${"'Wide width' and 'full width' options, highlighted, appear in the Gutenberg editor if the active theme supports them."}"></p>
<p>When the user chooses either of these options, the <code>&lt;figure&gt;</code> element that appears on the front-end of the site (oh yeah\u2014by default, Gutenberg puts images inside <code>&lt;figure&gt;</code> elements, so that captions can be added easily. Anyway, that element, i.e., the image\u2019s container) will have either an <code>alignwide</code> or <code>alignfull</code> class applied to it (depending, of course, on which was selected by the content author).</p>
<p><strong>That\u2019s it for the PHP/back-end setup.</strong> Other than the snippet above, everything we\u2019ve covered so far is fully automatic and just handled by WordPress for us.</p>
<p>However, we still need to actually <em>implement</em> these layout techniques on the front-end of the site, using our theme\u2019s CSS. Otherwise, nothing will happen visually when a content author chooses the full-width or wide-with image option.</p>
<h2 id="${"front-end-css-for-full-width-images"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#front-end-css-for-full-width-images"}"><span class="${"icon icon-link"}"></span></a>Front-End CSS for Full-Width Images</h2>
<p>I wanted to write this post mainly to share one technique that I came across online, which I feel is particularly clever in this situation (and which is not at all exclusive to Gutenberg or WordPress):</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token comment">/* style.css */</span>
 
<span class="token selector">.alignfull</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 50vw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Even though that bit of CSS above is very brief (only two properties!), I still want to be sure we cover what it\u2019s doing, because it\u2019s a pretty elegant solution for our needs.</p>
<p>The <code>width</code> property is pretty straightforward: a value of <code>100vw</code> ensures that the image is always exactly as wide as the viewport, no matter what size that might be. (Remember, <code>width: 100%</code> might not work here, because percentages are based on the width of the <em>parent element</em>, not the screen, and our image\u2019s parent element may or may not be as wide as the viewport.)</p>
<p>However, making the image <code>100vw</code> wide on its own doesn\u2019t do us much good on its own, because it would overflow the screen, as shown in this image:</p>
<p><img src="${"/images/post_images/fullwidth-overflow-1024x600.png"}" alt="${"Setting the width is only part of the solution, since it will overflow the screen unless it's repositioned."}"></p>
<p>That brings us to the <code>margin</code> property, which is the clever part. This is where the real CSS magic happens:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 50vw<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>In case you\u2019re new to the <code>calc</code> function, in essence, it lets you do math to set CSS values. It\u2019s most commonly used in responsive design to, say, let your image take up a quarter of the available space, minus an 8px margin (which would be <code>width: calc(25% - 8px);</code>).</p>
<p>But <code>calc</code> has many other uses, and can crunch numbers on any dynamic or static values, even between two different units of measurement (as in the previous example, to subtract <em>pixels</em> from a <em>percentage</em>).</p>
<p>Back to our fullwidth image: in order to make the image the full width of the screen and position it properly, we want to set a <em>negative margin.</em> And as you\u2019ve probably guessed, we\u2019ll need <code>calc</code> to help us, because the distance between the side of our container and the left edge of the screen is responsive, and always changing.</p>
<p><strong>So how do we determine how far the image needs to shift to the left?</strong> Answer: we don\u2019t. \u{1F60E}</p>
<p>Instead, we\u2019re going to send our image <em>halfway to the right.</em> That\u2019s the <code>50%</code> portion of our <code>calc</code> formula:</p>
<p><img src="${"/images/post_images/fullwidth-left.png"}" alt="${"Setting a side margin of 50% on the element puts its left side directly in the center of its parent element."}"></p>
<p>Now we can begin to see the full picture (no pun intended)!</p>
<p>Since percentage values are calculated based on the parent element\u2019s width, a <code>margin</code> of <code>50%</code> sends the image exactly halfway across the parent element. And since our parent element is already centered on the screen, that means <strong>our image is now exactly halfway across the viewport, no matter how wide the viewport is!</strong></p>
<p>Now that our image\u2019s left side is directly in the center of the screen, the rest is just <em>subtracting</em> <code>50vw</code> from the left margin\u2014which is the other half of our calculation. Thus, <code>calc(50% - 50vw)</code> gives us exactly the full-width image we\u2019re looking for!</p>
<p><img src="${"/images/post_images/fullwidth-achieved.png"}" alt="${"A left margin of 50% - 50vw gives us the perfectly centered, fullwidth element we're looking for."}"></p>
<h3 id="${"some-extra-notes-about-the-above-full-width-css"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#some-extra-notes-about-the-above-full-width-css"}"><span class="${"icon icon-link"}"></span></a>Some Extra Notes About the Above Full-Width CSS</h3>
<p>Once more, here\u2019s the CSS from above:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token selector">.alignfull</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 50vw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>There\u2019s one small issue here, which is: we don\u2019t take into account the possibility that our <code>.alignfull</code> element might already have a right margin. If it does, it will actually be taking up <em>more than</em> the full width of the screen, and that\u2019s no good.</p>
<p>Plus, we probably want space above and below our fullwidth image, just to make it stand out a little more. So really, instead of setting just a <code>margin-left</code> property, we\u2019d most likely be better off setting all four sides at once:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span> 2rem <span class="token function">calc</span><span class="token punctuation">(</span>50% - 50vw<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>This way, we\u2019ve made sure all four sides of our image are accounted for while also giving the image a little breathing room.</p>
<p>And if you\u2019re wondering (or just wanting to get super technical): yes, this <em>does</em> mean that <em>both</em> sides of the image get brought in by <code>50%</code>, then are each pulled back out <code>50vw</code>. If you didn\u2019t have the <code>- 50vw</code> part of the CSS above, the image would effectively be 0% wide (since it would have a margin of <code>50%</code> on both sides). Interesting! \u{1F913}</p>
<p>Lastly, as you probably realized: <strong>this post assumes the content container is already centered on the screen</strong>. If your content is <em>not</em> already centered in the viewport, this specific CSS won\u2019t work for you, and you\u2019ll need to do something a little more creative to get your images full-width.</p>
<h2 id="${"front-end-css-for-wide-width-images"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#front-end-css-for-wide-width-images"}"><span class="${"icon icon-link"}"></span></a>Front-End CSS for Wide-Width Images</h2>
<p>Wide-width images work similarly to the above, but naturally, we don\u2019t want to make them the <em>full</em> width of the screen; otherwise, there would be no difference between wide-width and full-width (and that, of course, would just be silly).</p>
<p>How wide the image should be, exactly, as well as how to achieve the effect, is ultimately up to the theme author. However, I find something like this bit of CSS works quite well:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token selector">.alignwide</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% + 20vw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> -10vw<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p><img src="${"/images/post_images/wide-width-only-1024x713.png"}" alt="${"A wide-width element, breaking outside its content container by an additional 20 VW"}"></p>
<p>Our wide width image spans the 100% of its parent container, plus an extra 20 viewport width units.</p>
<p>You might notice that in this case, I chose <em>not</em> to use negative margin, and instead, opted for a negative value on the <code>left</code> property (paired with relative positioning). Why\u2019s that, and what\u2019s the difference?</p>
<p>For the \u201Cwhy,\u201D it\u2019s mainly because: I wanted to illustrate that <strong>there\u2019s more than one technique available here.</strong></p>
<p>As for the difference\u2026well, to be honest, which works better will probably depend on your use case, and the environment you\u2019re working in. None of this CSS exists in a vacuum (hopefully).</p>
<p>If your images already have a side margin, then overriding that with a negative margin will probably work better (or, alternatively, you could just be aware that you may need to remove the side margin if you\u2019re utilizing relative positioning).</p>
<p>There are undoubtedly posts written on the advantages and disadvantages of both techniques, and I don\u2019t feel the need to retread that ground here. Some developers avoid negative margins like the plague; I think they\u2019re fine in a situation like this, and as long as you\u2019re not just using them to avoid changing a different part of the CSS, or as a hacky way to get around something that should just be fixed on its own.</p>
<p>Another note here: unless you\u2019re ok with your wide-width images bleeding off the page at smaller screen sizes, you\u2019ll need to either use a media query, and/or replace the <code>10vw</code> with a value that doesn\u2019t exceed the side padding/margin around your main content container.</p>
<p>(For example: if your main content container element, whatever that may be, has a padding or margin of <code>32px</code> on each side, you\u2019d want to make sure your <code>.alignwide</code> class had a width of no greater than <code>calc(100% + 64px)</code>).</p>
<p>I eventually landed on something like this for my personal use on wide-width images; they\u2019re fullscreen up to a certain screen size (since they may as well be on mobile), then differentiate themselves starting at a certain <code>@media</code> breakpoint (likely the same one, or just above, where your content container element stops expanding and centers itself at a static width instead):</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token comment">/* style.css */</span>
 
<span class="token selector">.alignwide</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 2rem <span class="token function">calc</span><span class="token punctuation">(</span>50% - 50vw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 960px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
  <span class="token selector">.alignwide</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% + 20vw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 2rem -10vw<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p><strong>That\u2019s it!</strong> I hope this was helpful in getting your theme\u2019s images set up for Gutenberg support. Enjoy your new content editing experience!</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/CalloutPlusQuote-8515db1f.js
  var CalloutPlusQuote;
  var init_CalloutPlusQuote_8515db1f = __esm({
    ".svelte-kit/output/server/chunks/CalloutPlusQuote-8515db1f.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      init_Callout_7f4de651();
      CalloutPlusQuote = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        })}

${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/announcing-quina-my-first-app-2ec1b56e.js
  var announcing_quina_my_first_app_2ec1b56e_exports = {};
  __export(announcing_quina_my_first_app_2ec1b56e_exports, {
    default: () => Announcing_quina_my_first_app,
    metadata: () => metadata6
  });
  var metadata6, Announcing_quina_my_first_app;
  var init_announcing_quina_my_first_app_2ec1b56e = __esm({
    ".svelte-kit/output/server/chunks/announcing-quina-my-first-app-2ec1b56e.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      init_SideNote_5c625ecb();
      init_CalloutPlusQuote_8515db1f();
      init_Callout_7f4de651();
      metadata6 = {
        "title": "Announcing Quina (My First App)!",
        "date": "2020-12-10",
        "updated": "2021-02-11",
        "categories": ["javascript", "design", "web", "vue"],
        "coverImage": "social-share-image.png",
        "coverWidth": 120,
        "coverHeight": 63,
        "excerpt": "The story of building Quina, a word game Progressive Web App built with Nuxt, and launched on the Google Play Store."
      };
      Announcing_quina_my_first_app = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `About six months after I wrote this post, I published <a href="${"https://css-tricks.com/what-i-learned-building-a-word-game-app-with-nuxt-on-google-play/"}">a longer, more technically in-depth version of this article on CSS Tricks</a>.
`;
          }
        })}
<p>One of my favorite code hobbies is making games on <a href="${"https://codepen.io"}" rel="${"nofollow"}">CodePen</a>. I\u2019ve got a handful I\u2019ve created in the online sandbox code editor over the years\u2014<a href="${"https://codepen.io/collinsworth/pen/MWwXpLd"}" rel="${"nofollow"}">Connect Four</a>, <a href="${"https://codepen.io/collinsworth/pen/Pymdxo"}" rel="${"nofollow"}">Color Flood</a>, <a href="${"https://codepen.io/collinsworth/pen/oNbavJN"}" rel="${"nofollow"}">Hangman</a> and <a href="${"https://codepen.io/collinsworth/pen/XwPXrM"}" rel="${"nofollow"}">sliding puzzles</a>, to name a few\u2014but I\u2019ve wanted to build a legit, standalone app for a long time now.</p>
<p>As a secondary goal, I wanted to get that app listed in a major app store. There are plenty of hurdles for web devs in this regard; the app stores out there are mostly full of native apps (apps built with native iOS or Andriod code, rather than web languages).</p>
<p>However, at some point, I found out that the Google Play Store allows certain web apps to be listed, which was the breakthrough I was looking for. This past August, I decided it was finally time to start seriously working toward my app goal.</p>
<p>Finally, after four months, dozens of nights and weekends, hundreds of git commits, and more debugging-related curse words than I\u2019d care to try counting, I\u2019m thrilled to introduce my first app ever: <strong><a href="${"https://quina.app/"}" rel="${"nofollow"}">Quina</a></strong>!</p>
<p><img src="${"/images/post_images/tutorial-1-1024x576.png"}" alt="${"A preview of Quina on mobile"}"></p>
<p>Quina is a classic word game where users attempt to guess a secret five-letter word.</p>
<h2 id="${"what-is-quina"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-is-quina"}"><span class="${"icon icon-link"}"></span></a>What is Quina?</h2>
<p><strong>Quina is a classic word game</strong>. I didn\u2019t invent it by any stretch, but I had a version in mind that I\u2019ve never seen anywhere out there on the web before. (The original iteration is a pen-and-paper game called <a href="${"https://en.wikipedia.org/wiki/Bulls_and_Cows"}" rel="${"nofollow"}">Bulls and Cows</a>, though it\u2019s known by other names, too.)</p>
<p>The idea is pretty straightforward: you have ten chances to guess a secret five-letter code word. After each guess, you get a clue that reveals some info about how close your guess is to that code word. I suppose you\u2019d primarily consider it a word game, but there\u2019s a good amount of strategy and logic involved as well.</p>
<p>If this sounds familiar, it\u2019s probably because you\u2019ve either played the original, or played its most popular variant; <a href="${"https://en.wikipedia.org/wiki/Mastermind_(board_game)"}" rel="${"nofollow"}">Mastermind</a> is another version of the same game.</p>
${validate_component(CalloutPlusQuote, "CalloutPlusQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Quina is Latin for \u201Cfive at a time,\u201D since the game is played with five-letter\xA0words.
`;
          }
        })}
<p>By the way, \u201CQuina\u201D was chosen for the name since it\u2019s Latin for \u201Cfive at a time\u201D (according to a Google search, at least; I sure don\u2019t speak the language). The original version of the game is played with four letters instead of five, so the name seemed fitting.</p>
<p>I don\u2019t know how that word was <em>meant</em> to be pronounced, but I say it, \u201CQUINN-uh.\u201D (I\u2019m probably wrong, but hey, it\u2019s my game. I can call it whatever I want. Just ask the guy who invented gifs.)</p>
<h2 id="${"how-to-install-quina"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#how-to-install-quina"}"><span class="${"icon icon-link"}"></span></a>How to install Quina</h2>
<p>There are two ways to install Quina:</p>
<ul><li>You can download the <a href="${"https://play.google.com/store/apps/details?id=app.quina.collinsworth"}" rel="${"nofollow"}">Quina Android App from the Google Play Store</a>. (It\u2019s $2.99, but all content is unlocked by default.)</li>
<li>You can install the freemium version by visiting <a href="${"https://quina.app/"}" rel="${"nofollow"}">quina.app</a>.</li></ul>
<p>When visiting the website, you <em>should</em> see a prompt like this one (though it will depend on your browser; if you don\u2019t see the prompt, you can <a href="${"https://mobilesyrup.com/2020/05/24/how-install-progressive-web-app-pwa-android-ios-pc-mac/"}" rel="${"nofollow"}">follow these directions</a>):</p>
<p><img src="${"/images/post_images/image-1024x124.png"}" alt="${"Add Quina to Home Screen? Install!"}"></p>
<p>You should see the \u201CAdd Quina to home screen\u201D prompt when visiting quina.app.</p>
<p>You could also just play the game <em>on</em> the website, in your browser, if you want to. It\u2019s designed to work best as a mobile app, however.</p>
<h2 id="${"game-features"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#game-features"}"><span class="${"icon icon-link"}"></span></a>Game features</h2>
<p>Beyond the core word game, Quina has a number of features to hopefully keep it entertaining and engaging for a good, long while.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `The images below are from the Google Play Store app listing, so they\u2019re a bit more marketing-y than I\u2019d normally choose. Sorry.
`;
          }
        })}
<ul><li>Quina offers three different word sets to help players find the right challenge level: <strong>Basic</strong>, <strong>Tricky</strong>, and <strong>Random</strong>. All told, there are about 1,200 code words between the three.<ul><li>Basic sticks to common, everyday English words; Tricky has some curveballs and harder words; and Random just lets you enjoy the challenge of not knowing.</li></ul></li>
<li>Players also have the option to <strong>start the game with a hint</strong>, if they want (either a small one or a big one), to make the game a bit more accessible.</li>
<li>There\u2019s a quick-start tutorial, as well as a more in-depth explanation of the rules.</li>
<li>As you play, you can mark up your guesses to help you deduce the meaning behind the clues.</li></ul>
<p><img src="${"/images/post_images/tutorial-3-1024x576.png"}" alt="${"A demonstration of guess letters either crossed out or highlighted"}"></p>
<ul><li>Quina tracks your <strong>game history</strong> and shows your <strong>statistics</strong> (data is saved in your device\u2019s local storage; no need to sign in or create an account, and no security risks)!</li></ul>
<p><img src="${"/images/post_images/tutorial-4-1024x576.png"}" alt="${"Quina's stats screen, showing win streaks, win/loss record across game types, and other stats."}"></p>
<ul><li>The game also offers <strong>25 awards</strong> you can unlock for specific achievements, like winning five games in a row, or playing a certain number of games without hints.</li>
<li>There\u2019s a built-in <strong>dark mode</strong> and the option to reduce motion, both of which detect and default to your OS preference.</li>
<li>Finally, just to give it that native feel, the game also uses (sparing) sound effects and device vibration.</li></ul>
<p><img src="${"/images/post_images/02-Google-Pixel-4-Front-1024x923.png"}" alt="${"A demo of how light and dark mode look"}"></p>
<h2 id="${"the-tech-behind-the-app"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#the-tech-behind-the-app"}"><span class="${"icon icon-link"}"></span></a>The tech behind the app</h2>
<p>For those into such nerdery: Quina is a <a href="${"https://www.smashingmagazine.com/2016/08/a-beginners-guide-to-progressive-web-apps/"}" rel="${"nofollow"}">Progressive Web App</a> (PWA) built with <a href="${"https://nuxtjs.org"}" rel="${"nofollow"}">Nuxt</a>. If you\u2019re not familiar with those terms:</p>
<p>Progressive Web Apps are essentially websites, but with some extra features that make them behave like native apps.</p>
<p>There\u2019s a lot more detail in the link above, but the main features of a PWA include: the ability to actually <em>install</em> the website/web app on your device and launch it fullscreen, just like an ordinary native app; to run offline (thanks to JavaScript service workers); and access to device functionality like push notifications and vibration, via modern browser enhancements.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `If you\u2019ve ever visited a website and been prompted to add it to your home screen, that website was probably a progressive web app.
`;
          }
        })}
<p>You can build a PWA with anything you might use to build a website; plain ol\u2019 HTML, CSS and JavaScript will work just fine, and you definitely don\u2019t <em>need</em> to use a framework (let alone one as robust as Nuxt). As I considered the options, however, it became clear that Nuxt was my #1 choice, and one I\u2019ve never regretted.</p>
${validate_component(CalloutPlusQuote, "CalloutPlusQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Progressive Web Apps are essentially websites, but with some extra features that make them behave like native\xA0apps.
`;
          }
        })}
<p><strong>Nuxt</strong> is a framework for building apps with Vue (Vue being a JavaScript component framework). As the name implies, Nuxt is the Vue equivalent of React\u2019s Next.js, if that helps.</p>
<p>In any case: Nuxt helps you create web apps by giving you all the things you might want while building with Vue, such as routing and global state management (you create pages just by plopping files in a <code>/pages</code> directory; how novel!), and wraps them all up in one easy-to-use package.</p>
<h3 id="${"why-nuxt"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#why-nuxt"}"><span class="${"icon icon-link"}"></span></a>Why Nuxt?</h3>
<p>The main reason I personally chose Nuxt was familiarity; Vue is my most-used JavaScript framework. It\u2019s conveniently also one of my favorites, and I\u2019d used Nuxt before (albeit in a much more limited context). I also wanted a good excuse to learn more about Vue Router and Vuex (both bundled in Nuxt) than the bits I\u2019d picked up from my day job. (Mission accomplished there.)</p>
<p>That said, however: I considered using <a href="${"https://svelte.dev/"}" rel="${"nofollow"}">Svelte</a> (really the only other contender in the \u201Cfavorites\u201D category), but decided its ecosystem was still a little too young and too small for a project this ambitious and with this many unknowns. I was confident that whatever issues I might have run into with Nuxt, its ecosystem was large enough that I could find a solution. With Svelte, I was concerned that I might have to hand-roll more things than I wanted to (especially with the recent upheaval in its own pre-1.0 app framework, <a href="${"https://sapper.svelte.dev/"}" rel="${"nofollow"}">Sapper</a>). I would still reach for Svelte on a project with smaller scope or fewer unknowns, though, and eagerly look forward to what will come out of it in the next year. I\u2019m sure I\u2019ll use it again.</p>
<p>Back to Nuxt, though: appealingly, Nuxt also has a rich library of optional first-party modules available to make integrations and advanced functionality easier.</p>
${validate_component(CalloutPlusQuote, "CalloutPlusQuote").$$render($$result, {}, {}, {
          default: () => {
            return `I was repeatedly amazed while using Nuxt how easy it was to do anything I wanted to do. There was always a way, and most of the time, there was already a module built for\xA0it,\xA0too.
`;
          }
        })}
<p>For example: actually getting all the features of a PWA up and running on your own would be challenging to say the least, but Nuxt has an installable <a href="${"https://pwa.nuxtjs.org/"}" rel="${"nofollow"}">PWA module</a> that handles most of the heavy lifting for you with a few lines of config! There are also plugins for analytics, connecting to third-party services and APIs, and all kinds of other things.</p>
<p>The game actually runs as a static site, however (albeit with a healthy dose of JavaScript); Nuxt can either build out your finished product to run on a Node server, or as a statically generated site. I chose the latter, since there isn\u2019t really anything I need done server-side (thanks mainly to the fact that all of Quina\u2019s data is saved in local storage, rather than in a database).</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `I did have a version of Quina working with Firebase authentication and Firestore for permanent accounts and data storage, but I abandoned that when security became too difficult and I realized it was overkill for what I was trying to do.
`;
          }
        })}
<p><img src="${"/images/post_images/01-Google-Pixel-4-Front-879x1024.jpg"}" alt="${"The Quina home screen"}"></p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Other than what&#39;s listed here, everything in the app is original and coded from scratch (including the brand and all the\xA0CSS).
`;
          }
        })}
<p>The app is deployed on <a href="${"https://www.netlify.com/"}" rel="${"nofollow"}">Netlify</a>, by the way, in case you were curious. (That part was never a question; Netlify is amazing.)</p>
<p>Other than the previously mentioned Nuxt PWA module, the only additional tech/package things I used were:</p>
<ul><li>A web audio library called <a href="${"https://howlerjs.com"}" rel="${"nofollow"}">HowlerJS</a> (mostly to handle sound latency on iOS, which, it turns out, is a real problem, especially when working with synchronous sound);</li>
<li>An NPM package called <a href="${"https://github.com/catdad/canvas-confetti"}" rel="${"nofollow"}">Canvas Confetti</a> (to generate the fireworks on the win screen);</li>
<li>The <a href="${"https://github.com/Akryum/vue-observe-visibility"}" rel="${"nofollow"}">vue-observe-visibility</a> library for some nice scroll effects; and</li>
<li>Some free third-party sound effects, mentioned more specifically in the app\u2019s <a href="${"https://quina.app/faq/"}" rel="${"nofollow"}">FAQ</a> page.</li></ul>
<p>Other than what\u2019s listed here, everything in the app is original and coded from scratch (including the brand and all the CSS).</p>
<h2 id="${"building-an-android-app-from-a-pwa"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#building-an-android-app-from-a-pwa"}"><span class="${"icon icon-link"}"></span></a>Building an Android App from a PWA</h2>
<p>At the outset, I knew it was <em>possible</em> to list a PWA in the Google Play Store. (Not Apple\u2019s, though; Apple is much more restrictive\u2014some might say antagonistic\u2014when it comes to the web these days.) I didn\u2019t know how much work it would be to get Quina listed in the Play Store, but I quickly found out.</p>
<p>Before going too far, though: I should mention that turning a web app into a proper Android app is possible because of a thing called Trusted Web Activity (or TWA).</p>
<p>TWA is a technical term, but what it means is: you have the ability to create an Android app that doesn\u2019t have any real code or content of its own; it\u2019s just a shell, built to load one specific web app using your device\u2019s browser, and display it like a native app.</p>
<p>That\u2019s what Quina and any other TWA app is; effectively, a browser that auto-loads a specific web URL, disguised as an app.</p>
<p>It\u2019s called Trusted Web Activity because in order to make it work right, you need to bundle your app with a secret key that matches a key that lives on your website. (More on that in a bit.)</p>
${validate_component(CalloutPlusQuote, "CalloutPlusQuote").$$render($$result, {}, {}, {
          default: () => {
            return `That\u2019s what Quina and any other TWA app is; effectively, a browser that auto-loads a specific web URL, disguised as an\xA0app.
`;
          }
        })}
<p>It\u2019s also <em>required</em> that the URL you\u2019re linking to qualifies as a progressive web app; <a href="${"https://web.dev/"}" rel="${"nofollow"}">web.dev</a> offers tests to certify that. Mostly it\u2019s making sure you have the proper PWA manifest, a service worker (to make the app available offline, like a native app), and that your site loads over HTTPS. I won\u2019t go into any of those here, since there are better resources already out there on the ins and outs of PWAs.</p>
<h3 id="${"generating-an-app-from-web-content"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#generating-an-app-from-web-content"}"><span class="${"icon icon-link"}"></span></a>Generating an app from web content</h3>
<p>There are at least a dozen ways you can go about generating a native app from web content. There are apps and frameworks like NativeScript, Cordova, React Native, Ionic, and others that all promise the ability to build a native iOS and/or Android app in the web languages you already know (HTML, CSS, and JavaScript).</p>
<p>I found each of those to have a steep learning curve, however, and I wasn\u2019t ready to invest the time into learning one just for this project. It seemed to me that each one came with a promise of \u201Cbuild for the web!\u201D with the strong hidden fine print of \u201Cbut not really; you gotta learn this thing first.\u201D So while they\u2019re certainly much better than sitting down to learn Android development, they didn\u2019t really live up to the promise as much as I would\u2019ve hoped.</p>
<p>There are also blog posts online that walk you through the steps to generate an Android app using Android Studio, that you can theoretically follow along with even without knowing what you\u2019re doing, and I tried some of those. But (as with most things Google-related), either the tech had already changed too much in the time since the post was written to follow along smoothly, or it just wasn\u2019t well-explained.</p>
<p>Each dead end was deflating, but each one also helped me get a glimpse of the bigger picture and move closer to the end goal.</p>
<p>It was when I finally stumbled upon a marvelous little CLI tool called <a href="${"https://developers.google.com/web/android/trusted-web-activity/quick-start"}" rel="${"nofollow"}">Bubblewrap</a> that I knew I could finally stop looking.</p>
<h3 id="${"bubblewrap-at-a-glance"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#bubblewrap-at-a-glance"}"><span class="${"icon icon-link"}"></span></a>Bubblewrap at a glance</h3>
<p>The topic of using Bubblewrap to generate an Android app could easily take up its own 5,000-word blog post, but in short: </p>
${validate_component(CalloutPlusQuote, "CalloutPlusQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Bubblewrap is a command line interface (CLI) tool that asks you to install some dependencies, then simply generates an Android app for you based on your progressive web app&#39;s URL.
`;
          }
        })}
<p>I don\u2019t want to short-change Bubblewrap, because it\u2019s undeniably amazing, and odds are good that my app wouldn\u2019t be in the store without it. But again, as with anything related to Google tech: <em>it\u2019s not quite that simple</em>.</p>
<p>The first hurdle is getting all the dependencies installed in the proper location. Bubblewrap is really explicit about where it wants to find its dependencies, and each one is pretty chonky. The documentation I followed was already outdated, but fortunately, I was able to Google for some updated answers (as I recall, I needed to download an older version of one of the dependencies).</p>
<p>After that, the main issue is getting your app\u2019s key synced up with Google Play.</p>
<p>Again, I won\u2019t go too far into detail here (maybe I\u2019ll write a separate post one day), but as mentioned before: TWA apps check your URL for the app\u2019s encrypted key, and if found, the app knows it can trust the website and load it as the app\u2019s contents.</p>
<p>This was the most challenging part, honestly. Google Play offers a feature where <em>they</em> generate a key, and you just copy and upload it to your site. That probably would\u2019ve been the easier way to go, but Bubblewrap requires you to <em>provide</em> a key when it generates your app, and that\u2019s not as simple as just pointing it to a file; there\u2019s passwords, encryption, and specific naming conventions involved. Plus, since everything is happening on the command line, you need to be <em>really</em> careful about special characters in passwords.</p>
<p>So regardless of what you do here, you\u2019ll need to jump through some hoops. (I wound up using <code>keytool</code> to generate a key and used that, because I\u2019d already taken that approach in a failed tutorial.)</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `If the key hosted on your site doesn\u2019t match the key in your Play Store app, the app will still work, but it will just function like an ordinary browser window, rather than looking like a native app.
`;
          }
        })}
<p>The other really tricky part was that both Google and Bubblewrap ask you for an app name in a format like <code>app.builder.build</code>. It was frustratingly impossible to figure out what was <em>expected</em> to provide in that format\u2014some I saw started with <code>app</code>, others with <code>com</code>; some had three parts, others two. It seemed like there must be some proper protocol to follow here, and I didn\u2019t know what it was.</p>
<p>Turns out, there\u2019s no real rule that I can find here, other than: make it unique. The format is apparently a Java convention. (Android apps are often built with Java, it would seem.) Typically, it appears most apps are named such as <code>tld.developerName.appName</code>, but again, the only real important thing is uniqueness.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `By default, Bubblewrap validates that your live web app meets all PWA criteria. Quina was failing the offline test for some reason even though I knew it was valid, but helpfully, there is a flag to skip the check.
`;
          }
        })}
<h3 id="${"the-google-play-store-is-awful-to-use"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#the-google-play-store-is-awful-to-use"}"><span class="${"icon icon-link"}"></span></a>The Google Play Store (is awful to use)</h3>
<p>This section is mainly just going to be me griping, but if you\u2019re gonna go down this route, you should be warned about this stuff. Some of my least favorite hurdles:</p>
<ul><li>You have to pay Google $25 and apply for a developer account just to start (probably reasonable, but still feels kinda steep).</li>
<li>Starting January 2021, Google will not allow any payment providers other than Google Pay, which charges a 30% (<em>thirty percent!</em>) fee\u2014ten times what similar payment providers like Stripe charge. (And yes, this applies to app purchases, too\u2014which means Google gets almost $1 of every $2.99 download).<ul><li><strong>EDIT:</strong> apparently this change may be legally contested by some US states.</li></ul></li>
<li>You cannot delete an app you\u2019ve created in the Google Play developer console, ever. Even if you just typed a few things into a text box and never did anything with it, you still can\u2019t delete that.</li>
<li>This means if you mess something up and need to start over, you can never use that same app ID again. You just gotta pick another one, create a new app, and upload a new package.</li>
<li>If you make your app free, you can never make it paid again, even if it hasn\u2019t actually launched yet. So you\u2019ll have to just start over with a whole new app, which means filling out <em>allllll</em> the fields all over again. (And again: it\u2019ll need a new unique app ID.)</li>
<li>If you let Google handle signing your encrypted key, you can never opt out of that choice. You just have to create a new app and generate a new bundle.</li>
<li>You can\u2019t even launch a <em>test</em> app without providing several different images for the store page and filling out all the required text fields.</li>
<li>Reviews are said to take 1\u20132 days in most cases; I found it was actually <em>much</em> longer than that (though updates once the app was initially approved typically take about a day).</li>
<li>Once, Google blocked my release for violating a policy that hadn\u2019t even gone into effect yet, and wouldn\u2019t for another two months. I never heard back on that dispute, either, so I just worked around it. (<strong>Edit</strong>: they got back to me eight days later, but by then the workaround was already in place.)</li>
<li>Things are buried in hard-to-find locations.</li></ul>
<p><strong>tl;dr: Google sucks</strong>. But hey, at least they let you list PWAs in their store, which is more than I can say for Apple.</p>
<p><strong>The upside of all of this</strong>, however, is that with a TWA app, unless you\u2019re changing a fundamental detail of the package itself (like the app ID or PWA URL), <em>you never need to upload a new package to the app store</em>; you can just update your actual PWA running on the web, and the Android app will pick up the changes when it launches.</p>
<p>As a side note, however: I <em>did</em> find some unexpected drawbacks to the \u201Cbuild once, run everywhere\u201D approach\u2014namely, that your interactive elements have to be able to handle clicks, right-clicks, touches, long-presses, swipes, and all types of key presses (pun intended) without those events doubling up or conflicting with each other. Something to keep in mind with this approach to development.</p>
<h3 id="${"monetization"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#monetization"}"><span class="${"icon icon-link"}"></span></a>Monetization</h3>
<p>While making money on Quina was never a primary goal, I put a lot of time and effort into the game, and I did hope that by getting it into a major app store, it might generate some revenue (though my expectations were never high; just hoping for some beer money here, maybe).</p>
${validate_component(CalloutPlusQuote, "CalloutPlusQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Initially, I wanted to do a free app, with occasional (not-too-frequent) requests to support the app with a donation, and an incentive to do so in order to unlock new features. However, the previously mentioned Google payment restriction made this complicated.
`;
          }
        })}
<p>If I went down that road, I would be locked into Google Pay (and its extortive fees) for support donations, which I wasn\u2019t even sure I could implement in a web app in the first place. Certainly not as easily as, say, Stripe.</p>
<p>What I eventually settled on was:</p>
<ul><li>Making the web version free, but with some content unlocked with a supporting donation;</li>
<li>Making the Android app paid, but with all content unlocked by default.</li></ul>
<p>You might be wondering how I achieved that, since it\u2019s all the same web app under the hood in both situations. Turns out, all Android apps send a unique header with their requests, so it was easy enough to tell which traffic was coming from my Android app, and set up conditional checks for content based on that header. (I even created custom <code>&lt;WebOnly&gt;</code> and <code>&lt;AndroidOnly&gt;</code> Vue components for content relevant only to one of the two.)</p>
<p>Incidentally, there\u2019s also a free option on the web version, just because I wanted the content to be accessible for anyone and everyone.</p>
<h2 id="${"final-thoughts"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#final-thoughts"}"><span class="${"icon icon-link"}"></span></a>Final thoughts</h2>
<p>I would consider Quina my biggest achievement as a developer so far. Though I\u2019ve made websites, small web apps, little PWAs and novel browser games as side projects before, none has ever had this breadth of scope, and an actual Android app is brand-new territory for me!</p>
<p>I\u2019m proud of the work I\u2019ve done here, even if nobody plays it. But I hope you\u2019ll give it a shot, and that you enjoy it if you do. (And if so, I\u2019d love it if you\u2019d <a href="${"https://play.google.com/store/apps/details?id=app.quina.collinsworth"}" rel="${"nofollow"}">leave a review on the Google Play Store</a>.)</p>
<p>Thanks for reading! Feel free to <a href="${"https://rickyjanuari.com/contact?from_page=announcing_quina"}" rel="${"nofollow"}">reach out</a> if you have any questions or comments.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/build-static-sveltekit-markdown-blog-50359119.js
  var build_static_sveltekit_markdown_blog_50359119_exports = {};
  __export(build_static_sveltekit_markdown_blog_50359119_exports, {
    default: () => Build_static_sveltekit_markdown_blog,
    metadata: () => metadata7
  });
  var css36, Warning, metadata7, Build_static_sveltekit_markdown_blog;
  var init_build_static_sveltekit_markdown_blog_50359119 = __esm({
    ".svelte-kit/output/server/chunks/build-static-sveltekit-markdown-blog-50359119.js"() {
      init_index_2749e1b7();
      init_Callout_7f4de651();
      init_SideNote_5c625ecb();
      init_PullQuote_effacfdf();
      css36 = {
        code: '@charset "UTF-8";:root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.warning.svelte-43bi7n{margin:var(--halfNote) 0;position:relative;padding:calc(var(--quarterNote) * 1.5);padding-left:var(--dottedHalfNote);font-size:0.8rem;font-style:italic;background:linear-gradient(to right, hsla(var(--redHS), 33%), var(--red));color:var(--white)}.warning.svelte-43bi7n code{background:transparent;font-size:0.9em}.warning.svelte-43bi7n::before{content:"\u26A0\uFE0Fimportant";content:"\u26A0\uFE0F ";font-family:var(--codeFont);font-style:normal;line-height:1;position:absolute;left:var(--quarterNote);top:calc(50% - 0.5em);font-size:1.2rem;height:1em;line-height:1;margin-bottom:var(--quarterNote)}.dark .warning{background:linear-gradient(to right, hsla(var(--redHS), 22%), hsla(var(--redHS), 28%))}',
        map: null
      };
      Warning = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        $$result.css.add(css36);
        return `<div class="${"warning svelte-43bi7n"}">${slots.default ? slots.default({}) : ``}
</div>`;
      });
      metadata7 = {
        "title": "Let's learn SvelteKit by building a static Markdown blog from scratch",
        "date": "2021-12-27",
        "updated": "2022-01-04",
        "categories": ["svelte", "javascript", "web", "sass"],
        "coverImage": "sveltekit-learn.png",
        "coverWidth": 16,
        "coverHeight": 9,
        "excerpt": "Learn the fundamentals of SvelteKit by building a statically generated blog from scratch, with Markdown support, Sass, an API, and an RSS feed."
      };
      Build_static_sveltekit_markdown_blog = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>If you\u2019ve ever recommended a favorite book, movie, or TV show to a friend who didn\u2019t enjoy it at all, you know exactly how I felt when I saw this message from a colleague:</p>
<blockquote><p>man I just tried to hello world SvelteKit and it is NOT for me</p></blockquote>
<p>I love <a href="${"https://svelte.dev"}" rel="${"nofollow"}">Svelte</a>, and I\u2019ve talked plenty about how much I\u2019ve enjoyed <a href="${"/blog/converting-from-gridsome-to-sveltekit"}">rewriting this site</a> using <a href="${"https://kit.svelte.dev"}" rel="${"nofollow"}">SvelteKit</a>. So my first reaction, of course, was disappointment. What went wrong?</p>
<p>But as I considered their reaction, I realized: it was valid.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Amazing though it is, SvelteKit isn&#39;t the simplest thing you could use as a static site\xA0generator.
`;
          }
        })}
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Amazing though it is, SvelteKit isn&#39;t the simplest thing you could use as a static site\xA0generator.
`;
          }
        })}
<p>Other tools like <a href="${"https://astro.build/"}" rel="${"nofollow"}">Astro</a>, <a href="${"https://www.11ty.dev/"}" rel="${"nofollow"}">Eleventy</a>, or <a href="${"https://www.gatsbyjs.com/"}" rel="${"nofollow"}">Gatsby</a> will likely get you up and running faster, since that\u2019s their sole focus. (<a href="${"https://kit.svelte.dev/docs#appendix-ssg"}" rel="${"nofollow"}">Even the SvelteKit docs make this point</a>.)</p>
<p>However, I still feel SvelteKit is worthy of serious consideration. Its capabilities are much more broad and flexible than SSGs, and there\u2019s plenty unique to love about its both developer and user experiences. So this post will be aimed at smoothing out that initial learning curve, to help you understand and take advantage of SvelteKit\u2019s wide range of possibilities.</p>
<h2 id="${"what-well-cover-and-what-to-know-first"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-well-cover-and-what-to-know-first"}"><span class="${"icon icon-link"}"></span></a>What we\u2019ll cover, and what to know first</h2>
<p><strong>This is a walkthrough of using SvelteKit to set up a prerendered static blog with Markdown, Sass and an API.</strong> (That\u2019s how this site is built, by the way.)</p>
<p>This is <em>also</em> an intro to SvelteKit itself, with a good overview of SvelteKit fundamentals that should be transferable to <em>any</em> project.</p>
<p>Finally, this is <em>fun</em>!* </p>
<p><em>*My opinion; citation needed</em></p>
<h3 id="${"youll-get-the-most-out-of-this-if-you"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#youll-get-the-most-out-of-this-if-you"}"><span class="${"icon icon-link"}"></span></a>You\u2019ll get the most out of this if you:</h3>
<ul><li>Know the fundamentals of front-end development and JavaScript;</li>
<li>Have at least a basic understanding of Svelte already. (You can probably follow along regardless, but I\u2019d recommend the <a href="${"https://svelte.dev/tutorial/basics"}" rel="${"nofollow"}">Svelte tutorial</a> first if you\u2019re brand-new);</li>
<li>Know the basics of both <a href="${"https://www.markdowntutorial.com/"}" rel="${"nofollow"}">Markdown</a> and <a href="${"https://sass-lang.com/"}" rel="${"nofollow"}">Sass</a>;</li>
<li>Understand the basics of fetching JSON from an API; and</li>
<li>Know how to install packages with <a href="${"https://www.npmjs.com/"}" rel="${"nofollow"}">npm</a>, and have npm installed already.</li></ul>
<p>Finally, if you just want to skip ahead and see the finished product, you can <a href="${"https://github.com/rickyjanuari/sveltekit-blog-guide-steps"}" rel="${"nofollow"}">check out this repo</a> or copy it\u2014though I have a proper, more fleshed-out <a href="${"https://github.com/rickyjanuari/sveltekit-blog-starter"}" rel="${"nofollow"}">SvelteKit starter here</a>.</p>
<p><strong>Let\u2019s get started!</strong></p>
<h2 id="${"creating-a-new-sveltekit-app"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#creating-a-new-sveltekit-app"}"><span class="${"icon icon-link"}"></span></a>Creating a new SvelteKit app</h2>
<p>To generate a new SvelteKit project, run this in your terminal (naturally, you can change <code>my-app</code> to whatever other title you prefer):</p>
<pre class="${"language-bash"}"><!-- HTML_TAG_START -->${`<code class="language-bash"><span class="token function">npm</span> init svelte@next my-app</code>`}<!-- HTML_TAG_END --></pre>
<p>When you run that <code>init</code> command, SvelteKit will ask you some questions about your project and how you want it set up: </p>
<p><img src="${"/images/post_images/sveltekit-init.png"}" alt="${"SvelteKit's setup prompt for which type of project you want to create; boilerplate, or demo"}"></p>
<p>We\u2019ll select the \u201CSkeleton project\u201D option.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `If this is your very first time using SvelteKit, feel free to choose &quot;SvelteKit demo app,&quot; poke around a bit to get a sense of how things work, then come back. It&#39;s a good intro, but it comes with several files and styles that would be a lot to undo as a starter.
`;
          }
        })}
<p>The setup tool will also ask for your preferences on TypeScript, ESlint, and Prettier. For simplicity\u2019s sake, I won\u2019t use TypeScript, but you\u2019re welcome to if you like. (Svelte works quite well with it.)</p>
<p>Once you\u2019ve made your choices, after a moment of installation, you should see <code>Your project is ready!</code> appear in your terminal, along with next steps and helpful links:</p>
<p><img src="${"/images/post_images/sveltekit-installation-confirmation.png"}" alt="${"'Your project is ready!' message appears in the terminal, along with confirmation of the options we've chosen and helpful links to get started."}"></p>
<p>At this point, let\u2019s open up the project in <a href="${"https://code.visualstudio.com/"}" rel="${"nofollow"}">VS Code</a> (or your text editor of choice). Then in the terminal, install the dependencies, and then run the dev server:</p>
<pre class="${"language-bash"}"><!-- HTML_TAG_START -->${`<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run dev -- --open</code>`}<!-- HTML_TAG_END --></pre>
<p>Complete those commands, and our new site will be running in a browser window!</p>
<p><img src="${"/images/post_images/welcome-to-sveltekit.png"}" alt="${"The default welcome page for a new SvelteKit project"}"></p>
<p>The skeleton project is definitely unexciting. There isn\u2019t even any CSS yet. But that\u2019s ok; it gives us the freedom to style our app however we like, without the need to remove or work around any existing code.</p>
<p>This is our blank canvas, and we\u2019ll get some paint on it soon enough.</p>
<h2 id="${"routing-in-sveltekit"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#routing-in-sveltekit"}"><span class="${"icon icon-link"}"></span></a>Routing in SvelteKit</h2>
<p>Like many frameworks (and for that matter, PHP), SvelteKit has a directory-based approach to routing and pages.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Any component inside <code>src/routes</code> becomes a page at that same relative\xA0route.
`;
          }
        })}
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Any component inside <code>src/routes</code> becomes a page at that same relative\xA0route.
`;
          }
        })}
<ul><li><code>index.svelte</code> is the homepage (<code>/</code>)</li>
<li>A file named <code>about.svelte</code> would become the <code>/about</code> page</li>
<li><code>blog/index.svelte</code> would be be the <code>/blog</code> page</li>
<li><code>blog/some-post.svelte</code> becomes <code>/blog/some-post</code></li></ul>
<h3 id="${"adding-pages"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#adding-pages"}"><span class="${"icon icon-link"}"></span></a>Adding pages</h3>
<p>For starters, just to get some pages on our site, let\u2019s create <code>about.svelte</code> and <code>contact.svelte</code> files inside of <code>src/routes</code>. (We can always delete or modify them later.) We\u2019ll also create a <code>blog</code> folder, with an <code>index.svelte</code> file inside.</p>
<p>Within each of those files, let\u2019s toss a quick heading, and maybe some text, just so we can see a little content.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Svelte files can just contain plain HTML.
`;
          }
        })}
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- about.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hi, I'm Josh!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is my about page.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- contact.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Get in touch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mailto:me@my.tld<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Email me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- blog/index.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>My blog posts will go here eventually\u2026<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Our <code>src/routes</code> folder should now look like this:</p>
<pre class="${"language-fs"}"><!-- HTML_TAG_START -->${`<code class="language-fs">\u{1F4C2} src
\u2517 \u{1F4C2} routes
  \u2523 \u{1F4C2} blog
  \u2503 \u2517 \u{1F4DC} index.svelte
  \u2523 \u{1F4DC} about.svelte
  \u2523 \u{1F4DC} contact.svelte
  \u2517 \u{1F4DC} index.svelte</code>`}<!-- HTML_TAG_END --></pre>
<p>At this point, you could visit <code>/contact</code>, <code>/about</code>, and/or <code>/blog</code> to see the pages we just created. There\u2019s not much there yet, of course, but it\u2019s nice to at least see that routing is taken care of for us automatically, just by placing the files in the <code>routes</code> folder.</p>
<h3 id="${"adding-a-layout"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#adding-a-layout"}"><span class="${"icon icon-link"}"></span></a>Adding a layout</h3>
<p>Most sites and apps have some elements that are reused on every page (a <code>&lt;header&gt;</code> and <code>&lt;footer&gt;</code> being the most common and obvious examples). Since adding those to every page would be tedious and error-prone, SvelteKit (like many other frameworks) conveniently lets us define <a href="${"https://kit.svelte.dev/docs#layouts"}" rel="${"nofollow"}">layouts</a>.</p>
<p>Inside of <code>src/routes</code>, make a new file named <code>__layout.svelte</code>.</p>
<pre class="${"language-fs"}"><!-- HTML_TAG_START -->${`<code class="language-fs">\u{1F4C2} src
\u2517 \u{1F4C2} routes
  \u2517 \u{1F4DC} __layout.svelte</code>`}<!-- HTML_TAG_END --></pre>
<p><strong>This name is a SvelteKit convention.</strong> SvelteKit automatically checks <code>routes</code> (and all its subdirectories) for a <code>__layout.svelte</code> file. That layout will \u201Cwrap\u201D all the content loaded from that route and its sub-routes. </p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `A layout becomes a parent component, and the current page will be slotted in as its child component.
`;
          }
        })}
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `A layout becomes a parent component, and the current page will be slotted in as its child component.
`;
          }
        })}
<p>So a layout at the top level of the <code>routes</code> folder will apply globally, on every page.</p>
<p>It\u2019s easier to show than tell, so open up our new <code>__layout.svelte</code> file, and let\u2019s add a placeholder header and footer:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- __layout.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>Hi, I'm a header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>Hello, I'm the footer.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Save that, and you should now see that header text above the page\u2019s contents, and the footer text below.</p>
<p><img src="${"/images/post_images/sveltekit-layout-shown.png"}" alt="${"The header text appears above the contents of the index.svelte file, and the footer text below."}"></p>
<h2 id="${"creating-components"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#creating-components"}"><span class="${"icon icon-link"}"></span></a>Creating components</h2>
<p>Manually typing routes in the browser isn\u2019t great, so let\u2019s add some navigation. In the process, we\u2019ll create our first component.</p>
<p>First, create a new folder called <code>lib</code> inside of <code>src</code>. (<code>lib</code> is another SvelteKit convention; more on that in a moment.)</p>
<p>Inside <code>src/lib</code>, we\u2019ll create a folder named <code>components</code>, just for organizational purposes. And inside of <em>that</em>, we\u2019ll create a new component named <code>Header.svelte</code>:</p>
<pre class="${"language-fs"}"><!-- HTML_TAG_START -->${`<code class="language-fs">\u{1F4C2} src
\u2523 \u{1F4C1} routes
\u2517 \u{1F4C2} lib
  \u2517 \u{1F4C2} components
    \u2517 \u{1F4DC} Header.svelte</code>`}<!-- HTML_TAG_END --></pre>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `You don&#39;t have to capitalize component names, or keep components in their own folder, but both are generally preferred conventions.
`;
          }
        })}
<p>Inside our new <code>Header</code> component, let\u2019s place some proper (albeit basic) navigation:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- Header.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/contact<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Contact<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Save that, and let\u2019s go back to <code>__layout.svelte</code> to use it!</p>
<p>To use a component, we first need to <code>import</code> it, which means we\u2019ll need to add a <code>&lt;script&gt;</code> tag to our layout. (I personally prefer it at the top of the file, but Svelte gives you the freedom to arrange components however you like.) Once imported, we can replace our placeholder header with the component:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- __layout.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">'$lib/components/Header.svelte'</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- The rest of the HTML here --></span></code>`}<!-- HTML_TAG_END --></pre>
<p><strong>Notice the import path.</strong> <code>$lib</code> is a handy alias that goes directly to <code>src/lib</code>, saving you from typing tedious relative paths. (<code>$lib</code> is the only alias SvelteKit ships with, but you can add your own, from <code>jsconfig.json</code>.)</p>
<p>Anyway, now we should see something <em>slightly</em> more user-friendly in our browser:</p>
<p><img src="${"/images/post_images/sveltekit-header-component.png"}" alt="${"Our new header shows up now in the site"}"></p>
<p>The styling still isn\u2019t great, but it\u2019s usable. We can click between pages now, which will make testing things out a lot easier.</p>
<h3 id="${"component-styling"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#component-styling"}"><span class="${"icon icon-link"}"></span></a>Component styling</h3>
<p><strong>Svelte component styles are scoped by default.</strong> That makes it easy to write CSS without fear of it bleeding out and having side effects anywhere outside the component.</p>
<p>To try it out, in <code>Header.svelte</code>, add a <code>&lt;style&gt;</code> tag. (It could go anywhere, but I prefer to put it at the end.)</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- Header.svelte --></span>

<span class="token comment">&lt;!-- ... The rest of the file's contents here --></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">header</span> <span class="token punctuation">&#123;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> lightskyblue<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">ul</span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">gap</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">a</span> <span class="token punctuation">&#123;</span>
    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>If you save and take a look at the site now, you should see your Header component looking a little more header-like. You might <em>also</em> notice that the styling doesn\u2019t affect anything in our main page content. That\u2019s the power of scoping!</p>
<p><img src="${"/images/post_images/sveltekit-scoped.png"}" alt="${"The links in our Header component are not underlined or blue, but links outside the component remain with the default styling."}"></p>
<p>If you want to, you could repeat this process with a <code>&lt;Footer /&gt;</code> component now, too. I\u2019ll skip over it, since it\u2019s just the same thing over again, but it\u2019s a good thing to do at some point.</p>
<h3 id="${"the-difference-between-components-and-pages"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#the-difference-between-components-and-pages"}"><span class="${"icon icon-link"}"></span></a>The difference between components and pages</h3>
<p>It might be a little confusing that we\u2019re jumping in and out of several <code>.svelte</code> files now, each with a different role. So just to clarify before moving on:</p>
<ul><li><p>Any component inside of <code>src/routes</code> becomes its own page (unless its name starts with an underscore);</p></li>
<li><p>Otherwise, we\u2019re putting them in  <code>src/lib/components</code>. They can be used independently, and don\u2019t get routes of their own.</p></li></ul>
<h2 id="${"stylesheets-in-sveltekit"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#stylesheets-in-sveltekit"}"><span class="${"icon icon-link"}"></span></a>Stylesheets in SvelteKit</h2>
<p>Svelte lets you import stylesheets directly into components\u2014including pages and layouts. There are other ways to load stylesheets, but I find that\u2019s the best. It\u2019s easy, for one thing, but more importantly, it <em>also</em> preprocesses them automatically, which we\u2019ll want when we add Sass shortly.</p>
<p>Create a new folder inside of <code>src/lib</code> for your styles, and add a <code>style.css</code> file inside it. </p>
<pre class="${"language-fs"}"><!-- HTML_TAG_START -->${`<code class="language-fs">\u{1F4C2} src
\u2523 \u{1F4C1} routes
\u2517 \u{1F4C2} lib
  \u2523 \u{1F4C1} components
  \u2517 \u{1F4C2} styles
    \u2517 \u{1F4DC} style.css </code>`}<!-- HTML_TAG_END --></pre>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `There are no rules about how you structure things inside of <code>src/lib</code>. Feel free to organize your folders however you like.
`;
          }
        })}
<p>You can add whatever CSS you prefer, but if you need a suggestion, here\u2019s a little bit of boilerplate that should begin to get things looking <em>slightly</em> better:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token comment">/* style.css */</span>
<span class="token selector">body</span> <span class="token punctuation">&#123;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">main</span> <span class="token punctuation">&#123;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 2rem auto<span class="token punctuation">;</span>
  <span class="token property">max-width</span><span class="token punctuation">:</span> 40rem<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Once we\u2019ve got a stylesheet with some CSS in it, loading it globally is as easy as importing the file in our layout:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- __layout.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">'$lib/components/Header.svelte'</span>
  <span class="token keyword">import</span> <span class="token string">'$lib/styles/style.css'</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- ...HTML here --></span></code>`}<!-- HTML_TAG_END --></pre>
<p><img src="${"/images/post_images/sveltekit-css.png"}" alt="${"Our CSS is now showing on the site and making it look (slightly) less ugly."}"></p>
<p>Since SvelteKit is server-rendered, if you view the page source, you\u2019ll even see our style has been added to the HTML, rather than being client-rendered. Neat!</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Importing stylesheets in JavaScript files is not a web standard; it&#39;s just supported by some bundlers and build tools, popularized by React and Webpack.
`;
          }
        })}
<h3 id="${"adding-sass-to-sveltekit"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#adding-sass-to-sveltekit"}"><span class="${"icon icon-link"}"></span></a>Adding Sass to SvelteKit</h3>
<p>One of the great things about Svelte is how comparatively easy it is to add external processors, thanks to <a href="${"https://github.com/sveltejs/svelte-preprocess"}" rel="${"nofollow"}"><code>svelte-preprocess</code></a>.</p>
<blockquote><p><code>svelte-preprocess</code> automatically transforms the code in your Svelte templates to provide support for TypeScript, PostCSS, scss/sass, Less, and many other technologies.</p></blockquote>
<p>Our next step is to install both <code>svelte-preprocess</code> and <code>sass</code>, which we may as well do at the same time:</p>
<pre class="${"language-bash"}"><!-- HTML_TAG_START -->${`<code class="language-bash"><span class="token function">npm</span> i -D svelte-preprocess sass</code>`}<!-- HTML_TAG_END --></pre>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `This command installs the most modern version of Sass, which isn&#39;t compatible with all versions of Node. If you hit errors, you may need to upgrade your Node version, or install the older <code>node-sass</code> instead.
`;
          }
        })}
<h4 id="${"modifying-the-svelte-config"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#modifying-the-svelte-config"}"><span class="${"icon icon-link"}"></span></a>Modifying the Svelte config</h4>
<p>Next, open the <code>svelte.config.js</code> file, found in the project root.</p>
<p>As the name implies, <code>svelte.config.js</code> is the home for, well, configuration. It\u2019s where we\u2019ll make any needed changes to SvelteKit\u2019s options and compiler.</p>
<p>This change is minimal; we just need to import <code>svelte-preprocess</code>, and then add it to SvelteKit\u2019s list of preprocessors.</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// svelte.config.js</span>
<span class="token keyword">import</span> sveltePreprocess <span class="token keyword">from</span> <span class="token string">'svelte-preprocess'</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">kit</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ...other kit options here already */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token literal-property property">preprocess</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Note that you\u2019ll need to create the <code>preprocess</code> option; it\u2019s not there by default. (We\u2019ll add Markdown processing here later, too.)</p>
<p>Also note that you <em>can</em> pass an object with more granular options into the <code>sveltePreprocess()</code> function, but we won\u2019t for now. It knows what to do with Sass by default, so no further customization is needed.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `It&#39;s worth mentioning the <code>scss.prependData</code> option, which allows you to automatically inject code at the start of any Sass processing (such as Sass variables or an <code>@import</code>). You can read more in the <a href="${"https://github.com/sveltejs/svelte-preprocess/blob/main/docs/getting-started.md#31-prepending-content"}"><code>svelte-preprocess</code> docs</a>; I just wanted to mention it since it&#39;s quite handy. 
`;
          }
        })}
<p><strong>One more quick, important thing to know:</strong> you\u2019ll want to stop and restart your dev server any time you make a config change.</p>
<h3 id="${"adding-scss-to-component-styles"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#adding-scss-to-component-styles"}"><span class="${"icon icon-link"}"></span></a>Adding SCSS to component styles</h3>
<p>Now that we\u2019ve got both Sass and our preprocessor installed, you can use Sass inside any component\u2019s <code>&lt;style&gt;</code> block just by adding a <code>lang</code> attribute, like so:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  // We can write SCSS here!
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<h3 id="${"using-global-scss-files"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#using-global-scss-files"}"><span class="${"icon icon-link"}"></span></a>Using global SCSS files</h3>
<p>Linking to Sass files is actually exactly the same as linking to CSS files, like we\u2019ve already covered. In fact, at this point, you could just rename the existing <code>style.css</code> file to <code>style.scss</code>. (You\u2019ll need to update the <code>import</code> in our layout, too, but that\u2019s it.)</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- __layout.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token string">'$lib/styles/style.scss'</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Ok, we\u2019ve gotten a pretty good idea of project structure and styling at this point. Let\u2019s move on to the last big missing piece: support for Markdown.</p>
<h2 id="${"adding-markdown-to-sveltekit-with-mdsvex"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#adding-markdown-to-sveltekit-with-mdsvex"}"><span class="${"icon icon-link"}"></span></a>Adding Markdown to SvelteKit with mdsvex</h2>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `The word &quot;svelte&quot; does not make for smooth portmanteaus, but that doesn&#39;t slow the Svelte community down much.
`;
          }
        })}
<p>If you\u2019ve heard of MDX (generally used in React-based projects), you could think of the curiously named <a href="${"https://mdsvex.pngwn.io/"}" rel="${"nofollow"}">mdsvex</a> as the Svelte equivalent. </p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `The word &quot;svelte&quot; does not make for smooth portmanteaus, but that doesn&#39;t slow the Svelte community down much.
`;
          }
        })}
<p>Anyway, mdsvex powers everything we might want to do with Markdown:</p>
<ul><li>mdsvex handles converting Markdown to HTML;</li>
<li>It also allows Markdown files to be used as components; and</li>
<li>Finally, mdsvex lets us use Svelte components <em>inside</em> Markdown.</li></ul>
<p>First, install mdsvex:</p>
<pre class="${"language-bash"}"><!-- HTML_TAG_START -->${`<code class="language-bash"><span class="token function">npm</span> i -D mdsvex</code>`}<!-- HTML_TAG_END --></pre>
<p>Next, we\u2019ll need to add mdsvex to our config. Open <code>svelte.config.js</code>, and modify the code like so:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// svelte.config.js</span>
<span class="token comment">/* Other imports here */</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mdsvex <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'mdsvex'</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">kit</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* Kit options here */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  
  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.svelte'</span><span class="token punctuation">,</span> <span class="token string">'.md'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

  <span class="token literal-property property">preprocess</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">mdsvex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.md'</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>If you\u2019d like to get into the details of that config:</p>
<ul><li>The <code>extensions</code> config property tells Svelte what types of files to treat as components (allowing them to be imported and used in the same way Svelte components are);</li>
<li>The <code>mdsvex()</code> function preprocesses Markdown to HTML\u2014but it only targets <code>.svx</code> files by default, so we modify that as an argument.</li></ul>
<p><strong>Reminder:</strong> be sure to restart your dev server after making config changes. </p>
<p><em>If you\u2019re running into errors, double-check that everything installed properly, all the necessary imports are present in your config file, and there are no syntax errors in the config file.</em></p>
<h3 id="${"markdown-pages"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#markdown-pages"}"><span class="${"icon icon-link"}"></span></a>Markdown pages</h3>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Thanks to mdsvex, we can now use Markdown files as pages.
`;
          }
        })}
<p>Because of the config changes we just made, Markdown files can now be imported and used just like Svelte components.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Thanks to mdsvex, we can now use Markdown files as pages.
`;
          }
        })}
<p>Just to try it out, create <code>src/routes/uses.md</code> and throw some Markdown into it. You\u2019ll be able to see your content by visiting <code>/uses</code>:</p>
<pre class="${"language-fs"}"><!-- HTML_TAG_START -->${`<code class="language-fs">\u{1F4C2} src
\u2517 \u{1F4C2} routes
  \u2517  \u{1F4DC} uses.md</code>`}<!-- HTML_TAG_END --></pre>
<pre class="${"language-markdown"}"><!-- HTML_TAG_START -->${`<code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Uses</span>

<span class="token bold"><span class="token punctuation">**</span><span class="token content">Here's some stuff I use</span><span class="token punctuation">**</span></span>

<span class="token list punctuation">-</span> SvelteKit
<span class="token list punctuation">-</span> VS Code
<span class="token list punctuation">-</span> Emojis \u{1F60E}</code>`}<!-- HTML_TAG_END --></pre>
<p><img src="${"/images/post_images/sveltekit-uses-rendered.png"}" alt="${"Our markdown file rendered out as a page on our website"}"></p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Markdown pages are a handy option for text-based content, since Markdown is generally easier to author than HTML.
`;
          }
        })}
<p>You can even import and use Markdown content <em>inside of</em> other files, if you want to\u2014for example, if part of the page needed state or interactivity, but part could just be Markdown text.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Markdown pages are a handy option for text-based content, since Markdown is generally easier to author than HTML.
`;
          }
        })}
<p>This <code>/uses</code> page doesn\u2019t have to be permanent, but keep it around for now; we\u2019ll reference it again in a little bit. But first, let\u2019s cover a couple other nice features of mdsvex.</p>
<h3 id="${"code-blocks-in-markdown"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#code-blocks-in-markdown"}"><span class="${"icon icon-link"}"></span></a>Code blocks in markdown</h3>
<p>Handily, mdsvex comes with <a href="${"https://prismjs.com/"}" rel="${"nofollow"}">prism.js</a> pre-installed for code syntax highlighting. All you need to do is note the language (by adding it to the opening triple backticks), and mdsvex will process it appropriately.</p>
<pre class="${"language-markdown"}"><!-- HTML_TAG_START -->${`<code class="language-markdown">&#96;&#96;&#96;js
// JavaScript goes here,
// And will be syntax-highlighted!
&#96;&#96;&#96;</code>`}<!-- HTML_TAG_END --></pre>
<p>All the code blocks on this website are made using this technique. And as a bonus: mdsvex even has <code>svelte</code> available as a language option!</p>
<p>Just note that you\u2019ll need some CSS to handle the coloring, but <a href="${"https://github.com/PrismJS/prism-themes"}" rel="${"nofollow"}">many themes are available</a> to either use as-is, or as a base for your own styles.</p>
<h3 id="${"using-svelte-components-in-markdown"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#using-svelte-components-in-markdown"}"><span class="${"icon icon-link"}"></span></a>Using Svelte components in Markdown</h3>
<p>As mentioned before: mdsvex allows you to use Svelte components <em>inside</em> of Markdown!</p>
<p>To do so, just drop in a <code>script</code> tag at the start of the content (after the frontmatter), and import the component within. You can then add the component to your Markdown just like you would anywhere else:</p>
<pre class="${"language-markdown"}"><!-- HTML_TAG_START -->${`<code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"># frontmatter goes here</span>
<span class="token punctuation">---</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
  import SomeComponent from '$lib/components/SomeComponent.svelte'
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token title important"><span class="token punctuation">#</span> Markdown content here</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SomeComponent</span> <span class="token punctuation">/></span></span>

More markdown <span class="token italic"><span class="token punctuation">_</span><span class="token content">here</span><span class="token punctuation">_</span></span>!</code>`}<!-- HTML_TAG_END --></pre>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `As you might have already realized: this means you can even import Markdown files into <em>other</em> Markdown files!
`;
          }
        })}
<h2 id="${"setting-up-the-blog"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#setting-up-the-blog"}"><span class="${"icon icon-link"}"></span></a>Setting up the blog</h2>
<p>Now that we have Markdown processing all set up, it\u2019s time to get into the real meat of this tutorial, and begin setting up the blog.</p>
<p>Thanks to SvelteKit\u2019s flexibility, there are actually a few ways to do this, each with their own tradeoffs. But ultimately, they all work well (especially when pre-rendering), so I\u2019ve chosen the simplest.</p>
<h3 id="${"adding-some-markdown-posts"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#adding-some-markdown-posts"}"><span class="${"icon icon-link"}"></span></a>Adding some Markdown posts</h3>
<p>Going forward, it will be handy to have at least a couple of posts to work with, so let\u2019s create some inside of <code>src/routes/blog</code>. (If you already have some Markdown post files, feel free to just copy those over instead.)</p>
<p>No need for anything fancy; just at least a couple of <code>.md</code> files, with a tiny bit of Markdown in them for us to see. Something like this will work just fine:</p>
<pre class="${"language-fs"}"><!-- HTML_TAG_START -->${`<code class="language-fs">\u{1F4C2} src
\u2517 \u{1F4C2} routes
  \u2517 \u{1F4C2} blog
    \u2523 \u{1F4DC} 1.md
    \u2517 \u{1F4DC} 2.md</code>`}<!-- HTML_TAG_END --></pre>
<pre class="${"language-markdown"}"><!-- HTML_TAG_START -->${`<code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml">title: Post One
date: "2021-12-14"</span>
<span class="token punctuation">---</span></span>

Hello, I am <span class="token italic"><span class="token punctuation">_</span><span class="token content">Post One.</span><span class="token punctuation">_</span></span>

<span class="token bold"><span class="token punctuation">**</span><span class="token content">Nice to meet you!</span><span class="token punctuation">**</span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>The names and content aren\u2019t important, but we <em>will</em> be using the <code>title</code> and <code>date</code> frontmatter properties later, so be prepared.</p>
<p>You can now visit <code>/blog/x</code> (where <code>x</code> is the slug of a blog post file) to see the post content live on the site:</p>
<p><img src="${"/images/post_images/sveltekit-min-blog-post-render.png"}" alt="${"The content of the markdown file rendered inside the blog layout"}"></p>
<p>Well that was easy!</p>
<p>However, what we\u2019re seeing above is only the content. We <em>also</em> want to display the post\u2019s frontmatter properties. And for that, we\u2019ll need an <a href="${"https://mdsvex.pngwn.io/docs#layouts"}" rel="${"nofollow"}">mdsvex layout</a>.</p>
<h3 id="${"adding-a-mdsvex-layout"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#adding-a-mdsvex-layout"}"><span class="${"icon icon-link"}"></span></a>Adding a mdsvex layout</h3>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `If a named layout shares the name of the current directory, mdsvex will use it automatically.
`;
          }
        })}
<p>mdsvex lets us designate a layout\u2014that is, a Svelte component\u2014to render Markdown files, much the same way that SvelteKit layouts render pages.</p>
<p>The two are similar, but not to be confused. Unlike SvelteKit layouts, there\u2019s no convention to follow with the naming or placement of mdsvex layouts; it\u2019s all explicit config.</p>
<p>So since it\u2019s our choice, we\u2019ll name our layout <code>_post.svelte</code>, and put it in <code>src/routes/blog</code> (just to keep related things close together).</p>
<pre class="${"language-fs"}"><!-- HTML_TAG_START -->${`<code class="language-fs">\u{1F4C2} src
\u2517 \u{1F4C2} routes
  \u2517 \u{1F4C2} blog
    \u2517 \u{1F4DC} _post.svelte</code>`}<!-- HTML_TAG_END --></pre>
<p><strong>Why the underscore?</strong> Any route that begins with an underscore is private, i.e., excluded from the site\u2019s routes. Since this layout file will just serve as a template and won\u2019t have content of its own, we don\u2019t want it to have its own route or be directly visited.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Any route that begins with an underscore is private, i.e., excluded from the site&#39;s routes.
`;
          }
        })}
<p>Once the file is created, head back to <code>svelte.config.js</code> and add a <code>layout</code> property to the <code>mdsvex</code> function options. </p>
<p>There are a few ways to designate mdsvex layouts, but I find <a href="${"https://mdsvex.pngwn.io/docs#named-layouts"}" rel="${"nofollow"}">named layouts</a> handiest. </p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `If a named layout shares the name of the current directory, mdsvex will use it automatically.
`;
          }
        })}
<p>Here\u2019s how to create one (named \u201Cblog\u201D in this case, since we want this layout to apply inside the <code>blog</code> folder):</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// svelte.config.js</span>

<span class="token comment">/* Imports here */</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* ...Other config properties here */</span>

  <span class="token literal-property property">preprocess</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">mdsvex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.md'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">blog</span><span class="token operator">:</span> <span class="token string">'src/routes/blog/_post.svelte'</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>(<em>Note that the file path must be relative</em>.) And as always, be sure to restart the dev server after making the change.</p>
<p>Now, inside the file we designated as our mdsvex layout, all frontmatter properties are available as component props. We just need to name and call them, like so:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- _post.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">let</span> title
  <span class="token keyword">export</span> <span class="token keyword">let</span> date
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Published: <span class="token language-javascript"><span class="token punctuation">&#123;</span>date<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/></span></span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `It might be a good idea to set defaults for each prop, in case it&#39;s missing from the frontmatter. Also, be sure the layout has a <code>&lt;slot /&gt;</code>, or the file&#39;s contents won&#39;t be shown. And finally, dates are tricky. If your dates aren&#39;t strings in the Markdown, you might need to add some formatting and manipulation.
`;
          }
        })}
<p>That in place, now when we load a blog post, we should see the layout pulling the frontmatter properties in:</p>
<p><img src="${"/images/post_images/sveltekit-rendered-md-post-with-meta.png"}" alt="${"Our blog post page is now rendering with a title and a date."}"></p>
<p>However, thanks to our named layout matching <em>only</em> <code>blog</code> routes, if we load the <code>/uses</code> page, we\u2019ll see the same layout does <em>not</em> apply there. Pretty awesome! (<em>Yes, that\u2019s all I wanted us to save it for. You can delete it now if you want</em>.)</p>
<p>Worth knowing: you can opt a Markdown file out of any mdsvex layout by adding <code>layout: false</code> to the frontmatter. You can <em>also</em> set up a fallback, in case no route matches; <a href="${"https://mdsvex.pngwn.io/docs/#named-layouts"}" rel="${"nofollow"}">see the mdsvex layout docs</a> for details.</p>
<h4 id="${"tradeoffs-and-other-options"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#tradeoffs-and-other-options"}"><span class="${"icon icon-link"}"></span></a>Tradeoffs and other options</h4>
<p>Using mdsvex layouts and dropping Markdown files directly into <code>src/routes/blog</code> is the simplest way to render individual posts. The main <em>drawback</em> is: unfortunately, as of this writing, mdsvex layouts can\u2019t use Sass or TypeScript (as nearly as I can tell, at least). The compiler seems to break when I try.</p>
<p>That might just be my config setup, but even aside from that, you\u2019re still a little more bought in to mdsvex with this approach. (Not that you wouldn\u2019t be otherwise, but it\u2019s one more feature you\u2019re relying on.) Neither of those tradeoffs may be deal-breakers for you, but they\u2019re still tradeoffs.</p>
<p>The other possible good approach would be to use a dynamic <code>[post].svelte</code> route, and tuck all your posts away in a hidden folder. That\u2019s a little more complex, but also perhaps a bit more flexible. We\u2019ll cover dynamic routes more later, and the same approach can easily be adapted for all blog posts, if you want. For now, I just wanted to mention the tradeoffs.</p>
<p>You could also use a nested SvelteKit layout, but I don\u2019t like that option because it will try to work on both our individual post pages <em>and</em> our blog index page, and we don\u2019t want that.</p>
<hr>
<p>All right, at this point, we\u2019ve got a good handle on individual posts. Now, it\u2019s time to build out the blog index page, where we\u2019ll list <em>all</em> our posts. To do that\u2014because we\u2019ll likely want to list posts in multiple ways in various places\u2014we\u2019ll build out an API endpoint for posts.</p>
<h2 id="${"sveltekit-endpoints"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#sveltekit-endpoints"}"><span class="${"icon icon-link"}"></span></a>SvelteKit endpoints</h2>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Endpoints work the same way as pages, as far as routing. But where pages return HTML, an endpoint returns data.
`;
          }
        })}
<p>Up until now, every route we\u2019ve created has been a page. But SvelteKit offers <em>another</em> type of route, too: <a href="${"https://kit.svelte.dev/docs#routing-endpoints"}" rel="${"nofollow"}">endpoints</a>.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Endpoints work the same way as pages, as far as routing. But where pages return HTML, an endpoint returns data.
`;
          }
        })}
<p>There are just three important conventions to follow when creating an endpoint with SvelteKit:</p>
<ol><li><strong>An endpoint\u2019s route should include the data type it returns.</strong> For example, <code>/api/posts.json</code>. (Endpoint data is usually JSON, but it doesn\u2019t have to be.)</li>
<li><strong>An endpoint should export a function for each <a href="${"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"}" rel="${"nofollow"}">HTTP verb</a> it accepts.</strong> This will often just be a <code>get</code> function, but you can also use <code>post</code>, etc.</li>
<li><strong>Endpoint functions should return an object with <code>status</code> and <code>body</code>.</strong> (Returning nothing is a 404 by default.)</li></ol>
<p><strong>Why an endpoint?</strong> Because we might have other places in our app we want to access these posts, too.</p>
<p>We <em>could</em> just put the necessary code straight in where we need it instead of going to the trouble of making an API endpoint. But unless your blog is extremely simple, odds are, you\u2019ll want to grab posts in more than one place. Having an endpoint reduces the overhead of rewriting that code to go grab our posts all over the place.</p>
<p>Anyway, there\u2019s more detail in the <a href="${"https://kit.svelte.dev/docs#routing-endpoints"}" rel="${"nofollow"}">endpoint docs</a>, but it\u2019s less complicated than it sounds, so let\u2019s dive in.</p>
<h3 id="${"creating-an-endpoint-for-our-posts"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#creating-an-endpoint-for-our-posts"}"><span class="${"icon icon-link"}"></span></a>Creating an endpoint for our posts</h3>
<p>Since we might decide to add more endpoints later, let\u2019s create a <code>src/routes/api</code> folder, and inside it, a new file named <code>posts.json.js</code>.</p>
<pre class="${"language-fs"}"><!-- HTML_TAG_START -->${`<code class="language-fs">\u{1F4C2} src
\u2517 \u{1F4C2} routes
  \u2517 \u{1F4C2} api
    \u2517 \u{1F4DC} posts.json.js</code>`}<!-- HTML_TAG_END --></pre>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `The file extension is removed from the end of all routes, so this endpoint will just be <code>/api/posts.json</code>.
`;
          }
        })}
<p>Inside this new file, we\u2019ll need to export a <code>get</code> method (since \u201Cget\u201D is the HTTP verb we\u2019ll accept; this endpoint will only return data, not accept it).</p>
<p>Let\u2019s do a quick test, just to see it in action:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// posts.json.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">"Welcome to my API"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>With that in place, we should be able to visit <code>/api/posts.json</code> and see the following (unimpressive, but neat!) JSON loaded in the browser:</p>
<p><img src="${"/images/post_images/sveltekit-dummy-json.png"}" alt="${"'We got here!'"}"></p>
<p>How <em>cool</em> is it that!? Our API route doesn\u2019t return anything useful just yet, obviously, but it\u2019s still pretty awesome to have it up and running that easily!</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `While we won&#39;t add it here, you can add an argument to <code>get</code>, which will pass in all the headers, query parameters, and lots of other info about the request.
`;
          }
        })}
<h3 id="${"returning-posts-from-an-endpoint"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#returning-posts-from-an-endpoint"}"><span class="${"icon icon-link"}"></span></a>Returning posts from an endpoint</h3>
<p>The next step is to actually get data from Markdown files, and return it in the API endpoint. We\u2019ll be leaning directly on <a href="${"https://vitejs.dev/"}" rel="${"nofollow"}">Vite</a> for that (the build tool that powers SvelteKit under the hood).</p>
<p>This is going to be a lot, but we\u2019ll break it down in a second.</p>
<p>Inside our <code>posts.json.js</code> file, we\u2019ll put the following code:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// posts.json.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> allPostFiles <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">'../blog/*.md'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> iterablePostFiles <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>allPostFiles<span class="token punctuation">)</span>

  <span class="token keyword">const</span> allPosts <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
    iterablePostFiles<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>path<span class="token punctuation">,</span> resolver<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> metadata <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> postPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>

      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">meta</span><span class="token operator">:</span> metadata<span class="token punctuation">,</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> postPath<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>

  <span class="token keyword">const</span> sortedPosts <span class="token operator">=</span> allPosts<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>date<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> sortedPosts
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p><strong>Whoa!</strong> Again, that might look like a lot, but when you consider it\u2019s actually <em>everything</em> we need to create an API endpoint to return <em>all</em> our site\u2019s posts, it\u2019s kind of remarkable how few lines that is.</p>
<p><strong>Let\u2019s go over what\u2019s happening in that code:</strong></p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `SvelteKit handles converting the response to JSON and setting the proper headers automatically.
`;
          }
        })}
<ul><li><code>import.meta.glob</code> is a Vite function. It imports any files that match the glob (wildcard string) provided\u2014in this case, all <code>.md</code> files inside <code>src/routes/blog</code>.<ul><li>That function returns an object where each file\u2019s relative path is the key, and the value is a \u201Cresolver\u201D function (my term; not official) that loads the file contents as a JavaScript promise. </li></ul></li>
<li>The <code>map</code> method is there to shape each file\u2019s data, so it\u2019s easier to work with on the front end. And since each item waits for a promise, we wrap it in an <code>await Promise.all</code>.<ul><li>Since we know the path will begin with <code>..</code> and end with <code>.md</code>, we can safely use <code>.slice(2, -3)</code> to remove those characters and end up with the route.</li></ul></li>
<li>Next, we sort the posts by descending date (since this is a blog, of course, and we\u2019ll want our newest posts showing first).<ul><li>Note that your posts will need a validly formatted <code>date</code> frontmatter property for the sorting to work\u2014i.e., something  <code>new Date()</code> can understand.</li></ul></li>
<li>Finally, we <code>return</code> the finished product as the <code>body</code> of our API response. (The 200 status code is implicit here, since we\u2019re successfully returning a <code>body</code>.) SvelteKit handles the conversion to JSON.</li></ul>
<p><strong>Let\u2019s try it out!</strong> Refresh your <code>/api/posts.json</code> path now, and you should see some <em>real</em> data!</p>
<p><img src="${"/images/post_images/sveltekit-posts-json.png"}" alt="${"The data from our posts is now coming through as JSON!"}"></p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `SvelteKit handles converting the response to JSON and setting the proper headers automatically.
`;
          }
        })}
<p>Even cooler: this endpoint will update automatically with each Markdown post we add!</p>
<h2 id="${"finishing-the-blog-index-page"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#finishing-the-blog-index-page"}"><span class="${"icon icon-link"}"></span></a>Finishing the blog index page</h2>
<p>Now that we have an endpoint for all our posts, building out our blog index page will be a piece of cake!</p>
<p>We <em>could</em> do the loading client-side, with a <code>fetch</code> call in an <code>onMount</code> function. That would work. But it would <em>also</em> result in a loading state with no visible content, which isn\u2019t a great user experience. So instead, let\u2019s use SvelteKit\u2019s built-in server-side rendering.</p>
<h3 id="${"server-side-rendering-with-load"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#server-side-rendering-with-load"}"><span class="${"icon icon-link"}"></span></a>Server-side rendering with <code>load</code></h3>
<p>Page and layout components can have a <a href="${"https://kit.svelte.dev/docs#loading"}" rel="${"nofollow"}"><code>load</code> function</a>, which runs <em>before</em> the component is created\u2014making it perfect for fetching API data, such as our blog posts.</p>
<p>Because it runs on the server, the <code>load</code> function is called from its own distinct <code>&lt;script&gt;</code> tag, differentiated with a <code>context=&quot;module&quot;</code> attribute:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Runs before the component is created</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// This is the "normal" client-side script</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Other important things to know about the <code>load</code> function:</p>
<ul><li><strong>It has access to a few special arguments</strong> (including <code>url</code> and <code>params</code>, which contain contextual info about the request).</li>
<li><strong>It should return an object</strong>. Among other things, this can include a status code, and props for the  component to use.</li>
<li><strong>It runs both server- and client-side.</strong> That\u2019s mostly unimportant when prerendering to static files, as we are. Still, <code>load</code> shouldn\u2019t reference environment-specific things, like <code>window</code> or <code>process</code>.</li></ul>
<p>I already mentioned <code>url</code> and <code>params</code>, but one other argument the <code>load</code> function has access to is <code>fetch</code>, which allows the browser\u2019s <code>fetch</code> function to be used on the server. (Ordinarily, <code>fetch</code> is browser-only.)</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- src/routes/blog/index.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> fetch <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api/posts.json'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> allPosts <span class="token operator">=</span> <span class="token keyword">await</span> posts<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">posts</span><span class="token operator">:</span> allPosts
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>That bit of server-side loading handles everything we need! Now we\u2019ve got a <code>posts</code> prop being passed to the component, and we can use it to loop over and render posts on our blog index page.</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- src/routes/blog/index.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// Our &#96;load&#96; function here</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">let</span> posts
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
  <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">posts </span><span class="token keyword">as</span> <span class="token language-javascript">post<span class="token punctuation">&#125;</span></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
          <span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
      Published <span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>date<span class="token punctuation">&#125;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>The HTML in the above example is a bit simple (and doesn\u2019t properly account for a scenario in which there are no posts to display), but hopefully you get the gist. You may want to add other code, based on the frontmatter in your own blog posts. (One thing definitely missing is a featured image/image URL, but you could also have excerpts or other content as well.)</p>
<p><img src="${"/images/post_images/sveltekit-posts-list.png"}" alt="${"A list of our posts, each linked, on our /blog route."}"></p>
<h2 id="${"prerendering-with-the-static-adapter"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#prerendering-with-the-static-adapter"}"><span class="${"icon icon-link"}"></span></a>Prerendering with the static adapter</h2>
<p><strong>SvelteKit is server-rendered by default.</strong> That\u2019s great, because server-side rendering is generally better for performance, accessibility, and SEO. However, that also means static file prerendering (which is what we want) is opt-in.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `SvelteKit has a number of available adapters, which shape our project&#39;s build output based on how we&#39;d like to\xA0deploy. 
`;
          }
        })}
<p>You <em>can</em> <a href="${"https://kit.svelte.dev/docs#ssr-and-javascript-prerender"}" rel="${"nofollow"}">manually make any page prerendered</a>\u2014handy for things like an \u201Cabout\u201D or \u201Cfaq\u201D page that won\u2019t have any dynamic content. However, if we want our <em>entire</em> site to be statically pre-rendered, marking each and every page by hand would be an error-prone chore. So instead, we\u2019ll reach for SvelteKit\u2019s <a href="${"https://github.com/sveltejs/kit/tree/master/packages/adapter-static"}" rel="${"nofollow"}">static adapter</a>.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `SvelteKit has a number of available adapters, which shape our project&#39;s build output based on how we&#39;d like to deploy. 
`;
          }
        })}
<p>SvelteKit has many <a href="${"https://kit.svelte.dev/docs#adapters"}" rel="${"nofollow"}">adapters</a>, and comes pre-installed with one that will automatically detect and build properly for Netlify, Vercel, or Cloudflare Pages\u2014which is both handy and impressive! But for static pre-rendering, we want <code>adapter-static</code>.</p>
<pre class="${"language-bash"}"><!-- HTML_TAG_START -->${`<code class="language-bash"><span class="token function">npm</span> i -D @sveltejs/adapter-static@next</code>`}<!-- HTML_TAG_END --></pre>
<p>Once installed, we have to make a very small change to our <code>svelte.config.js</code> file to use the static adapter. In fact, the only thing we actually have to do is change <code>adapter-auto</code> to <code>adapter-static</code>.</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// Replace the original &#96;adapter-auto&#96; line with this.</span>
<span class="token keyword">import</span> adapter <span class="token keyword">from</span> <span class="token string">'@sveltejs/adapter-static'</span></code>`}<!-- HTML_TAG_END --></pre>
<p>You <em>can</em> supply further customization options if you want to (as an object passed to the <code>adapter()</code> function further down in the file), but the defaults are great for us, so there\u2019s no need. You can check out the <a href="${"https://github.com/sveltejs/kit/tree/master/packages/adapter-static"}" rel="${"nofollow"}">adapter-static readme</a> for more if you like.</p>
<hr>
<p>With our adapter installed and in use in our config file, every page on our site will be pre-rendered as static HTML at build time! You can even view source in the browser to confirm that the site is now served as pre-rendered HTML.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `One of the great things about SvelteKit&#39;s static mode is that it pre-renders all your pages as static HTML, but <em>also</em> loads some client-side JavaScript to help with navigation and preloading in the background. This way, the site works just fine without JavaScript, but is progressively enhanced.
`;
          }
        })}
<p>One final note: <strong>you wouldn\u2019t <em>have</em> to use the static adapter at this point.</strong> You could just skip that part and go with the default adapter. That would allow you to deploy the site to Netlify, Vercel, or Cloudflare Pages, and the site would be server-rendered using serverless functions, instead of statically pre-generated.</p>
<p>Both would work great, and which to go with depends mainly on your site and its needs. I just bring it up because it\u2019s awesome that SvelteKit can completely transform from one thing to another simply by swapping out the adapter.</p>
<h2 id="${"optional-finishing-touches-and-extra-features"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#optional-finishing-touches-and-extra-features"}"><span class="${"icon icon-link"}"></span></a>Optional finishing touches and extra features</h2>
<p>At this point, our blog is up and running. You could take it and run with it in its current shape, and begin adding your own styling and customizations.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `The rest of this post will focus on possible enhancements and diving a little deeper into some aspects of SvelteKit.
`;
          }
        })}
<p>However, what we have is basic and there some extra enhancements we may want to make.</p>
<h3 id="${"add-dynamic-post-category-pages"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#add-dynamic-post-category-pages"}"><span class="${"icon icon-link"}"></span></a>Add dynamic post category pages</h3>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `You could think of a dynamic page as a wildcard route. Essentially, it&#39;s a template that processes a route as an\xA0argument.
`;
          }
        })}
<p>Many blogs use taxonomies like categories and tags to let the user sort and view posts. SvelteKit lets us accomplish this with dynamic pages.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `You could think of a dynamic page as a wildcard route. Essentially, it&#39;s a template that processes a route as an argument.
`;
          }
        })}
<p>Dynamic pages are useful because we might want one template file to handle any number of potential routes. In our case, we\u2019ll have one file to handle <em>any</em> <code>/blog/category/*</code> route, no matter what the <code>*</code> might be.</p>
<p>To start, if you don\u2019t already have some categories in your posts\u2019 frontmatter, it\u2019s a good idea to add some now. I did this, just for the sake of example:</p>
<pre class="${"language-markdown"}"><!-- HTML_TAG_START -->${`<code class="language-markdown"><span class="token comment">&lt;!--- 1.md --></span>
<span class="token hr punctuation">---</span>
categories: 
  <span class="token list punctuation">-</span> "numbers"
  <span class="token title important">- "odd"
<span class="token punctuation">---</span></span></code>`}<!-- HTML_TAG_END --></pre>
<pre class="${"language-markdown"}"><!-- HTML_TAG_START -->${`<code class="language-markdown"><span class="token comment">&lt;!--- 2.md --></span>
<span class="token hr punctuation">---</span>
categories: 
  <span class="token list punctuation">-</span> "numbers"
  <span class="token title important">- "even"
<span class="token punctuation">---</span></span></code>`}<!-- HTML_TAG_END --></pre>
<p><strong>To make a page dynamic, all we have to do is wrap its title in brackets</strong>. So, for categories, we\u2019ll add a <code>categories/[category].svelte</code> route in <code>src/routes/blog</code>.</p>
<pre class="${"language-fs"}"><!-- HTML_TAG_START -->${`<code class="language-fs">\u{1F4C2} src
\u2517 \u{1F4C2} routes
  \u2517 \u{1F4C2} blog
    \u2517 \u{1F4C2} categories
      \u2517 \u{1F4DC} [category].svelte</code>`}<!-- HTML_TAG_END --></pre>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `The word <code>category</code> isn&#39;t special; it&#39;s just a variable. But as with any variable, it&#39;s good to name it semantically.
`;
          }
        })}
<p>Once you\u2019ve created that file, you may notice you can actually visit <code>/blog/category/</code> followed by anything, and you won\u2019t get a 404. The dynamic page handles <em>all</em> unmatched <code>/blog/category/</code> routes. The trick now is just to load the right content based on the route.</p>
<p>Just to get an idea of what we\u2019re working with, let\u2019s start with any JavaScript developer\u2019s best friend: <code>console.log</code>.</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- [category].svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> params <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Warning, "Warning").$$render($$result, {}, {}, {
          default: () => {
            return `The <code>params</code> and <code>url</code> arguments are brand-new to SvelteKit (they replace <code>page</code>). If you hit errors with them, run <code>npm update</code> to update SvelteKit.
`;
          }
        })}
<p>Notice if you load a blog category page now, you can see <code>params</code> in the browser console, as well as in the terminal where your local dev server is running:</p>
<pre class="${"language-bash"}"><!-- HTML_TAG_START -->${`<code class="language-bash"><span class="token punctuation">&#123;</span> category: <span class="token string">'numbers'</span> <span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>This confirms our <code>load</code> function is running both server- and client-side. The current route is called <code>params.category</code>, because <code>category</code> is what we named our dynamic page, and whatever category route we\u2019re visiting will be its value.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Also note that you won&#39;t see what you logged in the browser console if you hit an error; that&#39;s why we added the explicit 200 status, just for demo purposes.
`;
          }
        })}
<p>Knowing that the current <code>/blog/categories/*</code> route will be available as <code>params.category</code>, we can get to work. We\u2019ll use that, and our existing API endpoint, to filter posts:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- [category].svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> params<span class="token punctuation">,</span> fetch <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> currentCategory <span class="token operator">=</span> params<span class="token punctuation">.</span>category
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api/posts.json'</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> matchingPosts <span class="token operator">=</span> posts
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">post</span> <span class="token operator">=></span> post<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>currentCategory<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">posts</span><span class="token operator">:</span> matchingPosts
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>I won\u2019t go into how to render the matching content, but it\u2019s pretty much the same as our blog index page. (In fact, you could easily create a component to handle listing posts, and reuse it in both places!)</p>
<p>It\u2019s probably a good idea to wrap that code in a <code>try</code>/<code>catch</code> block\u2014and for that matter, to anticipate situations where no posts will match the given category, and handle that properly in the UI. (An <code>{#if posts.length}</code> block with an <code>{:else}</code> should do the trick.)</p>
<p>Inside the <code>_post</code> template, listing a post\u2019s categories just requires grabbing the prop and looping over it:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- _post.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// ... Other props here</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> categories<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- ...Post HTML here --></span>

<span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> categories<span class="token punctuation">.</span>length<span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Posted in:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
      <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">categories </span><span class="token keyword">as</span> <span class="token language-javascript">category<span class="token punctuation">&#125;</span></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href="</span>/<span class="token attr-name">blog</span>/<span class="token attr-name">categories</span>/<span class="token language-javascript"><span class="token punctuation">&#123;</span>category<span class="token punctuation">&#125;</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>
            <span class="token language-javascript"><span class="token punctuation">&#123;</span>category<span class="token punctuation">&#125;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Finally, if you <em>really</em> wanted to go the extra mile, you could add an <code>index.svelte</code> file to <code>src/routes/blog/categories/</code>, to display <em>all</em> categories. I won\u2019t go into that here, since it\u2019s an additional feature that won\u2019t benefit all blogs, however.</p>
<h3 id="${"implement-page-transitions"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#implement-page-transitions"}"><span class="${"icon icon-link"}"></span></a>Implement page transitions</h3>
<p>If you want to get fancy, adding a page transition in SvelteKit is pretty simple! Let\u2019s look at the code, then we\u2019ll go over each part of it.</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- __layout.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> url <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> currentRoute <span class="token operator">=</span> url<span class="token punctuation">.</span>pathname

    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        currentRoute
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// ...Other imports here</span>
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fade <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'svelte/transition'</span>

  <span class="token keyword">export</span> <span class="token keyword">let</span> currentRoute
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Other HTML here --></span>

<span class="token language-javascript"><span class="token punctuation">&#123;</span>#key currentRoute<span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name"><span class="token namespace">in:</span>fade=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">150</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">out:</span>fade=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">150</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>key<span class="token punctuation">&#125;</span></span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Warning, "Warning").$$render($$result, {}, {}, {
          default: () => {
            return `Again, the <code>url</code> argument is new to SvelteKit. Run <code>npm update</code> if you hit errors with it.
`;
          }
        })}
<ul><li>To start, in our layout, we\u2019ll need  <code>load</code> to grab the current route. We\u2019ll pass that as a prop named <code>currentRoute</code>, to be used by the component.</li>
<li>We\u2019ll use <code>fade</code> from the <a href="${"https://svelte.dev/tutorial/transition"}" rel="${"nofollow"}">Svelte transition</a> library as our transition, though you could choose another if you like. The main thing is just to add <code>delay</code> to the <code>in</code> transition, so it doesn\u2019t start before the old page is done transitioning out.</li>
<li>Finally, we\u2019ll wrap the page contents in a <a href="${"https://svelte.dev/tutorial/key-blocks"}" rel="${"nofollow"}"><code>#key</code> block</a>.</li></ul>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `A <code>#key</code> block takes an expression, and automatically re-renders its contents whenever that expression changes.
`;
          }
        })}
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `A <code>#key</code> block takes an expression, and automatically re-renders its contents whenever that expression changes.
`;
          }
        })}
<p>In this case, that will be the current page route, so that we can re-render the page itself every time the route changes.</p>
<p><strong>That\u2019s all it takes!</strong> Transitions are an incredibly powerful part of Svelte, and the <code>svelte/transition</code> library offers several options besides <code>fade</code>. Feel free to play around with them.</p>
<h3 id="${"add-an-rss-feed"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#add-an-rss-feed"}"><span class="${"icon icon-link"}"></span></a>Add an RSS feed</h3>
<p>Remember, endpoints don\u2019t have to return JSON; they can return XML, too. This handy fact makes it dead simple to implement an RSS feed on our blog!</p>
<p>To start, create an <code>rss.xml.js</code> file in your <code>routes</code> folder, to make the RSS feed available at the route <code>/rss.xml</code>.</p>
<pre class="${"language-fs"}"><!-- HTML_TAG_START -->${`<code class="language-fs">\u{1F4C2} src
\u2517 \u{1F4C2} routes
  \u2517 \u{1F4DC} rss.xml.js</code>`}<!-- HTML_TAG_END --></pre>
<p>Inside that file, we\u2019ll use <code>import.meta.glob</code> again, and convert the result to XML.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Sadly, we can&#39;t use <code>fetch</code> in an endpoint, but now that we&#39;re using <code>import.meta.glob</code> in two places, we <em>could</em> abstract it to a helper function to cut down on repeated code.
`;
          }
        })}
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> siteURL <span class="token operator">=</span> <span class="token string">'https://your-domain.tld'</span>
<span class="token keyword">const</span> siteTitle <span class="token operator">=</span> <span class="token string">'Your site title here'</span>
<span class="token keyword">const</span> siteDescription <span class="token operator">=</span> <span class="token string">'Your site description here'</span>
  
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">'./blog/*.md'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>path<span class="token punctuation">,</span> resolver<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> metadata <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> slug <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>metadata<span class="token punctuation">,</span> slug <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">posts</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> posts<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>posts<span class="token punctuation">)</span>
  <span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">'Cache-Control'</span><span class="token operator">:</span> <span class="token string">'max-age=0, s-maxage=3600'</span><span class="token punctuation">,</span>
    <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/xml'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    body<span class="token punctuation">,</span>
    headers<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">posts</span><span class="token punctuation">)</span> <span class="token operator">=></span>
<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">&lt;?xml version="1.0" encoding="UTF-8" ?>
&lt;rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
&lt;channel>
&lt;title></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>siteTitle<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/title>
&lt;description></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>siteDescription<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/description>
&lt;link></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>siteURL<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/link>
&lt;atom:link href="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>siteURL<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/rss.xml" rel="self" type="application/rss+xml"/>
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>posts
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">&lt;item>
&lt;guid isPermaLink="true"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>siteURL<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/blog/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>post<span class="token punctuation">.</span>slug<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/guid>
&lt;title></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>post<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/title>
&lt;link></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>siteURL<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/blog/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>post<span class="token punctuation">.</span>slug<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/link>
&lt;description></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>post<span class="token punctuation">.</span>excerpt<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/description>
&lt;pubDate></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/pubDate>
&lt;/item></span><span class="token template-punctuation string">&#96;</span></span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">
&lt;/channel>
&lt;/rss>
</span><span class="token template-punctuation string">&#96;</span></span></code>`}<!-- HTML_TAG_END --></pre>
<p><strong>Please note that the above code block will need some modification!</strong> The example above is more or less straight from this site, and may not be the right shape for your needs. At the very least, you\u2019ll need to replace the URL and text placeholders, but you may also need to update the routes and the post frontmatter properties being referenced.</p>
<p>I pulled my example from <a href="${"https://www.davidwparker.com/posts/how-to-make-an-rss-feed-in-sveltekit"}" rel="${"nofollow"}">this guide</a> and <a href="${"https://scottspence.com/posts/make-an-rss-feed-with-sveltekit"}" rel="${"nofollow"}">this one</a>, for reference. And if you want to make sure you\u2019ve done it correctly, here\u2019s an <a href="${"https://codebeautify.org/xmlviewer"}" rel="${"nofollow"}">online XML validator</a>.</p>
<h3 id="${"add-heading-links-with-rehype"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#add-heading-links-with-rehype"}"><span class="${"icon icon-link"}"></span></a>Add heading links with rehype</h3>
<p>It\u2019s nice to let users link directly to a section of a post. Manually adding links to all our headings would be tedious, however, and goes against the point of writing in Markdown.</p>
<p>Luckily, mdsvex allows us to use many <a href="${"https://github.com/rehypejs/rehype"}" rel="${"nofollow"}">rehype</a> plugins to add extra features to markdown processing, and so we can make this all happen automatically with just a bit of config adjustment.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Rehype is an HTML parser, and not specific to Svelte or mdsvex; it&#39;s commonly used in a wide range of projects.
`;
          }
        })}
<p>There are two rehype plugins we\u2019ll want specifically:</p>
<ul><li><code>rehype-slug</code>, which automatically adds IDs to headings;</li>
<li><code>rehype-autolink-headings</code>, which (as you can guess from the name), automatically adds links to our headings.</li></ul>
<p>Install them both like so:</p>
<pre class="${"language-bash"}"><!-- HTML_TAG_START -->${`<code class="language-bash"><span class="token function">npm</span> i rehype-slug rehype-autolink-headings</code>`}<!-- HTML_TAG_END --></pre>
<p>Then we\u2019ll pop open our <code>svelte.config.js</code> file, import our two new rehype plugins, and add them to the <code>mdsvex</code> config options object, like so:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// svelte.config.js</span>
<span class="token comment">/* Other imports here */</span>
<span class="token keyword">import</span> rehypeSlug <span class="token keyword">from</span> <span class="token string">'rehype-slug'</span>
<span class="token keyword">import</span> rehypeAutolinkHeadings <span class="token keyword">from</span> <span class="token string">'rehype-autolink-headings'</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Other config properties here */</span>

  <span class="token literal-property property">preprocess</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">mdsvex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.md'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">rehypePlugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        rehypeSlug<span class="token punctuation">,</span>
        rehypeAutolinkHeadings<span class="token punctuation">,</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> config<span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Note that the plugins <strong>must</strong> go in that order! <code>rehypeSlug</code> adds IDs to our headings, and <code>rehypeAutolinkHeadings</code> only works on headings that have IDs.</p>
<p>(<em>Fun fact: I discovered these two were in the wrong order on <em>this</em> site while writing this, when I suddenly realized it was only half working. Writing technical posts is a great way to find out how much you missed.</em>)</p>
<p>With that in place, restart the dev server. Now pop open the inspector and check out an <code>h2</code> through <code>h6</code> generated from Markdown, and we\u2019ll see some additions:</p>
<p><img src="${"/images/post_images/sveltekit-rehype.png"}" alt="${"The headings in our blog posts now have links to them, with icon elements inside."}"></p>
<p>However, we\u2019ll need to add a bit of styling to make the links show up properly.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `The <code>.icon.icon-link</code> class is a <a href="${"https://fontawesome.com/"}">Font Awesome</a> convention, so it doesn&#39;t mean or do anything in our project by default.
`;
          }
        })}
<p>How you choose to handle this is personal preference, but this block of Sass should basically do the trick:</p>
<pre class="${"language-scss"}"><!-- HTML_TAG_START -->${`<code class="language-scss"><span class="token punctuation">:</span><span class="token function">where</span><span class="token punctuation">(</span>h2<span class="token punctuation">,</span> h3<span class="token punctuation">,</span> h4<span class="token punctuation">,</span> h5<span class="token punctuation">,</span> h6<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">.icon-link </span><span class="token punctuation">&#123;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    
    <span class="token selector"><span class="token parent important">&amp;</span>::before </span><span class="token punctuation">&#123;</span>
      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'#'</span><span class="token punctuation">;</span>
      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
      <span class="token property">left</span><span class="token punctuation">:</span> -1ch<span class="token punctuation">;</span>
      <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token property">line-height</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
      <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector"><span class="token parent important">&amp;</span>:hover .icon-link::before </span><span class="token punctuation">&#123;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>That CSS will make a pound sign (or hash, or \u201Coctothorpe,\u201D if you\u2019re fancy) appear whenever the user hovers on a heading with a <code>.icon-link</code> in it:</p>
<p><img src="${"/images/post_images/sveltekit-rehype-css.png"}" alt="${"A pound symbol appears to the left of a hovered heading."}"></p>
<p>Thanks to how CSS treats pseudo elements, that icon is fully clickable as part of the link, to navigate directly to the heading in question.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Please be aware that while this example is ok, hovering is not an intuitive gesture on touchscreen devices. It&#39;s probably better to <em>always</em> show some indication of the link.
`;
          }
        })}
<p>You could <em>also</em> add some JavaScript to handle automatically copying the link to the clipboard (probably with some JavaScript inside a Svelte component\u2019s <code>onMount</code> function), but I\u2019ll leave that detail up to you. For now, our links are at least present and working, even if they might not be ideal yet.</p>
<h3 id="${"add-autoprefixer-with-postcss"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#add-autoprefixer-with-postcss"}"><span class="${"icon icon-link"}"></span></a>Add autoprefixer with PostCSS</h3>
<p>Since we\u2019re already using <code>svelte-preprocess</code>, adding <a href="${"https://www.npmjs.com/package/autoprefixer"}" rel="${"nofollow"}">autoprefixer</a> to our toolchain is as simple as installing it, and adding it in our config file:</p>
<pre class="${"language-bash"}"><!-- HTML_TAG_START -->${`<code class="language-bash"><span class="token function">npm</span> i -D autoprefixer</code>`}<!-- HTML_TAG_END --></pre>
<p>Then add it in the <code>sveltePreprocess()</code> function arguments:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// svelte.config.js</span>

<span class="token comment">/* Other imports here */</span>
<span class="token keyword">import</span> autoprefixer <span class="token keyword">from</span> <span class="token string">'autoprefixer'</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Other config options here */</span>
  <span class="token literal-property property">preprocess</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">postcss</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>autoprefixer<span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">/* Other sveltePreprocess options here, like SCSS */</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">/* Other preprocessors here, like mdsvex */</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>That\u2019s all we need to do! Autoprefixer is now working automatically to prefix any CSS properties that might need it for maximum backwards compatibility with other browsers.</p>
<p>As an added bonus, if you want to add any <em>other</em> PostCSS plugins, you can now do so in just the same way.</p>
<h3 id="${"add-page-head-meta-tags"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#add-page-head-meta-tags"}"><span class="${"icon icon-link"}"></span></a>Add page head meta tags</h3>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Svelte has a <code>&lt;svelte:head&gt;</code> component for adding HTML to the page head from anywhere.
`;
          }
        })}
<p>Ideally, we\u2019ll probably want to set up some stuff for the <code>&lt;head&gt;</code> on our various pages. For pages in general, but posts especially, it\u2019s important to have the right <code>title</code> attributes, Open Graph info, share images, etc.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Svelte has a <code>&lt;svelte:head&gt;</code> component for adding HTML to the page head from anywhere.
`;
          }
        })}
<p>Add one somewhere in <code>_post.svelte</code> (I like to put it just before the HTML, personally), and let\u2019s add a title inside.</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- _post.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>My blog - <span class="token language-javascript"><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>og:title<span class="token punctuation">"</span></span> <span class="token attr-name">content=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">svelte:</span>head</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>You should now see the title showing up properly in the browser bar.</p>
<p><strong>There are many other properties you might want to add here</strong>, <em>especially</em> if you\u2019re trying to optimize your posts for share-ability. I won\u2019t go into any more detail here, but it\u2019s worth verifying all your pages and posts look good when shared with Open Graph checker tools (many are available online).</p>
<p>At this point, we should probably go through our pages and add <code>&lt;title&gt;</code> tags, etc. to them as well. For example:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token comment">&lt;!-- about.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>About - Ricky Januari<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">svelte:</span>head</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- ...HTML here --></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Note also that SvelteKit offers several other similar elements, like <code>&lt;svelte:window&gt;</code> and <code>&lt;svelte:body&gt;</code>, where we need to tap into parts of our site or app normally outside the boundaries of our components.</p>
<h3 id="${"improve-the-posts-api-endpoint"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#improve-the-posts-api-endpoint"}"><span class="${"icon icon-link"}"></span></a>Improve the posts API endpoint</h3>
<p>The posts API is functional, but it can be improved in several ways.</p>
<p>For starters, we\u2019ll definitely want to put the code we just wrote into a <code>try</code>/<code>catch</code> block that returns the proper status code when things go wrong. Some refactoring might also be in order. We\u2019ll also probably want to add some other extra features to this API route eventually. </p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Our API is currently missing pagination options, which could be very needed depending on the number of\xA0posts.
`;
          }
        })}
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Our API is currently missing pagination options, which could be very needed depending on the number of\xA0posts.
`;
          }
        })}
<p>Another possible future enhancement would be adding the post\u2019s content to the returned JSON, which we don\u2019t do currently. The \u201Cresolver\u201D function offers a <code>default.render</code> method for that, if you so choose.</p>
<p>Finally, you could build in some post filtering, but it might be better to build out a dynamic endpoint for that. The <a href="${"https://kit.svelte.dev/docs#routing-advanced-rest-parameters"}" rel="${"nofollow"}">SvelteKit docs section on Rest parameters</a> is worth a look as far as that goes.</p>
<h3 id="${"customize-the-error-page"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#customize-the-error-page"}"><span class="${"icon icon-link"}"></span></a>Customize the error page</h3>
<p>What you\u2019re looking at when you hit an error is SvelteKit\u2019s built-in error component. </p>
<p>However, just like we can provide our own <code>__layout.svelte</code> file, we can <em>also</em> provide an <code>__error.svelte</code> file, to template and format any errors our users might run into. </p>
<p>I won\u2019t go into detail here, but you can check the official <a href="${"https://kit.svelte.dev/docs#layouts-error-pages"}" rel="${"nofollow"}">Svelte docs error pages entry</a> for more info.</p>
<h3 id="${"preload-routes"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#preload-routes"}"><span class="${"icon icon-link"}"></span></a>Preload routes</h3>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `SvelteKit ships with two functions for preloading data in the background: <code>prefetch</code>, and <code>prefetchRoutes</code>.
`;
          }
        })}
<p>SvelteKit is already fast, and when we pre-render our HTML like we are via the static adapter, it\u2019s going to be blazing. But we can actually push the performance <em>even further</em> with SvelteKit\u2019s built-in preloading.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `SvelteKit ships with two functions for preloading data in the background: <code>prefetch</code>, and <code>prefetchRoutes</code>.
`;
          }
        })}
<p>To use them, just import them in a page or layout (our global layout file might be a good choice):</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> prefetch<span class="token punctuation">,</span> prefetchRoutes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'$app/navigation'</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `<code>$app</code> contains several modules available in SvelteKit for things you might need in an app, like <code>env</code> and <code>paths</code>, along with <code>navigation</code>. See the <a href="${"https://kit.svelte.dev/docs#modules"}">modules docs</a> for full details.
`;
          }
        })}
<p>The difference between the two is:</p>
<ul><li><code>prefetch</code> preloads a single route;</li>
<li><code>prefetchRoutes</code> preloads <em>all</em> routes.</li></ul>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> prefetch<span class="token punctuation">,</span> prefetchRoutes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'$app/navigation'</span>

  <span class="token function">prefetch</span><span class="token punctuation">(</span><span class="token string">'/blog'</span><span class="token punctuation">)</span> <span class="token comment">// Loads the blog page in the background</span>

  <span class="token function">prefetchRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Loads ALL routes in the background</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Because <code>prefetchRoutes</code> grabs <em>all</em> the site\u2019s data behind the scenes, we should use it cautiously and judiciously. We don\u2019t want to force users to download megabytes of data presumptively. That could very well cost them real money, for pages they might not even look at.</p>
<h3 id="${"add-anchor-options"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#add-anchor-options"}"><span class="${"icon icon-link"}"></span></a>Add anchor options</h3>
<p>Speaking of preloading: SvelteKit offers a slightly less greedy version of it, as one of its <a href="${"https://kit.svelte.dev/docs#anchor-options"}" rel="${"nofollow"}">anchor options</a>.</p>
<p>Anchor options are special, SvelteKit-specific attributes you can add to <code>&lt;a&gt;</code> anchor tags. There are three:</p>
<ul><li><code>&lt;a sveltekit:prefetch&gt;</code> causes the link to begin preloading as soon as the user <em>hovers</em>, rather than waiting for a click, saving some milliseconds.</li>
<li><code>&lt;a rel=&quot;external&quot;&gt;</code> signals to SvelteKit that the link in question is <em>not</em> part of our SvelteKit app, and the router shouldn\u2019t try to handle it.</li>
<li><code>&lt;a sveltekit:noscroll</code>&gt; prevents SvelteKit from resetting the scroll position to the top of the new page. This is usually undesirable on websites, but may be more intuitive in some app situations.</li></ul>
<h2 id="${"conclusion"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#conclusion"}"><span class="${"icon icon-link"}"></span></a>Conclusion</h2>
<p>This has been a long post, and we\u2019ve covered a lot. I hope this has been a valuable resource. Even if you <em>still</em> aren\u2019t sold on SvelteKit (or at least, not as a static site generator), hopefully this post has given you an idea of the broad capabilities of SvelteKit, and maybe even given you some ideas of how you might use it yourself.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/confirm-all-ids-are-unique-in-an-array-of-javascript-objects-using-map-and-sets-2947b46d.js
  var confirm_all_ids_are_unique_in_an_array_of_javascript_objects_using_map_and_sets_2947b46d_exports = {};
  __export(confirm_all_ids_are_unique_in_an_array_of_javascript_objects_using_map_and_sets_2947b46d_exports, {
    default: () => Confirm_all_ids_are_unique_in_an_array_of_javascript_objects_using_map_and_sets,
    metadata: () => metadata8
  });
  var metadata8, Confirm_all_ids_are_unique_in_an_array_of_javascript_objects_using_map_and_sets;
  var init_confirm_all_ids_are_unique_in_an_array_of_javascript_objects_using_map_and_sets_2947b46d = __esm({
    ".svelte-kit/output/server/chunks/confirm-all-ids-are-unique-in-an-array-of-javascript-objects-using-map-and-sets-2947b46d.js"() {
      init_index_2749e1b7();
      metadata8 = {
        "title": "How to Check Uniqueness in an Array of Objects in JavaScript",
        "date": "2020-02-17",
        "updated": "2020-05-19",
        "categories": ["javascript", "web"],
        "coverImage": "EQ0-F2nXUAEpgCx.jpeg",
        "coverWidth": 5,
        "coverHeight": 3,
        "excerpt": "Working with arrays of objects in JavaScript can be difficult. This post covers how to ensure all object keys (IDs) are unique, and how to find non-unique values."
      };
      Confirm_all_ids_are_unique_in_an_array_of_javascript_objects_using_map_and_sets = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>Recently, working on my <a href="${"https://svelte.dev/"}" rel="${"nofollow"}">Svelte</a> side project (<a href="${"https://smitty.netlify.com"}" rel="${"nofollow"}">smitty.netlify.com</a>), I came across the need to verify that all object properties in an array of objects were unique.</p>
<p>That\u2019s a little tough to explain in writing, so here\u2019s an example:</p>
<pre class="${"language-javascript"}"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> 
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'The first object'</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> 
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Another object'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">42</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Here is a third object'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">100</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Oops! This one is a duplicate'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">42</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// ...etc.</span>
<span class="token punctuation">]</span></code>`}<!-- HTML_TAG_END --></pre>
<p>In my case, the IDs were hard-coded (rather than generated programmatically). As such, they were subject to human error, and I discovered that some IDs were duplicated.</p>
<p>This was an issue because the ID numbers were being used for setting the HTML <code>id</code>s in a form; that meant some of the <code>&lt;label&gt;</code> elements were being associated with the wrong input, which is pretty disastrous in a production app!</p>
<h2 id="${"the-solution"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#the-solution"}"><span class="${"icon icon-link"}"></span></a>The solution:</h2>
<p><strong>How to find the duplicates though?</strong> In my case there were 100 unique objects in the array, so while combing through them manually certainly wasn\u2019t impossible, it was going to be a tedious task. The solution was to use JavaScript\u2019s <code>map</code> method and <code>Set</code> functionality.</p>
<ul><li><strong><code>map</code></strong> takes an array, and <em>maps</em> each thing in that array to a new array. (Here, we use it to create a new array with <em>just</em> the original IDs.)</li>
<li><strong><code>Set</code></strong>s in JavaScript create new arrays (technically, sets) with only <em>unique</em> values. (For example, the <code>Set</code> of <code>[0, 0, 1, 1, 2]</code> is <code>[0, 1, 2]</code></li></ul>
<p>To extract only the IDs of the original array, the code looks like this (where the original array is named <code>items</code>):</p>
<pre class="${"language-javascript"}"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token keyword">const</span> IDs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Now we\u2019ve got an array of only unique IDs. What next?</p>
<p>Well, if we <em>did</em> have duplicate IDs in our original <code>items</code> array, then the length of <code>IDs</code> will be <em>different</em> than the length of the original array. So it\u2019s a quick conditional check, which would <em>seem</em> like this, but beware! We\u2019re missing a step:</p>
<pre class="${"language-javascript"}"><!-- HTML_TAG_START -->${`<code class="language-javascript">IDs<span class="token punctuation">.</span>length <span class="token operator">===</span> items<span class="token punctuation">.</span>length
<span class="token comment">// Always returns false \u{1F914}</span></code>`}<!-- HTML_TAG_END --></pre>
<p><strong>Heads up!</strong> That won\u2019t <em>quite</em> work, because <code>Set</code>s and arrays in JavaScript are <em><strong>not</strong></em> the same thing! The above comparison will always return <code>false</code> because, if you check, <code>IDs.length</code> is <code>undefined</code>. (That\u2019s because <code>.length</code> is a method on arrays, not sets.)</p>
<p>To fix the issue, we can just add a bit of ES6 destructuring to convert the set into an array:</p>
<pre class="${"language-javascript"}"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token punctuation">[</span><span class="token operator">...</span>IDs<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">===</span> items<span class="token punctuation">.</span>length
<span class="token comment">// Now it works!</span>
<span class="token comment">// true if all IDs were unique, false if not</span></code>`}<!-- HTML_TAG_END --></pre>
<p>If you prefer, this is a little more explicit and works the same way; I just prefer the above shorthand, personally:</p>
<pre class="${"language-javascript"}"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token comment">// Another way to do the same thing:</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>IDs<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> items<span class="token punctuation">.</span>length</code>`}<!-- HTML_TAG_END --></pre>
<h2 id="${"make-it-reusable"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#make-it-reusable"}"><span class="${"icon icon-link"}"></span></a>Make it reusable</h2>
<p>If this is an issue you might run into frequently, you can abstract it to a function like so:</p>
<pre class="${"language-javascript"}"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token comment">// Reusable function to check uniqueness of keys in an array of objects </span>
<span class="token keyword">const</span> <span class="token function-variable function">isEverythingUnique</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   
    <span class="token keyword">const</span> uniques <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>uniques<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">===</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>And call it with, e.g., <code>isEverythingUnique(items, &#39;id&#39;);</code> (which would return <code>false</code> in our case, because there are two objects each with <code>id: 42</code>).</p>
<p>If the function returns <code>true</code>, then you know all the keys are unique. Otherwise, you have non-unique keys (IDs).</p>
<p>To find out <em>which</em> ones are duplicates, you can use this handy function which I developed from <a href="${"https://hackernoon.com/finding-non-unique-elements-in-javascript-d934e6fd6260"}" rel="${"nofollow"}">this Hacker Noon post</a>:</p>
<pre class="${"language-javascript"}"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token comment">// Reusable function to show the duplicate keys in an array of objects</span>
<span class="token keyword">const</span> <span class="token function-variable function">getDuplicates</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> keys <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> keys<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!==</span> keys<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Call this function just like the one above, e.g., <code>getDuplicates(items, &#39;id&#39;)</code>, which in our case, would get you an array that contains the non-unique IDs, like this:</p>
<pre class="${"language-javascript"}"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token function">getDuplicates</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">)</span>
 
<span class="token comment">// [42, 42]</span></code>`}<!-- HTML_TAG_END --></pre>
<p><strong>Hope you enjoyed!</strong> <strong>Thanks for reading.</strong></p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/converting-from-gridsome-to-sveltekit-87f9ea4f.js
  var converting_from_gridsome_to_sveltekit_87f9ea4f_exports = {};
  __export(converting_from_gridsome_to_sveltekit_87f9ea4f_exports, {
    default: () => Converting_from_gridsome_to_sveltekit,
    metadata: () => metadata9
  });
  var metadata9, Converting_from_gridsome_to_sveltekit;
  var init_converting_from_gridsome_to_sveltekit_87f9ea4f = __esm({
    ".svelte-kit/output/server/chunks/converting-from-gridsome-to-sveltekit-87f9ea4f.js"() {
      init_index_2749e1b7();
      init_Callout_7f4de651();
      init_PullQuote_effacfdf();
      init_SideNote_5c625ecb();
      metadata9 = {
        "title": "Converting from Gridsome to SvelteKit",
        "date": "2021-10-04",
        "updated": "2021-10-14",
        "categories": ["javascript", "svelte", "web"],
        "coverImage": "gridsome-to-sveltekit.png",
        "coverWidth": 16,
        "coverHeight": 9,
        "excerpt": "I've been a fan of Svelte for years, but never had the opportunity to use it on a serious project before. So when I found myself looking for a new platform for this site as SvelteKit entered open beta, it seemed like perfect timing."
      };
      Converting_from_gridsome_to_sveltekit = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>I\u2019ll assume for the sake of this post that you\u2019re at least a little familiar with what Svelte is. If not, I\u2019ve written an <a href="${"/blog/introducing-svelte-comparing-with-react-vue"}">introduction to Svelte</a> that you might enjoy reading first before diving in here.</p>
<p>Otherwise: let\u2019s dive into what <a href="${"https://kit.svelte.dev/"}" rel="${"nofollow"}">SvelteKit</a> is, how it works, why I made the choice to switch (other than the obvious fact that I just can\u2019t resist rebuilding my site about once a year), how it\u2019s paid off, and whether I\u2019d make the same decisions again.</p>
<h2 id="${"what-is-sveltekit"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-is-sveltekit"}"><span class="${"icon icon-link"}"></span></a>What is SvelteKit?</h2>
<p>If you\u2019re familiar with <a href="${"https://nextjs.org/"}" rel="${"nofollow"}">Next</a> or <a href="${"https://nuxtjs.org/"}" rel="${"nofollow"}">Nuxt</a>, it would be fair to think of SvelteKit as the Svelte equivalent.</p>
<p>If not: all three are \u201Cmeta-frameworks,\u201D sometimes also called app frameworks. You could think of meta-frameworks as a large set of add-ons for frontend UI frameworks like React, Vue, and Svelte (in the cases of Next, Nuxt, and SvelteKit, respectively). </p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `If a frontend framework is a toolbox, a meta-framework is a complete workshop.
`;
          }
        })}
<p><strong>Why?</strong> Frontend UI frameworks are ideal for\u2026well, frontend UIs. They\u2019re built to handle pieces of an interactive user interface. By nature, being JavaScript-based, they\u2019re limited to the capabilities of the browser page they\u2019re loaded on. (Because of this, sites built just with a frontend framework are sometimes called \u201Csingle-page applications,\u201D or SPAs.)</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `If a frontend framework is a toolbox, a meta-framework is a complete workshop.
`;
          }
        })}
<p>A meta-framework is an enhanced toolset for building full-fledged sites and apps with a specific frontend framework (hence the \u201Cmeta\u201D part of the name; a framework for a framework).</p>
<p>Most meta-frameworks come with all your build tools and routing pre-configured. They also generally include data stores; layouts; image optimization; better SEO and full-page control; data fetching; and/or plugins\u2014usually just about everything except a database to help you build anything you might want.</p>
<h3 id="${"going-static"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#going-static"}"><span class="${"icon icon-link"}"></span></a>Going static</h3>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `This site uses SvelteKit&#39;s static adapter, which means the pages and components are pre-rendered as plain ol&#39; HTML\xA0files.
`;
          }
        })}
<p>Next, Nuxt, and SvelteKit are <em>all</em> capable of building your finished project as a server-side rendered app, as a static site, or as some combination of both.</p>
<p>SvelteKit is even <em>more</em> adaptable than that, thanks to its aptly named <a href="${"https://kit.svelte.dev/docs#adapters"}" rel="${"nofollow"}">adapters</a>, which process your code differently for whatever type of output and hosting you\u2019re targeting.</p>
<p>Currently, SvelteKit offers adapters to run your project as a Node app; as static, pre-generated HTML files; or as serverless functions (there are adapters specifically targeted for Netlify, Vercel, and Cloudflare Workers). There are several <a href="${"https://sveltesociety.dev/components/#category-SvelteKit%20Adapters"}" rel="${"nofollow"}">community-created adapters</a> available as well, or you can even <a href="${"https://kit.svelte.dev/docs#writing-an-adapter"}" rel="${"nofollow"}">write your own</a>.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Thanks to the static adapter, most of this site works just fine even with JavaScript disabled\xA0entirely.
`;
          }
        })}
<p>This site uses SvelteKit\u2019s static adapter, which means the pages and components are pre-rendered as plain ol\u2019 HTML files. They can still benefit from \u201Chydration\u201D\u2014JavaScript running once the page has loaded\u2014but they don\u2019t have to. </p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Thanks to the static adapter (and some strategic <code>&lt;noscript&gt;</code> tags), most of this site works just fine even with JavaScript disabled entirely.
`;
          }
        })}
<p>Worth noting, however: by default, after the first page load, SvelteKit\u2019s router hydrates and takes over page loading, to make transitions as smooth and fast as possible. You can even designate routes to preload in the background, so that by the time the user clicks, the load is nearly instantaneous.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `You don&#39;t have to go entirely one way or the other; even if you&#39;re deploying your project as a Node app or with serverless functions, you can still mark specific pages to be prerendered as static HTML--handy for things like an &quot;about&quot; page that don&#39;t need dynamic content.
`;
          }
        })}
<h3 id="${"sveltekit-layouts"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#sveltekit-layouts"}"><span class="${"icon icon-link"}"></span></a>SvelteKit layouts</h3>
<p>SvelteKit follows the convention of <a href="${"https://kit.svelte.dev/docs#layouts"}" rel="${"nofollow"}">layout files</a>, which are: files that \u201Cwrap\u201D the content of any given page in additional markup, such as a header and footer.</p>
<p>Your base layout file renders every route in your site or app, so you\u2019ll most commonly use it as a base template that includes everything that would appear on every page of the site. The layout includes a <code>&lt;slot /&gt;</code> for the page\u2019s main content to go inside, whatever that page or content might be, and SvelteKit renders the content in that slot.</p>
<p>Here\u2019s what this site\u2019s main layout file\u2019s markup looks like (slightly simplified for readability):</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">class:</span>reduce-motion=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>$prefersReducedMotion<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name"><span class="token namespace">class:</span>prefers-dark=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>$prefersDarkMode<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name"><span class="token namespace">class:</span>sidebar=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>pageHasSidebar<span class="token punctuation">&#125;</span></span>
<span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loader</span> <span class="token attr-name">loading=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>$isLoading<span class="token punctuation">&#125;</span></span><span class="token punctuation">/></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/></span></span> 

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#main<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PageHeading</span> <span class="token punctuation">/></span></span>

      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PageTransition</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PageTransition</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>
    
    <span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> pageHasSidebar<span class="token punctuation">&#125;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Sidebar</span> <span class="token punctuation">/></span></span>
    <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>That\u2019s pretty much it. This way, every page includes the header and footer, and the sidebar where appropriate. Some states and preferences are passed in from the global store (those prefixed with a <code>$</code>) so that conditional classes can be applied as needed. And the <code>&lt;slot /&gt;</code> where the page content goes is wrapped in a custom <code>&lt;PageTransition&gt;</code> component that (predictably) just adds the fancy transitions between pages.</p>
<p>It <em>is</em> possible to have nested layouts, or layouts that apply on a per-route basis. You can also reset the layout, if you have a deeply nested route that needs its own setup.</p>
<p>And speaking of routing\u2026</p>
<h3 id="${"routing-in-sveltekit"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#routing-in-sveltekit"}"><span class="${"icon icon-link"}"></span></a>Routing in SvelteKit</h3>
<p>By default, a new SvelteKit project has a <code>src/routes</code> directory. Anything inside <code>src/routes</code> compiles to a page at that relative root.</p>
<p>For example:</p>
<table><thead><tr><th>File:</th>
<th>Becomes route:</th></tr></thead>
<tbody><tr><td><code>src/routes/index.svelte</code></td>
<td><code>/</code> (<em>homepage</em>)</td></tr>
<tr><td><code>src/routes/about.svelte</code></td>
<td><code>/about</code></td></tr>
<tr><td><code>src/routes/blog/index.svelte</code></td>
<td><code>/blog</code></td></tr>
<tr><td><code>src/routes/blog/some-post.md</code></td>
<td><code>/blog/some-post</code></td></tr></tbody></table>
<p>And so on. (<em>Markdown files do require a small bit of extra config, but yes, you can have Markdown files as pages, or just import Markdown to inject into pages or components.</em>)</p>
<p>SvelteKit can <em>also</em> have <em>dynamic</em> routes. For example, <code>/blog/[post].svelte</code> would be a single component that would render <em>any</em> <code>/blog/*</code> slug. You can read more about <a href="${"https://kit.svelte.dev/docs#routing-pages"}" rel="${"nofollow"}">SvelteKit Pages here</a>.</p>
<p>The <em>really</em> magical part, though, is that you can have server-side routes, too!</p>
<p>For example: lots of places in a typical blog need access to the list of your posts. You might want to put your most recent posts on your hompage, have some posts in the sidebar, and of course, they should all be listed the <code>/blog</code> page itself. You might even want category or tag pages.</p>
<p>That\u2019s a lot of fetching posts to redo over and over. So it\u2019s a perfect use case for a server-side route!</p>
<p>If you want your app to have a <code>/posts</code> endpoint that returns JSON, you just create <code>src/routes/posts.json.js</code>. This will become a <code>/posts.json</code> route in the finished application.</p>
<p>From there, you just define a <code>get()</code> JavaScript function that retrieves the desired data and returns it (along with a status code). This is made easier by the fact that SvelteKit has top-level <code>await</code> and <code>fetch</code> available by default.</p>
<p>Here\u2019s a somewhat simplified example of how you might create an endpoint to return all your Markdown posts as JSON:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// posts.json.js</span>

<span class="token comment">// The &#96;get&#96; function responds to GET requests; you can have post(), etc. as well</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">'/blog/posts/*.md'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>path<span class="token punctuation">,</span> page<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> metadata <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> slug <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>metadata<span class="token punctuation">,</span> slug <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      posts <span class="token comment">//Automatically converted to JSON \u2728</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Once you\u2019ve retrieved the post data as JSON, you can display it in a Svelte page or component; here\u2019s a short example:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">posts </span><span class="token keyword">as</span> <span class="token language-javascript">post<span class="token punctuation">&#125;</span></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src="</span>/<span class="token attr-name">images</span>/<span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>coverImage<span class="token punctuation">&#125;</span></span><span class="token attr-name">"</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>slug<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
        <span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>excerpt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>excerpt<span class="token punctuation">&#125;</span></span>

      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>slug<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
        Read more\u2026
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>
<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>I won\u2019t get too much into it here, but SvelteKit also offers a way to <a href="${"https://kit.svelte.dev/docs#loading"}" rel="${"nofollow"}">pre-load data server-side</a> from routes like this, or from external sources.</p>
<p><strong>Worth noting:</strong> when using the static adapter, there of course isn\u2019t any server to query at run time. So in that case, any server-side queries or <code>fetch</code> calls will run at build time, and whatever the result at that point, it will be output as plain static files. Any JSON routes you might have will still be query-able on the live site, but they\u2019ll be static. (For example, here\u2019s <a href="${"/api/posts.json"}">this site\u2019s /api/posts.json endpoint</a>.)</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `The ability to read Markdown files isn&#39;t included by default in SvelteKit, but it <em>does</em> have the fairly easy-to-install <a href="${"https://mdsvex.com/"}" rel="${"external"}">MDSvex</a> for that (the Svelte version of MDX, if you&#39;re familiar).
`;
          }
        })}
<h2 id="${"static-sveltekit-vs-gridsome"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#static-sveltekit-vs-gridsome"}"><span class="${"icon icon-link"}"></span></a>Static SvelteKit vs. Gridsome</h2>
<p>Before we dive into comparisons, it\u2019s worth mentioning that SvelteKit and Gridsome aren\u2019t exactly the same type of thing. SvelteKit is an meta-framework capable of generating many different kinds of sites and apps, where Gridsome is just a fairly straightforward static site generator.</p>
<p>Still, if we\u2019re scoping the discussion to <em>just</em> SvelteKit\u2019s static adapter, I think it\u2019s a fair, if not exact, comparison.</p>
<h3 id="${"comparing-performance"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#comparing-performance"}"><span class="${"icon icon-link"}"></span></a>Comparing performance</h3>
<p>To compare Gridsome with SvelteKit, we need to do a bit of configuration. Gridsome pre-loads all of its routes in the background, so that they\u2019re already loaded up and ready to go instantly the moment the user clicks. So unless we\u2019re doing the same thing with SvelteKit, we\u2019re comparing apples to oranges.</p>
<p>Luckily, SvelteKit <em>does</em> offer <code>prefetch</code> and <code>prefetchRoutes</code> functions (the former to prefetch only specified routes, and the latter to just prefetch <em>all</em> routes). So I threw prefetching on <em>all</em> the routes on the site, just to see how it would stack up against the Gridsome version.</p>
<p><strong>Even when preloading all the site\u2019s content, the SvelteKit build is dramatically smaller.</strong></p>
<table><thead><tr><th>Framework</th>
<th>Full size</th>
<th>Compressed</th></tr></thead>
<tbody><tr><td><strong>Gridsome</strong></td>
<td>3.09 MB</td>
<td>1.74 MB</td></tr>
<tr><td><strong>SvelteKit</strong>, <em>preload all routes</em></td>
<td>1.7 MB</td>
<td>536 kB</td></tr>
<tr><td><strong>SvelteKit</strong>, <em>top-level routes only</em></td>
<td>322 kB</td>
<td>184 kB</td></tr></tbody></table>
<p>As you can see from the table above, the SvelteKit version shaves about 45% off the Gridsome build, and <em>over two thirds</em> when compressed. The SvelteKit site <em>at full size</em> is about the size the Gridsome site was <em>compressed</em>!</p>
<p>Granted, 1.7 MB is not exactly <em>tiny</em>, but bear in mind that\u2019s with the weight of <em>every</em> route on the site preloading.</p>
<p>The preloading strategy I eventually settled on, however, is the <em>last</em> row in the table: here, I preload only top-level routes unless we\u2019re on a blog page, and then I preload all blog routes. This was my biggest savings, but there\u2019s a tiny caveat that I also decided to eliminate Google Analytics in this approach as well, so the reduction is <em>slightly</em> exaggerated. Still, though: the overall load is <em>tiny</em> (and honestly, mostly made up of fonts. There\u2019s a little over 100 kB of fonts to load on any given page).</p>
<p>Scrapping Google Analytics was an easy decision once I realized it blocked the main thread and prevented me from <em>ever</em> getting an optimal performance score\u2014even, ironically, from <a href="${"https://developers.google.com/web/tools/lighthouse/"}" rel="${"nofollow"}">Google Lighthouse</a>. I don\u2019t really <em>need</em> analytics on this site, but I can use Cloudflare or even pay for Netlify Analytics for that.</p>
<p><img src="${"/images/post_images/100s.png"}" alt="${"Perfect 100s across the board from Lighthouse test"}"></p>
<p>By the way: although it isn\u2019t implemented in any form in most browsers yet, I put a <code>prefers-reduced-data</code> media query on the site that will prevent preloading when detected.</p>
<hr>
<p>Builds and dev start times with SvelteKit are also much faster: the production build of my Gridsome site ran about seven minutes, compared to about 90 seconds for the SvelteKit version (about five times faster). The dev startup times have similar gains. But again, this is misleading, for two reasons:</p>
<ol><li><p>Gridsome was doing a lot of image work at build time that SvelteKit isn\u2019t by default; and</p></li>
<li><p>Gridsome uses Webpack under the hood, where SvelteKit utilizes the much faster and more modern <a href="${"https://vitejs.dev/"}" rel="${"nofollow"}">Vite</a> (pronounced \u201Cveet\u201D).</p></li></ol>
<p>One particularly nice thing about Gridsome was its built-in <code>&lt;g-image&gt;</code> component. Just by using it in place of the standard HTML <code>&lt;img&gt;</code> tag, Gridsome would compress your images, generate a resized, responsive source set, use lazy loading, <strong><em>and</em></strong> create blurred placeholder images.</p>
<p>By contrast, out of the box, SvelteKit does\u2026nothing to help with images.</p>
<p>My website uses few enough images (which are already generally compressed) that I decided browser-native lazy loading (combined with <code>aspect-ratio</code>) was acceptable for now. Hopefully, SvelteKit will have a first-party image compression option in the near future. (And even if not, it\u2019s possible to rig that up directly through Vite, though that\u2019s its own rabbit hole. Or, I could even use a service like <a href="${"https://cloudinary.com/"}" rel="${"nofollow"}">Cloudinary</a> if image size became an issue.) But for now, the few Svelte-focused solutions I tried didn\u2019t work particularly well for my use case, and the tradeoff didn\u2019t seem to be worthwhile.</p>
<h3 id="${"why-move-away-from-gridsome"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#why-move-away-from-gridsome"}"><span class="${"icon icon-link"}"></span></a>Why move away from Gridsome?</h3>
<p>As you can see from just perusing the posts list on this blog, it wasn\u2019t all that long ago that I moved to Gridsome in the first place. I went to a <a href="${"/blog/a-new-headless-site-with-gridsome"}">headless Gridsome frontend</a> just over a year ago, and converted the site to <a href="${"/blog/goodbye-wordpress"}">fully static</a> barely seven months ago. I\u2019ve already talked here about how nice Gridsome\u2019s image handling is, and how fast it makes the site feel.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `This naturally prompts the question: why move in the first place? At this point it almost seems like the only reason this site exists is so that I can rebuild it, then write a post about it.
`;
          }
        })}
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `At this point it almost seems like the only reason this site exists is so that I can rebuild it, then write a post about\xA0it.
`;
          }
        })}
<p>I was a very early adopter of Gridsome, and at the time (in 2019), it still seemed to be regularly updated and headed towards a 1.0 release. But it\u2019s been almost exactly two years since the last minor version update of Gridsome (<a href="${"https://gridsome.org/blog/2019/09/17/gridsome-v07/"}" rel="${"nofollow"}">0.7</a>), and at this point, it doesn\u2019t seem like it\u2019s an actively maintained project any longer. It\u2019s been all but silent since then.</p>
<p>Gridsome didn\u2019t ever really feel <em>complete</em> to me, and that was fine when updates were still rolling out. I knew what I was in for going with a pre-1.0 technology, and it was really good at what it did well\u2014namely, generating a speedy static site with Vue and GraphQL\u2014but the more you wanted to tweak things or leave the happy path, the more you ran into its rough edges.</p>
<p>More than once, I spent a day or two fighting with NPM, unable to even <em>run</em> Gridsome on my machine. (That\u2019s more to do with the packages Gridsome relies on than Gridsome itself, but still; the frustration is the same.) The last two times I\u2019ve set up new machines, I\u2019ve had to spend significant time trying to get Gridsome running on them. I had to explicitly set Netlify to an older version of Node to even get it to deploy.</p>
<p>But moreover: SvelteKit sparks joy in a way that Gridsome doesn\u2019t anymore. It was exciting to be a part of something new and actively progressing with Gridsome, but now it just feels like being part of something forgotten and stagnant. SvelteKit replaces that feeling; the community is vibrant and the project has an electric momentum to it.</p>
<p>You might ask why, then, I didn\u2019t move over to Nuxt, given that it\u2019s a larger and energetic community. Plus, it\u2019s still in Vue, which would seem less disruptive.</p>
<p>When I was writing this site in Gridsome, my list of Vue projects was fairly small, which made the appeal of having a Vue outlet more appealing. Now, though, it doesn\u2019t feel like I <em>need</em> a site in Vue anymore\u2014especially since my day job isn\u2019t Vue-focused anymore.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `SvelteKit sparks joy in a way that Gridsome doesn&#39;t anymore.
`;
          }
        })}
<p>Maybe the fact that I\u2019ve been working professionally with Vue for the last two years (and released <a href="${"https://quina.app"}" rel="${"nofollow"}">Quina</a> late last year) is part of it, too. I still love Vue dearly, and will almost certainly pick it back up to write a project in Vue 3 one day in the near future. But silly as it sounds, for right now: that itch is scratched, and I want a different thing to play with.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `This site, like any side project, is at least partially for me to enjoy. This is the one little corner of the internet that&#39;s 100% mine, where I can do anything I want for whatever reason. And that thing, right now, is SvelteKit.
`;
          }
        })}
<p>Finally, <a href="${"https://www.typescriptlang.org/"}" rel="${"nofollow"}">TypeScript</a> has first-class support in SvelteKit. I\u2019m relatively new to TypeScript and have somewhat mixed feelings on it at this scope (I think it mainly shines on larger projects with multiple contributors), but I\u2019ve been working on involving it more in my workflows to get better at it. At this point, close to 100% of this site\u2019s JS is typed, so I\u2019ve given it a good shot at least.</p>
<h4 id="${"what-other-options-were-considered"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-other-options-were-considered"}"><span class="${"icon icon-link"}"></span></a>What other options were considered?</h4>
<p>To some degree, I considered both <a href="${"https://astro.build/"}" rel="${"nofollow"}">Astro</a> and <a href="${"https://www.11ty.dev/"}" rel="${"nofollow"}">Eleventy</a> for this overhaul, and you could make reasonable arguments that either one would\u2019ve been better suited for the task. If my primary goal had been to build the fastest statically generated site possible with absolutely minimal JavaScript client-side, I no doubt would\u2019ve gravitated towards one of these tools.</p>
<p>In the end, however, Eleventy is still too unopinionated for my personal tastes, and Astro is still a bit too new. (Yes, SvelteKit is new, too, but it seems to have much more of a foundation beneath it.)</p>
<p>And again: this is my personal site, and so the tool I <em>like</em> the most is an important factor. So while SvelteKit might arguably be a little overkill, personally, I think it\u2019s the most fun.</p>
<h3 id="${"how-does-the-code-compare"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#how-does-the-code-compare"}"><span class="${"icon icon-link"}"></span></a>How does the code compare?</h3>
<p>You might wonder: how does the old Vue code compare to the newer Svelte code? Is it shorter, better, and/or more readable?</p>
<p>Turns out: that\u2019s actually a really tricky question to answer.</p>
<p>I originally thought I\u2019d show side-by-side comparisons to demonstrate Vue vs. Svelte, but there\u2019s been enough change at this point that most of the differences are either trivial, or so far apart they don\u2019t even make sense to compare anymore.</p>
<p>The site\u2019s changed quite a bit, even if it doesn\u2019t necessarily look like it.</p>
<p>The one non-trivial component that\u2019s mostly the same between the two versions is the font tester (seen on the <a href="${"/uses"}"><code>/uses</code> page</a>). But it\u2019s actually about the same size, both in terms of line count and disk size. The Svelte version is negligibly larger (only by a fraction of a kB), and almost certainly just because of the addition of TypeScript.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `\u201CIs it better?\u201D is a really hard question to answer, even without getting into the highly subjective topic of what &quot;better&quot; even means. But I like\xA0it\xA0better.
`;
          }
        })}
<p>Most of the rest just isn\u2019t comparable anymore. The colorful square grid in the header and footer has been completely refactored for better performance. TypeScript is everywhere; layouts have changed; new pieces have been added and old removed. MDSvex came with PrismJS built in, which let me delete both the a full component and an external library. <a href="${"https://storybook.js.org/"}" rel="${"nofollow"}">Storybook</a> and my tests are both removed for now. Lots was refactored. I relied more on global CSS previously, and have moved more towards component-based CSS this time around.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `&quot;Is it better?&quot; is a really hard question to answer, even without getting into the highly subjective topic of what &quot;better&quot; even means. But I like it better (even the parts that are more verbose), and I think that&#39;s the most important part. I even enjoyed the relatively rote process of moving Vue components over to Svelte.
`;
          }
        })}
<p>By the way: I kept an <a href="${"https://joco-gridsome-archive.netlify.app/"}" rel="${"nofollow"}">archival copy of the old site</a> live for myself to look back on, just in case you\u2019d like to compare the two for yourself.</p>
<p>And while we\u2019re on the topic: here\u2019s the link to <a href="${"https://github.com/rickyjanuari/joco-sveltekit"}" rel="${"nofollow"}">my site\u2019s new SvelteKit repo</a>, if you\u2019d like to take a firsthand look behind the scenes. A lot still needs to be refactored and cleaned up (I keep a list), but you\u2019re welcome to poke around, or even clone the repo as a starter for your own blog if you like.</p>
<h3 id="${"the-redesign"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#the-redesign"}"><span class="${"icon icon-link"}"></span></a>The redesign</h3>
<p>I didn\u2019t set out to make any design changes when moving this site over to SvelteKit, but after a while, I got tired of staring at the old design and started the dangerous journey of playing with new fonts.</p>
<p>In the end, the old body font (Averta Std) got promoted to the heading font, and I added a nice serif (Alkes) for the body copy. More of a small refresh than an overhaul, but the pairing and tweaked styles give the site a fresh new look that I very much like.</p>
<h2 id="${"what-to-know-about-sveltekit"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-to-know-about-sveltekit"}"><span class="${"icon icon-link"}"></span></a>What to know about SvelteKit</h2>
<p>As of this writing, SvelteKit is still in pre-1.0 status. It seems very stable to me\u2014I don\u2019t think anything is going to be changing\u2014and Svelte itself is definitely solid. But there are still some portions of the Kit that aren\u2019t fleshed out yet.</p>
<p>I found the static rendering to be extremely good, but as mentioned, SvelteKit can do a <em>lot</em> more than that. Depending on what you\u2019re building and what features you\u2019re most interested in, it may be worth spending some time to make sure SvelteKit is in good shape to handle your task, and works as expected with your deploy target.</p>
<p>Also worth knowing: Svelte itself doesn\u2019t support IE11 by default. There <em>are</em> some workarounds, but hopefully that\u2019s not anything that matters to you in the first place\u2014especially since not only has IE11 support been dropped by a slew of major companies at this point, but it\u2019s due to be killed by Microsoft itself in a matter of months at the time of writing.</p>
<h3 id="${"dont-listen-to-the-haters"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#dont-listen-to-the-haters"}"><span class="${"icon icon-link"}"></span></a>Don\u2019t listen to the haters</h3>
<p>Arguments against Svelte(Kit) tend to focus on how it theoretically scales (emphasis on <em>theoretically</em>), and the relative size of its community and ecosystem compared to other frameworks.</p>
<p>I won\u2019t go into either of those here, but I <em>do</em> address them both in detail in my <a href="${"/blog/introducing-svelte-comparing-with-react-vue"}">introduction to Svelte post</a>.</p>
<h3 id="${"dont-get-confused-by-sapper"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#dont-get-confused-by-sapper"}"><span class="${"icon icon-link"}"></span></a>Don\u2019t get confused by Sapper</h3>
<p>One other thing to know at this point in SvelteKit\u2019s existence is that it\u2019s actually the <em>second</em> stab at a Svelte meta-framework; <a href="${"https://sapper.svelte.dev/"}" rel="${"nofollow"}">Sapper</a> was the first.</p>
<p>Sapper never seemed as big as SvelteKit does now, but it\u2019s been deprecated in favor of SvelteKit, and there\u2019s still some confusion that arises when searching online for code solutions in the space.</p>
<p>SvelteKit doesn\u2019t always work exactly the same as Svelte <em>or</em> Sapper by default (largely because Svelte and Sapper both have a Rollup config\u2014Rollup being the bundler that powers Svelte\u2014where SvelteKit has its own config file). So a lot of the examples and answers you come across related to setting up configuration are likely to either need some syntax adjustment, or just not work exactly as expected. (This doesn\u2019t apply to Svelte itself so much as to SvelteKit and its unique configurations.)</p>
<h2 id="${"wrapup-would-i-use-sveltekit-again"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#wrapup-would-i-use-sveltekit-again"}"><span class="${"icon icon-link"}"></span></a>Wrapup: would I use SvelteKit again?</h2>
<p>For just about any project, <strong>yes</strong>, I would use SvelteKit again in a heartbeat.</p>
<p>Even though it\u2019s still technically pre-1.0, SvelteKit feels very solid\u2014much more so than other pre-1.0 frameworks I\u2019ve tried\u2014<em>and</em> it\u2019s a delight to work with. The adapters allow you to tailor your input to any output you like, and the scope of things you can build with it is impressively vast. Plus, it\u2019s likely to be smaller and faster than whatever else you might have chosen, and with even better developer experience.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `The Svelte rocketship is a wonderful place to be. I encourage you to step aboard.
`;
          }
        })}
<p>As mentioned, it\u2019s still early days for SvelteKit, so there are still some areas where its established solutions may not be as robust as with other frameworks. I can understand hesitance to bet the farm on something a little newer, but I don\u2019t think I\u2019d have any real hesitation at this point. An established solution with a rich ecosystem like Nuxt might have more to offer in this moment, but I\u2019m confident both that I could do anything I needed to do in SvelteKit, and that it won\u2019t be long before SvelteKit fills the gaps. It\u2019s hard to imagine SvelteKit <em>not</em> becoming the #1 go-to in all cases in the near future\u2014especially knowing it only came out of closed beta a matter of months ago.</p>
<p>The Svelte rocketship is a wonderful place to be. I encourage you to step aboard.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/creating-custom-gutenberg-blocks-with-the-block-lab-plugin-6d622b1c.js
  var creating_custom_gutenberg_blocks_with_the_block_lab_plugin_6d622b1c_exports = {};
  __export(creating_custom_gutenberg_blocks_with_the_block_lab_plugin_6d622b1c_exports, {
    default: () => Creating_custom_gutenberg_blocks_with_the_block_lab_plugin,
    metadata: () => metadata10
  });
  var metadata10, Creating_custom_gutenberg_blocks_with_the_block_lab_plugin;
  var init_creating_custom_gutenberg_blocks_with_the_block_lab_plugin_6d622b1c = __esm({
    ".svelte-kit/output/server/chunks/creating-custom-gutenberg-blocks-with-the-block-lab-plugin-6d622b1c.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      init_Callout_7f4de651();
      init_CalloutPlusQuote_8515db1f();
      init_SideNote_5c625ecb();
      metadata10 = {
        "title": "How to Create Custom Editor Blocks with Block Lab",
        "date": "2020-06-14",
        "updated": "2020-07-02",
        "categories": ["css", "design", "php", "wordpress"],
        "coverImage": "block-lab-banner.png",
        "coverWidth": 386,
        "coverHeight": 125,
        "excerpt": "Block Lab is a WordPress plugin that simplifies the process of creating custom blocks to use in the block editor, AKA Gutenberg, the new content editor in WordPress 5.0. This post explains how to use it, even if you only know basic HTML."
      };
      Creating_custom_gutenberg_blocks_with_the_block_lab_plugin = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>I wrote briefly about <a href="${"https://wordpress.org/plugins/block-lab/"}" rel="${"nofollow"}">Block Lab</a> in my post on <a href="${"https://api.rickyjanuari.com/a-new-headless-site-with-gridsome/"}" rel="${"nofollow"}">going headless with Gridsome</a>, but I find it to be such a handy plugin that I thought I\u2019d write just a bit more in depth on what it does and how to use it, as well as how I\u2019ve adapted it specifically to my workflow in writing content for a headless WordPress site.</p>
<h2 id="${"what-is-block-lab-and-what-does-it-do"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-is-block-lab-and-what-does-it-do"}"><span class="${"icon icon-link"}"></span></a>What is Block Lab and what does it do?</h2>
<p>First things first: Block Lab is a WordPress plugin that simplifies the process of creating custom blocks to use in the block editor, AKA Gutenberg, the new content editor in WordPress 5.0.</p>
<p>Ordinarily, you\u2019re restricted to the types of blocks WordPress includes by default\u2014the standard text, headings, dividers, images, quotes, etc.\u2014and if you need something more specialized, you\u2019d either have to install a third-party plugin with the type of block you want, or you\u2019d have to get your hands dirty writing a pretty good deal of custom code. Block Lab is something of a best-of-both hybrid of those two choices.</p>
${validate_component(CalloutPlusQuote, "CalloutPlusQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Block Lab is a plugin that helps you create your own custom blocks with minimal code required.
`;
          }
        })}
<p>There are three main steps to this process:</p>
<ol><li>Set up the name and type of your block using the WordPress admin interface;</li>
<li>Create a template file in your theme that will render the block\u2019s contents whenever it\u2019s used;</li>
<li>Optionally, add some CSS to style the block.</li></ol>
<p>While there is technically a tiny bit of PHP involved, it\u2019s so little (and in the form of such reusable boilerplate) that I\u2019d say anybody comfortable writing HTML (and maybe a bit of CSS) should be just fine getting started with Block Lab.</p>
<h2 id="${"why-custom-blocks"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#why-custom-blocks"}"><span class="${"icon icon-link"}"></span></a>Why custom blocks?</h2>
<p>I always find it\u2019s helpful to start with the <em>why</em> before diving into the <em>how</em>, so let\u2019s take a second to talk about what custom blocks might be used for.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `If you&#39;re familiar with WordPress shortcodes, think of custom blocks as the next evolution of that idea. Custom blocks are the same concept, but much easier to use (since the author just picks a block type, rather than typing a specific key combination).
`;
          }
        })}
<p>Personally, I have a few custom blocks. One I really like\u2014that I\u2019ll use for this example\u2014is my \u201Cside note\u201D block. It renders content like this on the front end of the site:</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `This is just an example of the Side Note block! Nifty, eh.
`;
          }
        })}
<p>I find that block handy for expressing tangential thoughts and info in the middle of some content; it helps tell the reader that they can skip that part if they\u2019re not interested in extra details, while also adding some visual interest.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `If you\u2019re familiar with WordPress shortcodes, think of custom blocks as the next evolution of that idea. Custom blocks are the same concept, but much easier to use (since the author just picks a block type, rather than typing a specific key combination).
`;
          }
        })}
<p>It would certainly be possible to achieve this result without a custom block, but it would be tedious extra work. At minimum, you (or the author) would need to add a class to whatever block you were using each time you wanted to invoke the component. Or, you could use a shortcode, or even use the block editor\u2019s styling controls to change the block\u2019s appearance.</p>
<p>But in any of those cases, it\u2019s a hassle <em>and</em> too much to expect of content authors.</p>
<p>Ideally, authors would just be able to click a button to create a side note block and fill it in instead\u2014and that\u2019s exactly what a custom block allows you to do! No memorization or extra configuration required. Here\u2019s how it works, with the example side note you just saw above:</p>
<p><img src="${"/images/post_images/block-selection.png"}" alt="${"The WordPress block editor's block selection screen, showing a \u201Cside note\u201D block option"}"></p>
<p>Custom blocks can be easily selected from the normal block menu\u2026</p>
<p><img src="${"/images/post_images/side-note-block-backend-1024x405.png"}" alt="${"Filling text content into the side note component with a text box"}"></p>
<p>\u2026then simply filled in with content, with no need to worry about manual styling.</p>
<p>That\u2019s a lot better than styling the block manually or adding classes each time you want to use it, so let\u2019s dive into how to get that custom block set up.</p>
<h2 id="${"creating-your-first-custom-block"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#creating-your-first-custom-block"}"><span class="${"icon icon-link"}"></span></a>Creating your first custom block</h2>
<p>Like I said before: this will require a <em>little</em> bit of editing files and writing code, but as long as you\u2019re comfortable with basic HTML and navigating your WordPress file system, this should be perfectly well within your grasp. Don\u2019t sweat it if you don\u2019t know PHP\u2014there\u2019s so little required for basic blocks, it wouldn\u2019t even help anyway.</p>
<p>The natural first step is to install the Block Lab plugin, which of course you can do right from the WordPress admin like any other plugin, or by downloading the plugin from <a href="${"https://wordpress.org/plugins/block-lab/"}" rel="${"nofollow"}">WordPress.org</a> and uploading the .zip file.</p>
<p>Either way, once it\u2019s installed and activated, you\u2019ll find a new \u201D<strong>Block Lab</strong>\u201D item in the WordPress admin sidebar. Head there, and choose \u201D<strong>New block</strong>.\u201D</p>
<p><img src="${"/images/post_images/add-new-block-1024x687.png"}" alt="${"The \u201Cadd new block\u201D options screen in WordPress"}"></p>
<h3 id="${"block-options"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#block-options"}"><span class="${"icon icon-link"}"></span></a>Block options</h3>
<p>Let\u2019s cover the block options in the screenshot above briefly:</p>
<ul><li><strong>Block name</strong>: naturally enough, this is the name your block will go by; it\u2019s what you\u2019ll search for and choose when using your custom block in the editor, so name it intuitively (and nicely).</li>
<li><strong>Slug</strong>: the code-friendly name for the block, which you\u2019ll use later when creating the template file. You\u2019ll notice that as you type in the block name field, this will auto-populate for you, which is convenient.</li>
<li><strong>Icon</strong>: the icon used for the block\u2019s button. There are a few dozen to choose from. Ideally, pick one relevant to what the block does.</li>
<li><strong>Category</strong>: the group that this block will be associated with. You can choose one of WordPress\u2019s existing block categories, or create your own.</li>
<li><strong>Keywords</strong>: words related to the functionality or type of your block, which will be used to match when searching for blocks. It\u2019s probably a good idea to add some, in case you can\u2019t remember your block\u2019s exact name, or other content authors are just trying to find a block that does what yours does by typing similar words.</li></ul>
<p>At minimum, you\u2019ll need to give your block a name (which will also assign it a slug, which you\u2019ll also need). Icon, category and keyword are all optional, but also all good ideas.</p>
<p>Once you\u2019ve named your block, click the \u201D<strong>add field</strong>\u201D button to start adding some actual customized functionality to your block.</p>
<h3 id="${"field-options"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#field-options"}"><span class="${"icon icon-link"}"></span></a>Field options</h3>
<p>Fields are the things you actually fill in with your content when using the block. You could think of the field(s) as the variable part of the block; the part that the user adds each time the block is used.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Theoretically, you could have a block without fields if it just looked and worked the same each time it was used\u2014a divider or spacer block, for example\u2014but generally, you\u2019ll want at least one field to fill in with some content.
`;
          }
        })}
<p>Most of the time, I find just one field per block is what I want, but you can get creative do more than one. Either way, you have several options for field type. Let\u2019s get a quick overview of the main options:</p>
<p><img src="${"/images/post_images/Image-2020-06-13-at-9.57.00-PM-1024x976.png"}" alt="${"All the options for fields in a Block Lab block, explained in greater detail below.\n"}"></p>
<p>If you\u2019re familiar with Advanced Custom Fields (ACF), then this part will be very familiar to you. In fact, as I understand it, Block Lab is actually built on top of Advanced Custom Fields under the hood, so all the power of that excellent plugin comes standard.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Block Lab is actually built on top of Advanced Custom Fields under the hood, so all the power of that excellent plugin comes\xA0standard.
`;
          }
        })}
<p>In any case, though, working with fields in Block Lab is pretty much identical to working with fields in ACF.</p>
<ul><li><strong>Field label</strong>: intuitively enough, how the field will be labeled when this block is used.</li>
<li><strong>Field name</strong>: the sluggified version of the label; you\u2019ll use this later in your code to actually pull the contents out of the field and display it in the template file. Also auto-fills when you create the label.</li>
<li><strong>Field type</strong>: this is the most important part; there are several options like text (short), textarea (long), image, toggle, multi-select, and many others. Again, if you\u2019re familiar with ACF, you won\u2019t find anything surprising here. For most straightforward content block use cases, a text or textarea type will do just fine.</li>
<li><strong>Field location</strong>: whether this field appears directly in the content area (editor), or in the sidebar (inspector). I\u2019d stick with \u201CEditor\u201D unless you have a good reason to move the field out of the main content flow.</li></ul>
<p>I\u2019m not going to go into the other options here since they\u2019re, well, optional, but they\u2019re fairly straightforward, and you can read about them in the <a href="${"https://getblocklab.com/docs/fields/"}" rel="${"nofollow"}">Block Lab documentation</a> if you\u2019re so inclined.</p>
<p>If it helps, this is how my example \u201CSide Note\u201D block from above is set up:</p>
<p><img src="${"/images/post_images/side-note-options-1024x694.png"}" alt="${"The config options for my example \u201CSide Note\u201D block from this site; as a textarea field type with field location set to \u201CEditor.\u201D"}"></p>
<p>I don\u2019t fill in the help text since I\u2019m the only editor on this site, but it\u2019s a good idea if your block(s) will be used by others.</p>
<p>In any case, once you\u2019re happy with the setup of your block, hit the <strong>Publish</strong> button, and you\u2019ll be done here!</p>
<p>Helpfully, Block Lab gives you a popup detailing your next step, which is: creating a template file for your block, which you\u2019ll place inside your theme.</p>
<p><img src="${"/images/post_images/next-step-1024x381.png"}" alt="${"Instructions to place a PHP template file in the active theme, in a \u201Cblocks\u201D directory"}"></p>
<p>As you can see, Block Lab helpfully lets you know what to do next once you\u2019ve published your block.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Technically, your block is available to choose in the block editor at this point, but it won\u2019t work right until you take the next step and add a template file.
`;
          }
        })}
<h3 id="${"create-a-template-file-for-your-custom-block"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#create-a-template-file-for-your-custom-block"}"><span class="${"icon icon-link"}"></span></a>Create a template file for your custom block</h3>
<p>In order to display your custom block (either in the block editor or on the front end of the site), you\u2019ll need to create a PHP template file for it. Don\u2019t panic, though. As I\u2019ve already mentioned: the beautiful thing about Block Lab is that you don\u2019t need to know anything about PHP to create custom blocks. Just a little HTML and CSS is enough. All you\u2019ll need to know is where to find your theme\u2019s folder, and how to add files to it. (And it may go without saying, but be sure you\u2019re using a <a href="${"https://api.rickyjanuari.com/wordpress-child-theme-explanation/"}" rel="${"nofollow"}">child theme</a> or your own custom theme before you attempt this, or your work will probably be overwritten next time your theme updates.)</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `The beautiful thing about Block Lab is that you don\u2019t need to know anything about PHP to create custom blocks. Just a little HTML and CSS is\xA0enough.
`;
          }
        })}
<p>Again, Block Lab lets you know exactly what you should name your template file and where to place it. There are a few ways to go about this part, depending on your needs (you can <a href="${"https://getblocklab.com/docs/get-started/add-a-block-lab-block-to-your-website-content/"}" rel="${"nofollow"}">read more in the documentation</a> if interested), but we\u2019ll stick with the simplest:</p>
<ol><li>Create a folder named <code>blocks</code> inside your theme\u2019s folder;</li>
<li>Create a file for your custom block, with the name that Block Lab gives you, inside that folder.</li></ol>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Obviously, you\u2019ll need to be able to access your site\u2019s files in order to complete this step. That means either using FTP, or a plugin that gives you access to the file system from the WordPress admin.
`;
          }
        })}
<p>The naming convention is: <code>block-slug.php</code>, where <code>slug</code> becomes the actual \u201Cslug\u201D field you used above when the block was created. In the case of the example \u201Cside note\u201D block, the file that Block Lab will look for to render the block is <code>block-side-note.php</code>.</p>
<p>What you actually want inside your template depends on how you\u2019d like it to look and what content it will hold, but let\u2019s assume we just want a basic <code>div</code> wrapping the content with a special class. In that case, here\u2019s what our <code>block-side-note.php</code> might look like:</p>
<pre class="${"language-php"}"><!-- HTML_TAG_START -->${`<code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>side-note<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">block_field</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'note-text'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Remember how I said you wouldn\u2019t need to know any PHP? That\u2019s because for basic blocks, the above is all you need, and you can easily just copy, paste, and adapt that code for whatever fields you have.</p>
<p>The important thing is just to make sure that the string inside the parentheses (<code>&#39;note-text&#39;</code> in the example code block above) matches the field\u2019s name.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `The important thing is just to make sure that the string inside the parentheses (<code>&#39;note-text&#39;</code> in the example code block above) matches the field\u2019s\xA0name.
`;
          }
        })}
<p>What this all means is: every time you use this block, it\u2019ll be dynamically rendered wrapped in a <code>div</code> with the <code>side-note</code> class. And the cool thing is: that applies both in the editor, and on the front end!</p>
<h3 id="${"adding-css"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#adding-css"}"><span class="${"icon icon-link"}"></span></a>Adding CSS</h3>
<p>Obviously, a <code>div</code> doesn\u2019t do us much good on its own; we need to use some CSS to style our content, too. That code <em>could</em> go in your theme\u2019s stylesheet if you only care about styling the block on the front end and not in the editor. However, if you want to use the same styles both places (which I personally feel is nice, since it\u2019ll help the editing experience mirror the finished look), you\u2019ll want to add a new stylesheet just for blocks.</p>
<p>To do this, create a <code>blocks.css</code> file, also in the <code>blocks</code> folder in your active theme. Block Lab will automatically read this stylesheet and apply its styles on both the front and back end of the site.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `You could also have <a href="${"https://getblocklab.com/docs/get-started/style-block-lab-custom-blocks/"}" target="${"_blank"}" rel="${"noreferrer noopener"}">a separate CSS file for each block</a>, but unless a block gets pretty complex, I personally prefer just having all block styling together in one place.
`;
          }
        })}
<p>Here\u2019s the actual CSS code I use on this site to create that Side Note component, if you\u2019re interested or want to try this block out on your site:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token selector">.side-note</span> <span class="token punctuation">&#123;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> .5rem 1.5rem<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 3rem 0<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> .9rem<span class="token punctuation">;</span>
  <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">var</span><span class="token punctuation">(</span>--lightBlue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token selector">.side-note:before</span> <span class="token punctuation">&#123;</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'Side Note'</span><span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> -.5em<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> .5rem<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--paper<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0 1rem<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
  <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> .7rem<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--lightBlue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<h2 id="${"recap"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#recap"}"><span class="${"icon icon-link"}"></span></a>Recap</h2>
<p><strong>That\u2019s all it takes!</strong> Creating a custom block to use in the block editor is as simple as:</p>
<ol><li>Using Block Lab to create a block and pick its options;</li>
<li>Adding a block template file to your theme;</li>
<li>Optionally, adding CSS for the block.</li></ol>
<h2 id="${"notes-on-block-labs-future-and-unlocking-block-lab-pro"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#notes-on-block-labs-future-and-unlocking-block-lab-pro"}"><span class="${"icon icon-link"}"></span></a>Notes on Block Lab\u2019s future, and unlocking Block Lab Pro</h2>
<p><strong>Of note</strong>: <strong>Block Lab was recently acquired by <a href="${"https://wpengine.com/"}" rel="${"nofollow"}">WP Engine</a></strong>. You can <a href="${"https://getblocklab.com/the-block-lab-team-are-joining-wp-engine/"}" rel="${"nofollow"}">read about the acquisition on their blog</a>, but the summary is: Block Lab itself is not going to live on in its current form. However, the team is building something similar and new with WP Engine, and they\u2019ve committed to offering a seamless migration path when that product comes out, whatever it looks like.</p>
<p>In the meantime, the plugin will continue working for the foreseeable future. And as a bonus, the Block Lab team has publicly revealed that the Pro tier of the plugin\u2014a paid offering, which is now obviously an unappealing investment\u2014is easily unlocked by modifying a single line of code within the plugin.</p>
<p>That needs to be done manually, of course, and will need to be re-done any time the plugin updates (if it does). But to do this: you can simply go into the plugin\u2019s folder, open <code>php/class-util.php</code>, and change the <code>is_pro()</code> function (on line 31, as of this writing) to return <code>true</code>, like so:</p>
<pre class="${"language-php"}"><!-- HTML_TAG_START -->${`<code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">is_pro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//This line is edited</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>That will open up a handful of additional extremely handy fields for you to use in your blocks, including the all-powerful repeater field, and the ever-useful rich text field.</p>
<p>Again, though, just remember to modify the line again if the plugin ever updates; you\u2019re playing with fire a little bit by going this route, and bad things will probably happen to your pro feature blocks if the plugin updates and your modification is lost. This is definitely not WordPress best practice by any means, but it <em>is</em> a viable path to unlocking some powerful features in an already exceptionally useful plugin.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/essential-tools-wordpress-development-2b28f9a5.js
  var essential_tools_wordpress_development_2b28f9a5_exports = {};
  __export(essential_tools_wordpress_development_2b28f9a5_exports, {
    default: () => Essential_tools_wordpress_development,
    metadata: () => metadata11
  });
  var metadata11, Essential_tools_wordpress_development;
  var init_essential_tools_wordpress_development_2b28f9a5 = __esm({
    ".svelte-kit/output/server/chunks/essential-tools-wordpress-development-2b28f9a5.js"() {
      init_index_2749e1b7();
      init_SideNote_5c625ecb();
      metadata11 = {
        "title": "My Essential Tools for WordPress Development",
        "date": "2016-06-25",
        "updated": "2020-06-14",
        "categories": ["opinion", "web", "wordpress"],
        "coverImage": "Screenshot-2016-06-24-20_45_21.png",
        "coverWidth": 1381,
        "coverHeight": 609,
        "excerpt": "Some of these apps, resources and tools aren\u2019t directly WordPress-related, or even necessarily development-related; some have to do with productivity or just make life a little easier. That\u2019s by design. Part of being a developer is learning to work and use your tools as efficiently and with as little wasted time and mental energy as possible."
      };
      Essential_tools_wordpress_development = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>What follows is a list of software, in some form, that I feel is useful, recommendable or indispensable when developing WordPress sites.</p>
<p>Some of these apps, resources and tools aren\u2019t directly WordPress-related, or even necessarily development-related; some have to do with productivity or just make life a little easier. That\u2019s by design. Part of being a developer is learning to work and use your tools as efficiently and with as little wasted time and mental energy as possible.</p>
<p>This is a list of the things that help me toward that goal. If you handed me a brand new MacBook and told me to get to work on building your WordPress site, everything on this list would most likely be in my dock, browser history and/or plugins list by the end of the day.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `This post hasn\u2019t been updated for a while; Wunderlist isn\u2019t a thing anymore, and neither is Spectacle (it\u2019s a new app called Rectangle now, which honestly is better). Some of the pricing has changed; neither LastPass nor Chrome are my first choices in their category anymore; and in this moment at least, I\u2019d definitely add Block Lab to the list. Still, I leave the post as-is both in the interest of not rewriting history, and because I still think the list is mostly helpful. You can check my /uses page for more.
`;
          }
        })}
<p><img src="${"/images/post_images/Dropbox.svg"}" alt="${"Dropbox Logo"}"></p>
<h3 id="${"dropbox"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#dropbox"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://www.dropbox.com"}" rel="${"nofollow"}">Dropbox</a></h3>
<p><strong><a href="${"http://www.dropbox.com"}" rel="${"nofollow"}">dropbox.com</a></strong> | <em>Up to 2 GB free; 1 TB $9.99 per month.</em></p>
<p>You\u2019re going to need somewhere to store your files, and <a href="${"https://www.dropbox.com"}" rel="${"nofollow"}">Dropbox</a> syncs beautifully with all your devices. You can also set up synced folders, so that anything you save in a particular folder on your machine is available on any machine, thus creating both a local and cloud copy. It can also automatically save screenshots, upload pics from your smartphone\u2019s camera for safe storage, and send/receive client files easily.</p>
<p><img src="${"/images/post_images/LastPass-Logo-Color.svg"}" alt="${"LastPass logo"}"></p>
<h3 id="${"lastpass1password"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#lastpass1password"}"><span class="${"icon icon-link"}"></span></a><a href="${"http://www.lastpass.com"}" rel="${"nofollow"}">LastPass/1Password</a></h3>
<p><strong><a href="${"http://www.lastpass.com"}" rel="${"nofollow"}">lastpass.com</a></strong> | <em>free to start; $12 per year</em>
<strong><a href="${"http://1password.com"}" rel="${"nofollow"}">1password.com</a></strong> | <em>$5 per month for families or $64.99 one-time fee for a single user</em></p>
<p>I don\u2019t have a strong preference between the two, but there\u2019s no excuse for not using a password manager in this day and age. Odds are good you\u2019ll have at least two usernames and passwords to remember for every single site you work on\u2014maybe more\u2014and repeating the same one or making it easy to type and remember is an awful idea when you\u2019re using the world\u2019s most popular CMS. Saving brain power is making your life better and your workflow more efficient. And besides, these are extremely affordable apps; LastPass is only $12 per year. Make like Nike and just do it.</p>
<p><img src="${"/images/post_images/32078472-5053adea-baa7-11e7-9034-519002f12ac7.png"}" alt="${"VS Code logo"}"></p>
<h3 id="${"visual-studio-code"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#visual-studio-code"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://code.visualstudio.com/"}" rel="${"nofollow"}">Visual Studio Code</a></h3>
<p><strong><a href="${"https://code.visualstudio.com/"}" rel="${"nofollow"}">code.visualstudio.com</a></strong> | <em>Free</em></p>
<p>Honestly, it doesn\u2019t matter all that much which text editor you use, as long as you know how to use it well. But I love <a href="${"https://code.visualstudio.com/"}" rel="${"nofollow"}">VS Code</a> because it <em>just works</em>.</p>
<p>I used to be on the Sublime Text bandwagon, and I won\u2019t deny that Sublime runs slightly faster in some cases. But unlike Sublime, VS Code <em>just works</em> in the ways you want it to out of the box. Emmet comes pre-installed, as does git. There\u2019s also no package manager to install; extensions are native, and easily available. VS Code comes pre-configured and you can customize from there in some amazing ways.</p>
<p>I highly recommend the following extensions, but you can mix and match your own as well (and by the way, this list used to be several entries longer; VS Code just automatically handles a lot of the things I was installing packages for in Sublime Text):</p>
<ul><li><a href="${"https://packagecontrol.io/packages/CSS%20Extended%20Completions"}" rel="${"nofollow"}"><strong>Close XML/HTML tag</strong></a> (for quickly adding closing tags; a feature of Sublime Text this package adds)</li>
<li><strong>highlight-matching-tag</strong> (Shows where the closing tag is for a selected opening tag and vice versa)</li>
<li><strong>WordPress Toolbox</strong> (for auto-completion of many WordPress PHP functions; a real life-saver)</li></ul>
<p><img src="${"/images/post_images/GenerateWP.png"}" alt="${"GenerateWP logo"}"></p>
<h3 id="${"generatewpcom"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#generatewpcom"}"><span class="${"icon icon-link"}"></span></a><a href="${"http://generatewp.com/"}" rel="${"nofollow"}">GenerateWP.com</a></h3>
<p><strong><a href="${"http://generatewp.com/"}" rel="${"nofollow"}">generatewp.com</a></strong> | <em>Free unlimited basic generators; premium starts at $7 per month</em></p>
<p>There\u2019s a <em>ton</em> of PHP to remember in WordPress, the difficulty of which is compounded by the fact that many of the functions WordPress provides us are either confusingly or extremely similarly named. (Somehow <code>wp_enqueue_script</code> and <code>wp_enqueue_script_s_</code> are totally different things.)</p>
<p>GenerateWP does the work for you in generating blocks of code. You just fill out some fields telling the site what you\u2019re after and it will spit out the code for you to copy and paste in the appropriate PHP file. Everything from custom <code>WP_Query</code> loops to defining custom post types and much, much more can now be handled by checking some boxes and filling out a few fields instead of peering through the WordPress Codex trying to remember the difference between <code>get_header()</code> and <code>wp_head()</code>.</p>
<p><img src="${"/images/post_images/Local-Logo.svg"}" alt="${"Local logo"}"></p>
<h3 id="${"local-by-flywheel"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#local-by-flywheel"}"><span class="${"icon icon-link"}"></span></a>Local by Flywheel</h3>
<p><a href="${"http://local.getflywheel.com/"}" rel="${"nofollow"}"><strong>local.getflywheel.com</strong></a> | <em>Free; paid pro version upcoming</em></p>
<p>Developing locally is always preferable to developing on a live server, for lots of reasons that I won\u2019t go into here. There are a lot of programs and processes available for that; I used to use <a href="${"http://mamp.info"}" rel="${"nofollow"}">MAMP</a> to make that possible. But ever since its release, <a href="${"http://local.getflywheel.com/"}" rel="${"nofollow"}">Local</a> has blown the other tools out of the water in my mind. It\u2019s a phenomenal tool for WordPress development, allowing you to spin up and run sites locally. It also couples with CodeKit (below), which makes it even more awesome. Cowboy-coding\u2014i.e., altering the code on a live site\u2014is a bad habit; break it with Local (and save yourself a lot of FTP upload/download time in the process).</p>
<p>The most amazing thing about Local, though: you can actually give a link to your local development site to your client, and as long as Local is running on your machine\u2014<em>no matter where they are</em>\u2014they can see the site. That\u2019s a total game-changer.</p>
<p>Quick disclaimer: I do work for Flywheel, but I\u2019d be writing this even if I didn\u2019t. With MAMP, I had to actually download WordPress, spin up a database, configure and run the install manually. Local does all of that automatically with a click of a button. (Plus the links thing above.)</p>
<p><img src="${"/images/post_images/CodeKit.png"}" alt="${"CodeKit logo"}"></p>
<h3 id="${"codekit"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#codekit"}"><span class="${"icon icon-link"}"></span></a><a href="${"http://incident57.com/codekit"}" rel="${"nofollow"}">CodeKit</a></h3>
<p><strong><a href="${"http://incident57.com/codekit"}" rel="${"nofollow"}">incident57.com/codekit</a></strong> | <em>Free limited trial; one-time $32 licensing fee</em></p>
<p>It\u2019s very hard to explain what <a href="${"http://incident57.com/codekit"}" rel="${"nofollow"}">CodeKit</a> does in a way that makes it sound as indispensable as it actually is. Maybe that\u2019s just because it has so many features it\u2019s easy to drown the message. But even if you don\u2019t use it for anything else, it\u2019s capable of auto-refreshing the site you\u2019re working on every time you save your code, seamlessly compiling your SASS files every time you save them, checking files for errors and allowing you to watch your site on multiple devices at the same time. (Yes\u2014you can browse the site on your desktop and watch the exact same interactions happen on your smartphone <em>at the same time</em>, and vice versa!)</p>
<p>That alone, to me, is well worth the low $32 price tag, but that\u2019s really only scratching the surface. It can grab external libraries for you, plus concatenate and minify your files so you\u2019re ready to go to production with a lean, efficient set of CSS and JS files, and so much more. I promise you that if you give CodeKit a real shot, it will become an indispensable part of your workflow.</p>
<p><img src="${"/images/post_images/acf-pro-dev-launch.png"}" alt="${"Advanced Custom Fields PRO logo"}"></p>
<h3 id="${"advanced-custom-fields-pro"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#advanced-custom-fields-pro"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://www.advancedcustomfields.com/"}" rel="${"nofollow"}">Advanced Custom Fields (PRO)</a></h3>
<p><strong><a href="${"https://www.advancedcustomfields.com/"}" rel="${"nofollow"}">advancedcustomfields.com</a></strong> | <em>Basic version free; PRO $25 per site or $100 lifetime</em></p>
<p>There may be no better way to spend $100 in the WordPress development world than on a developer license for <a href="${"https://www.advancedcustomfields.com/"}" rel="${"nofollow"}">ACF</a>. It\u2019s quite possibly my favorite plugin of all.</p>
<p>Sure, the free version of the plugin is still amazing, but its most lacking exemption is the repeater field. You won\u2019t be developing sites for too long before you run up against a client variable: a situation in which you\u2019re not exactly sure how many fields they might need. And allowing the client to account for that contingency on their own is well worth $100 in saved headaches. But even if a Benjamin is enough to make you balk, ACF has a wonderfully user-friendly pricing structure: you can buy a single-site license for $25 instead, and have that $25 apply to your $100 purchase later if you decide you\u2019re ready for the developer license.</p>
<p>Aside from that though, ACF is perhaps the single most important piece of making WordPress sites ready for any client to use. Most clients can\u2019t (and shouldn\u2019t) be trusted with the full WordPress editor window, particularly where layout and media may vary. ACF allows you to build a fluid, automatic machine that takes care of all of that for you and your client when they simply fill out the fields and checking the boxes you\u2019ve provided.</p>
<p>In short, ACF makes the experience of using the WordPress site you\u2019ve built for them less like trying to cobble a page design together in a word processor, and more like using an elegant custom app constructed exclusively for the user. (And it has the bonus effect of preventing the client from screwing things up too badly, too.)</p>
<p><img src="${"/images/post_images/Chrome.png"}" alt="${"Google Chrome browser logo"}"></p>
<h3 id="${"google-chrome"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#google-chrome"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://www.google.com/chrome/browser/desktop/"}" rel="${"nofollow"}">Google Chrome</a></h3>
<p><strong><a href="${"http://www.google.com/chrome/browser"}" rel="${"nofollow"}">google.com/chrome/browser</a></strong> | <em>Free</em></p>
<p>Your choice of browser is less and less relevant these days, but Chrome is still the industry standard for both its robust dev tools and the ability to add extensions to make your development life easier. I personally am a huge fan of:</p>
<ul><li><a href="${"http://getsnatchrr.com/"}" rel="${"nofollow"}"><strong>Snatchr</strong></a> \u2013 allows you to see the type and color styles in CSS of the page you\u2019re viewing neatly and easily</li>
<li><a href="${"https://getpocket.com/"}" rel="${"nofollow"}"><strong>Pocket</strong></a> \u2013 saves pages and articles to read later (even saves them offline)! This is honestly a tool so handy it probably deserves its own entry</li>
<li><a href="${"https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm?hl=en-US"}" rel="${"nofollow"}"><strong>Web Developer</strong></a> \u2013 Does <em>tons</em> of useful things, like show the current page in several device sizes</li>
<li><a href="${"https://chrome.google.com/webstore/detail/website-ip/ghbmhlgniedlklkpimlibbaoomlpacmk?hl=en"}" rel="${"nofollow"}"><strong>Website IP</strong></a> \u2013 View the IP address of the site you\u2019re viewing. Helpful when dealing with DNS changes and site migrations</li>
<li><a href="${"https://www.typesample.com/"}" rel="${"nofollow"}"><strong>Type Sample</strong></a> \u2013 Hover over text in the browser to see its font-family and -size, and click to type your own phrase in the selected typeface. Neat!</li></ul>
<p><img src="${"/images/post_images/github_desktop.png"}" alt="${"GitHub"}"></p>
<h3 id="${"github-desktop"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#github-desktop"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://desktop.github.com/"}" rel="${"nofollow"}">GitHub Desktop</a></h3>
<p><strong><a href="${"https://desktop.github.com/"}" rel="${"nofollow"}">desktop.github.com</a></strong> | <em>Free</em></p>
<p>I like version control and having a repository of my code changes, but I really dislike using git from the command line. GitHub Desktop is a nice, app that gives you a more straightforward (for git, at least) experience with updating your code and pushing/pulling from GitHub.</p>
<p>Git and version control can be a bit intimidating, but GitHub Desktop does a nice job of abstracting the fear about as much as possible and making it simple.</p>
<p><img src="${"/images/post_images/Transmit.png"}" alt="${"Transmit FTP client logo"}"></p>
<h3 id="${"transmit"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#transmit"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://panic.com/transmit/"}" rel="${"nofollow"}">Transmit</a></h3>
<p><strong><a href="${"https://panic.com/transmit/"}" rel="${"nofollow"}">panic.com/transmit</a></strong> | <em>Limited free trial; $34 one-time licensing fee</em></p>
<p>If I\u2019m being honest here, I couldn\u2019t give you much of an elevator speech on why Transmit is that much better than its free alternatives like Cyberduck or FileZilla. A little more polish and maybe a better user interface, but we\u2019re still talking about moving FTP files around here, so there isn\u2019t a whole lot of room for distinction.</p>
<p>Still, Transmit is the industry gold standard in FTP clients, so there must be some reason for that (and the $34 price tag). I guess I just haven\u2019t used other FTP clients enough to really know the difference, so if you\u2019re into cutting cost, this might be a good place.</p>
<p><img src="${"/images/post_images/Alfred.png"}" alt="${"Alfred app logo"}"></p>
<h3 id="${"alfred"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#alfred"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://www.alfredapp.com/"}" rel="${"nofollow"}">Alfred</a></h3>
<p><strong><a href="${"https://www.alfredapp.com/"}" rel="${"nofollow"}">alfredapp.com</a></strong> | <em>Free; Powerpack for extended functionality \xA317.00</em></p>
<p><a href="${"https://www.alfredapp.com/"}" rel="${"nofollow"}">Alfred</a> is Mac software that doesn\u2019t have anything directly to do with development, really; it\u2019s just an incredibly handy little piece of software that can do lots of things to make your life in OSX just a little easier.</p>
<p>The \u201Cspotlight\u201D feature (see what I did there?) is that Alfred can search for and open files and folders for you with a very quick and efficient search, so you don\u2019t need to waste time digging through files structures or trying to remember where you put a particular document. You can configure this search to be very specific and to include/exclude whatever you like. Plus it does math, opens programs, defines words, runs system commands, opens browsers, and can be configured to do powerful things like keep clipboard history, run workflows, expand snippets and even open Terminal to run commands there.</p>
<p>It\u2019s one of those tools that you won\u2019t realize you ever wanted until you try it and realize you can\u2019t live without it anymore. In fact, there\u2019s a very good chance it would be the very first thing I installed on a new computer.</p>
<p><img src="${"/images/post_images/Spectacle-Logo.jpg"}" alt="${"Spectacle app logo"}"></p>
<h3 id="${"spectacle"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#spectacle"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://www.spectacleapp.com/"}" rel="${"nofollow"}">Spectacle</a></h3>
<p><strong><a href="${"https://www.spectacleapp.com/"}" rel="${"nofollow"}">spectacleapp.com</a></strong> | <em>Free (open source; donations accepted)</em></p>
<p>Even if you\u2019re good at using workspaces and key commands, you probably spend more time than you realize in your day moving windows around your desktop: get the browser out of the way to use FTP, change the Finder window to be smaller so you can drag something from it to another window (which you also had to move), set the browser back to fullscreen, then move it again so you can see the desktop and open another window to copy some text before moving that window back out of the way\u2014</p>
<p>Sound familiar?</p>
<p><a href="${"https://www.spectacleapp.com/"}" rel="${"nofollow"}">Spectacle</a> is a delightfully simple little app that allows you to assign keyboard shortcuts to resize and move windows for you. No more dragging; just hit the command you\u2019ve defined and poof\u2014your window is now on the left half of the screen. Or the upper-right quarter. Or the lower third. Or on the next workspace. Or fullscreen. Hit the shortcut again to put it back, if you need to.</p>
<p>Gallons of wasted time and effort are accumulated a drip at a time. Spectacle is one of those apps that helps stop the drip.</p>
<p><img src="${"/images/post_images/Image-2017-01-24-at-9.45.27-AM-1024x359.png"}" alt="${"Tiny PNG Logo"}"></p>
<h3 id="${"tinypng"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#tinypng"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://tinypng.com/"}" rel="${"nofollow"}">TinyPNG</a></h3>
<p><strong><a href="${"https://tinypng.com/"}" rel="${"nofollow"}">tinypng.com</a></strong> | <em>Free unlimited use</em>
<strong><a href="${"https://wordpress.org/plugins/tiny-compress-images/"}" rel="${"nofollow"}">wordpress.org/plugins/tiny-compress-images</a></strong> | <em>Free for first 500 compressions per month; extra start at 9\xA2 per compression</em></p>
<p>Amazingly, I just learned that TinyPNG is not only <a href="${"https://tinypng.com/"}" rel="${"nofollow"}">a website</a> where you can compress the fatty megabytes out of your image files for free (often at gigantic reductions in both size and page loading time); it\u2019s also a <a href="${"https://wordpress.org/plugins/tiny-compress-images/"}" rel="${"nofollow"}">WordPress plugin</a>! Install it and follow the steps in the plugin settings to get set up with an API key you can use to compress either new uploaded images, existing images, or both.</p>
<p>Like every compression plugin that I\u2019ve found, at a certain threshold, TinyPNG does start charging by the image. That threshold in this case is 500 images per month, which may sound like a lot, but remember that every image file you upload to WordPress may get converted to any number of differently sized individual files, depending on your media settings. So one image upload may mean many compressions, and they can go fast.</p>
<p>The good news, though, is that the overage fee is 9\xA2 per image (which, again can stack up), although you don\u2019t necessarily have to input a payment method to use the plugin, which will just cap you at your allotted 500 compressions until the next month. Neato!</p>
<p>Of course, if cost and limits are a factor, you can always manually drop your images into TinyPNG.com before uploading them to WordPress as much as you like for free.</p>
<p><img src="${"/images/post_images/ClipMenu.png"}" alt="${"ClipMenu Mac app logo"}"></p>
<h3 id="${"clipmenu"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#clipmenu"}"><span class="${"icon icon-link"}"></span></a><a href="${"http://www.clipmenu.com/"}" rel="${"nofollow"}">ClipMenu</a></h3>
<p><strong><a href="${"http://www.clipmenu.com/"}" rel="${"nofollow"}">clipmenu.com</a></strong> | <em>Free</em></p>
<p>[<strong>EDIT:</strong> <em>While ClipMenu is still a wonderful tool, Alfred includes clipboard history as well, in case you\u2019re an app minimalist like me. I\u2019ve switched to Alfred for this particular functionality, but left this here in case you like the idea of keeping clipboard history but don\u2019t need everything Alfred offers.</em>]</p>
<p>You might not find this as handy as I do, but how many times have you copied something, and before you can paste it where it needs to go, accidentally copied something else?</p>
<p>Or how about this: how many times have you gone through the tedious process of changing back and forth between windows copying and pasting one thing at a time into place?</p>
<p><a href="${"http://www.clipmenu.com/"}" rel="${"nofollow"}">ClipMenu</a> stores a history of your clipboard so that you can paste from dozens of the last things you\u2019ve copied. No more going back and forth or accidentally copying something new, and no more worrying that you accidentally got rid of something you meant to keep on your clipboard. ClipMenu can be configured to store anywhere from a small number to dozens and dozens of the things you\u2019ve hit command + c on.</p>
<p><img src="${"/images/post_images/Wunderlist_Logo.png"}" alt="${"Wunderlist app logo"}"></p>
<h3 id="${"wunderlist"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#wunderlist"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://www.wunderlist.com/"}" rel="${"nofollow"}">Wunderlist</a></h3>
<p><strong><a href="${"https://www.wunderlist.com/"}" rel="${"nofollow"}">wunderlist.com</a></strong> | <em>Free for basic use; Pro $4.99 per month</em></p>
<p>It doesn\u2019t take very long in development before you\u2019re trying to keep track of lots and lots of tasks that need to get done. You might have a project manager who\u2019s monitoring all of that for you, and they might be doing so through an app like Asana or Trello. That\u2019s cool. But you also have personal to-dos, and shopping lists, and ideas to remember, and so on. That\u2019s where <a href="${"https://www.wunderlist.com/"}" rel="${"nofollow"}">Wunderlist</a> is great.</p>
<p>Wunderlist is really just a simple list-making app, and that\u2019s about it. But its elegance is in its simplicity and its ability to seamlessly permeate your life where needed and slide away into the background until then.</p>
<p>It\u2019s a desktop app, a smartphone app and a browser extension, so you can make lists, add to them and check items off from anywhere and have the changes sync everywhere. Plus, you can set due dates and reminders for individual tasks, and you can share lists with other users. If you\u2019re at all like me, you\u2019ll see your productivity and reliability jump when you start making lists in Wunderlist.</p>
<p>And, of course, there\u2019s that whole conserving mental energy thing I\u2019m a big fan of.</p>
<p><img src="${"/images/post_images/WP-plus-Jetpack.png"}" alt="${"WordPress.com plus Jetpack logos"}"></p>
<h3 id="${"calypsojetpack"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#calypsojetpack"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://developer.wordpress.com/calypso/"}" rel="${"nofollow"}">Calypso/Jetpack</a></h3>
<p><strong><a href="${"https://developer.wordpress.com/calypso/"}" rel="${"nofollow"}">developer.wordpress.com/calypso</a></strong> | <em>Free</em>
<strong><a href="${"https://jetpack.com/"}" rel="${"nofollow"}">jetpack.com</a></strong> | <em>Free; premium add-ons starting at $99 per year</em></p>
<p>You might know it as Calypso, the new WordPress.com, the WordPress.com app, Jetpack, or maybe even something else, but the (amazing) combination is just the same: manage all your WordPress sites together, in one tool, for free.</p>
<p>Let\u2019s backtrack: in 2016, WordPress.com announced an all-new dashboard interface, codenamed \u201CCalypso.\u201D This new, elegantly simple JavaScript-based app could be used to manage the main features of all of a user\u2019s WordPress.com sites\u2014posts, plugins, themes, etc. This was fantastic news for owners of sites hosted on WordPress.com, but for the rest of the world, self-hosting their own WordPress sites, <a href="${"https://automattic.com/"}" rel="${"nofollow"}">Automattic</a> (the company behind WordPress, run by WordPress co-creator <a href="${"https://en.wikipedia.org/wiki/Matt_Mullenweg"}" rel="${"nofollow"}">Matt Mullenweg</a>) offered a way to connect as well: through their already mega-popular plugin, Jetpack.</p>
<p><img src="${"/images/post_images/Jetpack_plugins.png"}" alt="${"Managing plugins with Jetpack, using auto update"}"></p>
<p>So in short, Calypso\u2014AKA the WordPress.com app\u2014allows you to connect all your sites together to manage them in one simple dashboard. To do this, you\u2019ll just need to sign up for a free account on WordPress.com, if you don\u2019t have one already (and odds are good if you\u2019ve been using WordPress for any length of time that you already do). Then you just install the Jetpack plugin (which has many of its own excellent features already, including a mini image CDN) and enter your WordPress.com credentials.</p>
<p>You\u2019ll have access to one app dashboard to manage all your sites. The major key feature for me: you can update plugins and themes remotely, so you don\u2019t have to sign in to each site individually. On its own, that\u2019s fantastic, but the icing on the cake is: you can even set plugins and themes to update <em>automatically</em>. (Or should I say: automattically?) It\u2019s a beautiful thing, and we haven\u2019t even scratched the surface of all the other cool things Jetpack can do on its own.</p>
<p><img src="${"/images/post_images/codepen.svg"}" alt="${"CodePen.io logo"}"></p>
<h3 id="${"codepen"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#codepen"}"><span class="${"icon icon-link"}"></span></a><a href="${"http://codepen.io"}" rel="${"nofollow"}">CodePen</a></h3>
<p><strong><a href="${"http://codepen.io"}" rel="${"nofollow"}">codepen.io</a></strong> | <em>Free; Pro starts at $9 / month</em></p>
<p>It may seem completely unrelated, but I can\u2019t tell you how handy it is to have an open playground for HTML, CSS and JS available at your fingertips at any time. I\u2019ve learned lots of tricks, skills and shortcuts from trying things out in <a href="${"http://codepen.io"}" rel="${"nofollow"}">CodePen</a> or looking at other users\u2019 code to see how they built their neat-o creation. It\u2019s also handy, when in lack of another solution, as a JavaScript linter and a debugging tool, or as a place to save code snippets for work or demo later. But more than anything, it\u2019s a sandbox. And you can learn a lot by building things in it.</p>

<p><img src="${"/images/post_images/affinity-photo-available-on-the-mac-app-store.png"}" alt="${"Affinity Photo logo"}"></p>
<h3 id="${"affinity-photo"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#affinity-photo"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://affinity.serif.com/photo/"}" rel="${"nofollow"}">Affinity Photo</a></h3>
<p><strong><a href="${"https://affinity.serif.com/en-gb/photo/"}" rel="${"nofollow"}">affinity.serif.com/photo</a></strong> | <em>Free trial; $49.99 one-time fee</em></p>
<p>Photoshop also works, if you have access to it. So do the wide range of free or cheap Photoshop replacements. But at some point when you\u2019re doing development work, you\u2019re going to need to crop, scale or alter an image, so you\u2019ll need some kind of photo manipulation software for that. I chose Affinity Photo as my recommendation because next to Photoshop (the general industry standard) it\u2019s comparably robust but at a shrinking fraction of the price: at $49.99, Affinity Photo will cost you once what a Creative Cloud subscription will cost you every single month.</p>
<p>It may not quite have all the features of Photoshop (though it\u2019s pretty close) or be quite the photo editing ninja that Lightroom is (though it\u2019s no slouch), but to replace the two apps together for a comparably low price tag, I feel the tradeoff is more than worth it.</p>
<p><img src="${"/images/post_images/elegant-themes-logo.svg"}" alt="${"Elegant Themes logo"}"></p>
<h3 id="${"a-great-premium-theme"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#a-great-premium-theme"}"><span class="${"icon icon-link"}"></span></a>A Great Premium Theme</h3>
<p>(If you\u2019re not developing your own, anyway.)</p>
<p>Let me get this out of the way right away: many premium themes are bloated and inefficient, at best. Ideally, you\u2019re building a custom theme for each client. But the world of ideals and the world of client work only have so much overlap.</p>
<p>Obviously building a client something personalized from the ground up is the ideal goal. It will likely run faster and almost certainly be more idealized for their purposes\u2014those two go hand-in-hand. But ideal goals often conflict with the reality of deadlines and budgets, and in that situation, you need a lot of power that you know how to wield quickly and efficiently. That\u2019s where a robust premium theme comes into play. Much like a framework, a great premium theme will allow you to get up and running in record time.</p>
<p>Personally, I\u2019m a big fan of <a href="${"http://www.elegantthemes.com/gallery/divi/"}" rel="${"nofollow"}">Divi by Elegant Themes</a> (though I should mention it requires a vigilant eye, as it updates frequently and vulnerabilities have been discovered in older versions). But there are lots of other premium themes out there\u2014Genesis, X, and many more\u2014that will give you all the tools you need to get a site working quickly and easily.</p>
<p>On projects with lean budgets, I often implement custom developed pages and templates where needed\u2014usually for the crucial and unique areas of a site\u2014and then (with a child theme, of course), use a premium theme\u2019s built-in tools to quickly assemble lesser static pages and content that don\u2019t need any custom fields, one-off template files or other special treatment.</p>
<p>In short: when you need to build quickly and on a budget, you need a framework to reach for. Maybe that\u2019s in theme form; maybe not. But having one that you know handy is essential for client work.</p>
<p><img src="${"/images/post_images/Flywheel-Logo.svg"}" alt="${"Flywheel logo"}"></p>
<h3 id="${"flywheel"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#flywheel"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://getflywheel.com/"}" rel="${"nofollow"}">Flywheel</a></h3>
<p><strong><a href="${"https://getflywheel.com"}" rel="${"nofollow"}">getflywheel.com</a></strong> | <em>Single-site subscriptions start at $15 per month; bulk subscriptions (10+ sites) start at $100 per month.</em></p>
<p>Full disclosure: I work for Flywheel. But I still wouldn\u2019t have another host even if I had the choice. The collaboration and client handoff tools are top-notch, the dashboard features (like a development mode, logs access, staging sites, cloned sites and others) are amazingly handy, and the performance is solid. Plus there are no headaches with things like keeping backups or restoring; it\u2019s all handled. The support\u2019s not too shabby, either. ;)</p>
<h3 id="${"other-plugins"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#other-plugins"}"><span class="${"icon icon-link"}"></span></a>Other plugins:</h3>
<p>Just a few of the modestly handy plugins I find myself using frequently:</p>
<ul><li><a href="${"https://wp-rocket.me/"}" rel="${"nofollow"}"><strong>WP Rocket</strong></a>
Concatenating and minifying your CSS and JS files is essential to optimizing page speed. There are free plugins to do this (like W3 Total Cache and Better WP Minify), but WP Rocket is worth the premium price tag to make the process simpler and easier. Ideally, you\u2019d be handling all of that manually at the development level, but if that\u2019s not an option, WP Rocket gets my vote for the best post-development fix.</li>
<li><a href="${"https://wordpress.org/plugins/ninja-forms/"}" rel="${"nofollow"}"><strong>Ninja Forms</strong></a>
Gravity Forms and Caldera Forms are also both fine choices, and I have no doubt there are others, too. I just like how easy it is to get Ninja Forms up and running for free.</li>
<li><a href="${"https://wordpress.org/plugins/wps-hide-login/"}" rel="${"nofollow"}"><strong>WPS Hide Login</strong></a>
The internet is full of bots looking for your WordPress login screen, but they can only find it if you keep it at the same URI as everybody else (/wp-admin). Change it.</li>
<li><a href="${"https://wordpress.org/plugins/custom-post-type-ui/"}" rel="${"nofollow"}"><strong>Custom Post Types UI</strong></a>
Although I do enjoy defining custom post types on my own, CPT UI is admittedly the easier way to do it. Just make sure you don\u2019t have a client who likes to go poking around where they don\u2019t belong when you turn the site over to them.</li>
<li><a href="${"http://codecanyon.net/item/essential-grid-wordpress-plugin/7563340"}" rel="${"nofollow"}"><strong>Essential Grid</strong></a>I\u2019m usually not much of a fan of Envato Market and its ilk because I disagree with some of their business practices and have had bad experiences with some of their plugins, but this particular paid plugin, at $26, offers the ability to get any kind of gallery up and running very quickly and easily on any site or page.</li>
<li><a href="${"https://wordpress.org/plugins/wordpress-seo/"}" rel="${"nofollow"}"><strong>Yoast SEO</strong></a>
I\u2019m not a big SEO guy, but this plugin will help you write better content so that your viewers can find it when it\u2019s relevant to them.</li>
<li><a href="${"https://wordpress.org/plugins/enable-media-replace/"}" rel="${"nofollow"}"><strong>Enable Media Replace</strong></a>
Super simple, but allows you to replace a media file and keep its metadata (URI, alt, title, etc.) intact rather than having to delete it and upload a new file every time there\u2019s a change.</li>
<li><a href="${"https://wordpress.org/plugins/show-current-template/"}" rel="${"nofollow"}"><strong>Show Current Template</strong></a>
More of a debugging tool than anything, but it\u2019s extremely helpful to be able to tell whether you\u2019re bucking the WordPress template hierarchy successfully, and which PHP template files aside from the main one are being loaded on the page.</li>
<li><a href="${"https://wordpress.org/plugins/insert-php/"}" rel="${"nofollow"}"><strong>Insert PHP</strong></a>
Handy if you need to run some PHP code from a WordPress content field. (Most developers will of course have ways around this, and it\u2019s presented here as more of a hack than a recommended way to do things. But in a pinch it works remarkably well.)</li>
<li><a href="${"https://wordpress.org/plugins/force-regenerate-thumbnails/"}" rel="${"nofollow"}"><strong>Force Regenerate Thumbnails</strong></a>
If you change your media upload size after you\u2019ve already uploaded some images, you\u2019ll want to run this.</li>
<li><strong>Captcha</strong>
There are many kinds (with many levels of intrusiveness), but since Captcha secures all forms, it helps keep bots out of your comments, contact forms, and your login screen. Those are all really good things.</li>
<li><a href="${"https://akismet.com/"}" rel="${"nofollow"}"><strong>Akismet</strong></a>
It\u2019s almost not worth mentioning because of its ubiquity and the fact that many WordPress users don\u2019t even allow comments on their site to begin with. But if you do allow comments, activate Akismet, get an API key, and and put the API key in place.</li></ul>
<p>That\u2019s it! I hope you\u2019ve found something useful here. Happy developing, WordPressers.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/filetypes-55ad3bb8.js
  var filetypes_55ad3bb8_exports = {};
  __export(filetypes_55ad3bb8_exports, {
    default: () => Filetypes,
    metadata: () => metadata12
  });
  var metadata12, Filetypes;
  var init_filetypes_55ad3bb8 = __esm({
    ".svelte-kit/output/server/chunks/filetypes-55ad3bb8.js"() {
      init_index_2749e1b7();
      metadata12 = {
        "title": "Understanding the Difference Between Image and Vector File Types",
        "date": "2015-06-11",
        "updated": "2021-01-19",
        "categories": ["design", "web"],
        "coverImage": "File-Types-Prev.png",
        "coverAlt": "135 / 89",
        "excerpt": "If you\u2019re like me, you\u2019ve probably spent some time wondering (and Googling) about the differences between various popular format types commonly used for graphic design applications. So I decided I\u2019d create a resource that\u2019s hopefully a handy reference on the matter of discerning file type supports and behavior."
      };
      Filetypes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>If you\u2019re like me, you\u2019ve probably spent some time wondering (and Googling) about the differences between various popular format types commonly used for graphic design applications. I\u2019ve found out I used or exported the wrong kind more times than I care to admit, and\xA0I\u2019ve asked or been asked the difference between a jpeg and a tiff on countless occasions. Even now it\u2019s difficult sometimes to remember whether certain file types support things like CMYK color or transparency, and\xA0so I decided I\u2019d create a resource that\u2019s hopefully a handy reference on the matter of discerning file type supports and behavior.</p>
<table><thead><tr><th>Format</th>
<th>Spot</th>
<th>CMYK</th>
<th>RGB</th>
<th>Vector</th>
<th>Transparency</th>
<th>Compression</th>
<th>Max Colors</th></tr></thead>
<tbody><tr><td>.eps</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>None</td>
<td>N/A</td></tr>
<tr><td>.gif</td>
<td>No</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>None</td>
<td>256</td></tr>
<tr><td>.jpg</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
<td>Lossy</td>
<td>Millions</td></tr>
<tr><td>.pdf</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Optional</td>
<td>N/A</td></tr>
<tr><td>.png</td>
<td>No</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>Lossless</td>
<td>256 or milliions</td></tr>
<tr><td>.svg</td>
<td>No</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Optional</td>
<td>N/A</td></tr>
<tr><td>.tif</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>Lossy or Lossless</td>
<td>Millions</td></tr>
<tr><td>.wmf</td>
<td>No</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Optional</td>
<td>Millions</td></tr></tbody></table>
<p><strong>A few notes\xA0about the chart and its summary:</strong></p>
<ul><li><strong>.jpg</strong> tends to be the best format\xA0for a photo or image with many colors where image size is a concern (especially on the web).</li>
<li><strong>.tiff</strong> is the ideal format for photo and raster applications\xA0where quality is the priority.</li>
<li><strong>.tiffs</strong> and <strong>.jpgs</strong> each support both RGB and CMYK, but this does not mean that a single tiff or jpeg file can be used for either application. In other words, .tiffs and .jpgs can exist as\xA0<em>either</em> CMYK or RGB files, but not both at the same time.</li>
<li><strong>.png</strong> is ideal for transparent raster images on the web\xA0<em>or</em> for web images with a low number of colors where compression may degrade quality (e.g., logos at fixed sizes or illustrations with large areas of flat color).</li>
<li><strong>.svg</strong>\xA0files\xA0(as their name implies) are designed for getting vectors to function and render on the web, as well as dynamic web animation. Ideal for logos on the web and other images that may need to display well at multiple sizes.</li>
<li><strong>.eps</strong> and <strong>.pdf</strong> have mostly the same functionality, and if you have the right software at your disposal they\u2019re largely interchangeable. However, .pdf is much more universal. This makes .eps a\xA0great choice for embedding or editing individual\xA0images (though .pdf also works for this purpose)\xA0and\xA0pdf better for outputting content for the end user to view or read. Regardless,\xA0they\u2019re both pretty much your only option for Pantone/spot colors, outside of Adobe\u2019s native file formats (.ai, .indd, etcetera). For more on that topic, see my post\xA0<a href="${"https://api.rickyjanuari.com/pantone/"}" rel="${"nofollow"}">Pantone\xAE, Color, and What I Wish I Had Known</a>.</li>
<li><strong>.gifs</strong> are still out there, but aside from animation, there\u2019s nothing a .gif can do that a .png can\u2019t do as well or better.</li>
<li>If you don\u2019t know this already, if there\u2019s an X in the CMYK column above, don\u2019t use that format for print (unless you\u2019re printing a screenshot for some reason).</li>
<li>You may have noticed that .jpg is the only format above not capable of supporting transparency.\xA0Don\u2019t waste your time trying to create a clear .jpg (or exporting an all-white Photoshop document as a .jpg without inserting a dark\xA0background first).</li>
<li>Not shown in the chart but important: <em>screens have a native resolution of 72 dpi, while print has a native resolution of 300 dpi.</em> Thus, an image that\u2019s 1800\xA0pixels wide in web resolution will likely be larger\xA0than your screen can display at full size, but will only be\xA0five\xA0inches wide at print resolution. Keep this in mind when working with raster files.</li>
<li>It\u2019s increasingly\xA0rare (thankfully) that a client would request a .wmf; I just included it on this chart in case it happens.</li></ul>
<p>If you have any questions or comments, please let me know!</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/five-ways-to-become-a-better-designer-that-arent-design-bb2117e3.js
  var five_ways_to_become_a_better_designer_that_arent_design_bb2117e3_exports = {};
  __export(five_ways_to_become_a_better_designer_that_arent_design_bb2117e3_exports, {
    default: () => Five_ways_to_become_a_better_designer_that_arent_design,
    metadata: () => metadata13
  });
  var metadata13, Five_ways_to_become_a_better_designer_that_arent_design;
  var init_five_ways_to_become_a_better_designer_that_arent_design_bb2117e3 = __esm({
    ".svelte-kit/output/server/chunks/five-ways-to-become-a-better-designer-that-arent-design-bb2117e3.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      metadata13 = {
        "title": "Five Ways to Become a Better Designer (That Aren't Design)",
        "date": "2017-02-04",
        "updated": "2020-05-18",
        "categories": ["design", "opinion"],
        "coverImage": "toa-heftiba-195458-1-1.jpg",
        "coverWidth": 80,
        "coverHeight": 51,
        "excerpt": "There\u2019s vast world of design learning and opportunity right in front of us constantly. All we need to do is take the time to notice it and learn from it."
      };
      Five_ways_to_become_a_better_designer_that_arent_design = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>Though this post is geared toward traditional graphic designers, when I say \u201Cdesigner,\u201D I really mean virtually any kind of creative\u2014particularly those who do commercial design of some kind. Whether you\u2019re a web designer, UI/UX designer, interior designer, copy writer, or any other kind of creative-for-hire: this is my list of recommendations for you.</p>
<p>(These, and of course, to <a href="${"https://en.wikipedia.org/wiki/Wear_Sunscreen"}" rel="${"nofollow"}">wear sunscreen</a>, because the rest of my advice has no basis more reliable than my own meandering experience.)</p>
<h2 id="${"1-embrace-public-speaking"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#1-embrace-public-speaking"}"><span class="${"icon icon-link"}"></span></a>1. Embrace Public Speaking</h2>
<p>If you\u2019re doing any kind of creative work for hire, it\u2019s not going to be too long before you need to do a presentation of some kind. And in many cases,the import ance of effectively selling your work rivals the import ance of the work itself.</p>
<p>If you\u2019re an introvert and this sounds like your nightmare, don\u2019t panic. This doesn\u2019t need to be a TED talk. I\u2019m not talking about a stage or a room full of people. You might not even need a screen or slides or a microphone.</p>
<p>I\u2019m only talking about maybe 3\u201312 people at a time, because you should absolutely get comfortable speaking and presenting in front the kind of groups you\u2019ll be talking to professionally as your clients.</p>
<p>(You know what\u2019s really good for developing that skill? See #4.)</p>
<p>Knowing how to present your work is an art in and of itself, and there are entire posts devoted to the specifics. I won\u2019t go into that here, but if you could use a brush-up, I highly recommend <a href="${"https://medium.com/@monteiro/13-ways-designers-screw-up-client-presentations-51aaee11e28c#.48nw2urx3"}" rel="${"nofollow"}">this article</a>. (I reread it before every presentation.) But no matter what, I encourage you to practice showing people things you created and talking about them.</p>
<p>In particular, talk about the <em>why</em> of your work: what decisions were made and for what purpose? What had to be left out or sacrificed? And how do all of these decisions reinforce the project goal\u2014i.e., the reason you\u2019re doing the work in the first place?</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `[Speaking] may not ever be completely comfortable for you, and that\u2019s ok. But you do need to be able to address people at least somewhat fearlessly in order to do your work justice (and to defend it from overzealous clients with uninformed opinions).
`;
          }
        })}
<p>If this is a big hurdle for you, again: don\u2019t panic. Start small. Talk to a couple of friends at first and build from there. You don\u2019t need to be a motivational speaker, and you don\u2019t ever need to get on a stage. It may not ever be completely comfortable for you, and that\u2019s ok. But you <em>do</em> need to be able to address people at least somewhat fearlessly in order to do your work justice (and to defend it from overzealous clients with uninformed opinions).</p>
<p>Now you might say, \u201CI hate speaking in front of people; I don\u2019t want a job where I have to do that.\u201D And that\u2019s possible. As a creative, you may get a job where you\u2019re relegated to a team of silent, unseen project laborers sending your work on up the pipeline of some agency to be presented by somebody above you. But there are three reasons you should still embrace public speaking, even in this case:</p>
<ol><li>Because one of the most important skills you can have to get noticed and promoted is the ability to address people (and you will likely want to advance at some point);</li>
<li>Because if you ever decide you don\u2019t like the job you have (and you likely will in this scenario), you\u2019re going to have to interview, and that almost certainly involves presentations and speaking of some kind;</li>
<li>A dislike of something is <em>not</em> a valid reason to forego a vital skill any more than a dislike of vegetables is a valid reason to eat a hamburger for every meal.</li></ol>
<h2 id="${"2-put-down-your-phone-and-notice-the-ordinary"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#2-put-down-your-phone-and-notice-the-ordinary"}"><span class="${"icon icon-link"}"></span></a>2. Put Down Your Phone and Notice the Ordinary</h2>
<p>I\u2019m as guilty as most anybody of pulling my phone out of my pocket any time I have more than about 5\u201310 seconds available for free thought (sometimes less). This behavior is often encouraged in creatives; we desperately need to be constantly seeking out inspiration online, it seems. We can\u2019t possibly consider ourselves modern, tasteful designers if we\u2019ve missed out on the latest thing, can we?</p>
<p>But there\u2019s vast world of design learning and opportunity right in front of us constantly. All we need to do is take the time to notice it and learn from it.</p>
<p>When you\u2019re waiting for your order in a restaurant, for example, rather than seek out distraction, look around you. Read the menu. How is it designed? Does it communicate clearly, or do you find that you have questions after reading it? Is there adequate spacing? Is it readable? How are the items categorized? How are things grouped and indicated?</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `There\u2019s vast world of design learning and opportunity right in front of us constantly. All we need to do is take the time to notice it and learn from\xA0it.
`;
          }
        })}
<p>Is the menu laminated? In a menu holder? Is it made to last or does it seem like it will be soon discarded?</p>
<p>And most importantly: after all of the above questions, follow up with, <em>why</em>? Who do you think made these decisions, and what were their reasons for doing so?</p>
<p>If at all possible, ask these questions and have the ensuing conversation with somebody else. Their perspective may be different than yours, and that will be invaluable.</p>
<p>Speaking of people: take the time to notice those around you. How are they reacting to the space, the menu, the lighting, and the environment in general? Are things going smoothly, or are some folks having difficulties? Why?</p>
<p>Deconstructing design\u2014trying to understand the decisions somebody else made and <em>why</em>\u2014is some of the best practice you can get in becoming a better designer yourself. This is especially true where a little empathy can be mixed in, and empathy comes from understanding.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `It\u2019s all too easy to forget that everybody is working within their own set of specific limitations\u2026and just because the end result of their struggle won\u2019t win any design awards doesn\u2019t mean they didn\u2019t come up with an excellent solution to the original\xA0problem.
`;
          }
        })}
<p>A design that you think is ugly may actually be highly functional, perfect for its target audience, or the best possible result of working within the provided constraints. (This is why <a href="${"https://api.rickyjanuari.com/why-designers-shouldnt-remake-other-designers-logos/"}" rel="${"nofollow"}">I hate projects to redesign somebody else\u2019s logo</a>). It\u2019s all too easy to forget that everybody is working within their own set of specific limitations\u2014budgets, timelines, tools, client feedback, etc.\u2014and just because the end result of their struggle won\u2019t win any design awards doesn\u2019t mean they didn\u2019t come up with an excellent solution to the original problem.</p>
<p>Another example a colleague of mine pointed out to me is cars, and particularly, tail lights. It\u2019s easy to pull out your smartphone in the car (as long as you\u2019re not driving, hopefully) and seek out immediate distraction. But look around you. Observe the design of the vehicles. Ask: why are the tail lights where they are? Why is the vehicle shaped that way?How many bulbs are in the lights on the car, and why? Are the lights small or large? <em>Why</em>?</p>
<p>And while you\u2019re at it: why do certain intersections have stop lights while others that would seem to benefit from their presence don\u2019t? Why are certain stop lights different than others? Where are the street signs posted? Are they obvious? Readable? Why do they look different from place to place? Why do certain lanes end where they do? Why is there a roundabout in this place and an intersection at another?</p>
<p>Look at the signage on buildings. Look at billboards. Look at shop window signage. Try to see through the design to the reasons behind it.</p>
<p>Asking these questions is important. Look up. There\u2019s a gold mine of design knowledge hidden in the everyday aspects of the real world.</p>
<h2 id="${"3-immerse-yourself-in-the-lives-of-people-who-arent-like-you"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#3-immerse-yourself-in-the-lives-of-people-who-arent-like-you"}"><span class="${"icon icon-link"}"></span></a>3. Immerse Yourself in the Lives of People Who Aren\u2019t Like You</h2>
<p>We, as designers, tend to think everybody likes\u2014and is therefore persuaded, delighted and enriched by\u2014beautiful graphics of the most modern and whimsical variety.</p>
<p>Separate yourself from this misconception as early as possible.</p>
<p>Sure, nobody likes ugliness, and it\u2019s generally apparent when design is out-of-date or cumbersome. That much is inarguable. But there\u2019s often a wide gap between what the designer <em>thinks</em> their target audience is like, and what that audience is <em>actually like as humans</em>.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `The heart of design is empathy. Whatever kind of design work you\u2019re doing, at its core, you\u2019re trying to solve a problem for somebody. Their problem is now your problem. So understanding that person, on a deep and personal level, is parallel to understanding the problem\xA0itself.
`;
          }
        })}
<p>Much has already been written on how designers tend to design for other designers. The approval of our clients and happiness of our users tends to mean less to us than the admiration of other professionals. <a href="${"https://dribbble.com/"}" rel="${"nofollow"}">Dribbble</a> and the homogeny it creates is often brought up in this discussion.</p>
<p>I\u2019ll leave that to other posts and just say this: <em>the heart of design is empathy</em>. Whatever kind of design work you\u2019re doing, at its core, you\u2019re trying to solve a problem for somebody. Their problem is now your problem. So understanding that person, on a deep and personal level, is parallel to understanding the problem itself.</p>
<p>In other words: to design is to understand. So get out of your bubble.</p>
<p>Make it a habit of reading books (or at the very least, <a href="${"https://medium.com/"}" rel="${"nofollow"}">Medium</a> posts) by people who aren\u2019t like you; whose experience in life has been substantially different than yours. (Gender, color and socio-economic background are great places to start.)</p>
<p>Listen to <a href="${"http://www.npr.org/"}" rel="${"nofollow"}">NPR</a> on your commute. I can\u2019t tell you how many times I\u2019ve sat in my car long after arriving at my destination to finish a story on <a href="${"https://themoth.org/radio-hour"}" rel="${"nofollow"}">The Moth Radio Hour</a> or an interview on <a href="${"http://www.npr.org/programs/fresh-air/"}" rel="${"nofollow"}">Fresh Air</a>, and come away from that experience with a fresh perspective on life that I never would have considered before.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `To design is to understand. So get out of your bubble. \u2026The wider your horizon, the more effectively you can solve problems for real people in the real\xA0world.
`;
          }
        })}
<p>Get some legitimate news in your life (the key word here being \u201Clegitimate;\u201D real news, not partisan or sensationalized). Watch documentaries, or at the very least, movies and TV shows where the characters don\u2019t look like you or live a life similar to yours (or the one you want). It\u2019s better than nothing.</p>
<p>Chat up strangers, even, if you\u2019re so daring. Talk to your barista or your server or postal worker about their day, their general life. Follow people different than you on Twitter.</p>
<p>The wider your horizon, the more effectively you can solve problems for real people in the real world.</p>
<h2 id="${"4-work-in-the-service-industry"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#4-work-in-the-service-industry"}"><span class="${"icon icon-link"}"></span></a>4. Work in the Service Industry</h2>
<p>I worked as a server and bartender most of my life prior to becoming a full-time designer. And as it turns out, this was excellent practice; I was routinely speaking to groups of people gathered around a table, just like when giving a design presentation. I had to speak, and I had to listen. I had to be persuasive, steer the conversation, keep people\u2019s attention, and occasionally, to relay news that the recipient wasn\u2019t keen to hear.</p>
<p>Just out of school, when I was working for my first full-time design job for a small branding agency, the time came for me to give my first presentation. Afterward, the creative director complimented my presentational skills, saying \u201CI\u2019ve never seen somebody just out of school present as well as you do.\u201D</p>
<p><em>Well,</em> I thought, <em>I\u2019ve been presenting things to tables of people since I was 16.</em></p>
<p>This is also a great way to expand your perspective, by the way. If you\u2019ve never worked in customer service, trust me; your imagination of it is nothing like the reality. (Oh, hey! That sounds like point #3. How convenient!)</p>
<p>Commercial design isn\u2019t exactly customer service, but it isn\u2019t too far removed. You\u2019ll still have people shopping for your goods, and you\u2019ll still need to communicate clearly with them and make sure they\u2019re happy at the end of the transaction. If the real thing isn\u2019t an option yet, there\u2019s no better place to practice your soft skills than in service.</p>
<h2 id="${"5-socialize"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#5-socialize"}"><span class="${"icon icon-link"}"></span></a>5. Socialize</h2>
<p>This might sounds like #3, but for this one, I\u2019m opening it up to <em>everyone</em>.</p>
<p>Even people who have lots in common with you can open your mind to new ways of thinking and show you things you didn\u2019t know before. Your colleagues can introduce you to new tools, skills, shortcuts and other important things you may not have known about.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Sooner or later, it\u2019s not about the book anymore; it\u2019s about the person doing the actual\xA0work.
`;
          }
        })}
<p>Soft skills are often underrated in design, and that\u2019s why I\u2019m throwing this seemingly redundant item in at the end of the list.</p>
<p>To be frank: your portfolio itself, no matter how good it is, can only get you so far. Sooner or later, it\u2019s not about the book anymore; it\u2019s about the person doing the actual work (you), and how it is to have that person in the room every single day, coming to standups, reporting on progress, dealing with deadlines, attending and possibly even running client meetings.</p>
<p>School may not do a lot to prepare you for that, so putting yourself in social situations can be a great way to boost your soft skills. In your career, you\u2019ll always be meeting new clients, interviewing with new people, and communicating. Take the opportunity to hone those skills regularly and it will pay off in the long run. I promise.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/goodbye-instagram-09f06d13.js
  var goodbye_instagram_09f06d13_exports = {};
  __export(goodbye_instagram_09f06d13_exports, {
    default: () => Goodbye_instagram,
    metadata: () => metadata14
  });
  var metadata14, Goodbye_instagram;
  var init_goodbye_instagram_09f06d13 = __esm({
    ".svelte-kit/output/server/chunks/goodbye-instagram-09f06d13.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      init_SideNote_5c625ecb();
      metadata14 = {
        "title": "This isn't the Time, But it's the Perfect Time; Goodbye, Instagram",
        "date": "2020-06-03",
        "updated": "2020-06-11",
        "categories": ["personal"],
        "coverImage": "instagram-over-1.png",
        "coverWidth": 1200,
        "coverHeight": 709,
        "excerpt": "\u2026Lately, I\u2019ve been wondering whether I can actually continue supporting Instagram and the company behind it, however passively or at whatever seemingly insignificant scale. And while I was zeroing in on this answer anyway, the events of the last couple of weeks have clearly cemented in my mind that the answer\u2014for me, at least\u2014is an unequivocal \u201Cno.\u201D"
      };
      Goodbye_instagram = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>If you know or follow me, you may already know that I deleted my Facebook account several years ago, in late 2014.</p>
<p>There were plenty of reasons for that decision, but to summarize: even back then, I couldn\u2019t reconcile my values with my continued participation in the platform. I felt that I could not be the person I wanted to be while continuing to look away from Facebook\u2019s increasing toxicity and destructiveness (even before 2016).</p>
<p>For whatever reason, I kept my Instagram account alive at the time, despite its connection to Facebook. And I\u2019m not really sure why.</p>
<p>I guess I thought Instagram was better; one of the things I hated about Facebook was its polarizing effect on people, and the indifference it showed toward ignorance and misinformation (not to mention its own role in spreading them). I think I rationalized that Instagram was more passive and friendly in comparison, less divisive. In fairness, maybe it was more so back then. Or, maybe I just didn\u2019t notice it.</p>
<p>I also tended to use Instagram a lot less. It was just a place where I occasionally posted a picture of my dog (or later, my son). I was always surprised at the end of each year that I actually <em>had</em> nine posts to make the signature 3 \xD7 3 \u201Ctop nine\u201D grid out of.</p>
<p>But lately, I\u2019ve been wondering whether I can actually continue supporting Instagram and the company behind it, however passively or at whatever seemingly insignificant scale. And while I was zeroing in on this answer anyway, the events of the last couple of weeks have clearly cemented in my mind that the answer\u2014for me, at least\u2014is an unequivocal \u201Cno.\u201D</p>
<h2 id="${"where-we-are"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#where-we-are"}"><span class="${"icon icon-link"}"></span></a>Where we are</h2>
<p>It\u2019s not hard to make an argument against Instagram. There are so many valid reasons one might choose to abandon the platform that I don\u2019t feel I need to do more than mention so-called \u201Cinfluencers,\u201D or to cite the numerous studies which have linked Instagram usage to anxiety, depression, loneliness, insomnia, body image issues and bullying (particularly for teenage girls).</p>
<p>Instead of speaking in such sweeping terms, I\u2019d like to focus in just a bit more.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `It\u2019s become clear that Facebook sees its ability to spread misinformation not as a bug, but as a\xA0feature.
`;
          }
        })}
<p>In this moment\u2014Blackout Tuesday, as it\u2019s being called by many (for better or worse, given its dubious origins and ill effects on the critical #BlackLivesMatter hashtag feed)\u2014it\u2019s become clearer than ever that Facebook does not now, nor will it ever take responsibility for its ongoing, deliberate, and destructive impact on the world in general, and the US in particular.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `One of the things that prompted me to leave Facebook was the revelation that it conducted a secret study which attempted (successfully!) to cause depression by artificially altering some users\u2019 feeds to show primarily negative posts, just to find out whether it could.
<br><br>
To my knowledge, there has never been any apology for A/B testing with the mental health of non-consenting people. Regardless, this looks tragically tame compared with the list of Facebook\u2019s more modern crimes.
`;
          }
        })}
<p>This is where I\u2019ll be conflating Facebook and Instagram a bit, but that\u2019s on purpose. It\u2019s clear that the two are intrinsically the same company as far as this topic goes. Marvel might be technically different than Disney, but the dollars go the same place.</p>
<hr>
<p>Before this year, Facebook\u2014specifically, Mark Zuckerberg himself\u2014pledged that the company would take a stand against unethical misuse of its platform, in light of the role Facebook played in Russia\u2019s campaign of misinformation during the 2016 election. It is only right, after all, that a platform vulnerable to such abuse takes any and all precautions to patch that vulnerability. I work at a software company; I regularly see exploits exponentially smaller than that still taken with grave sobriety.</p>
<p>But since then, and particularly with the events of the past week, Facebook\u2019s promise of accountability and oversight have been more than walked back as the company has instead doubled down on its role in spreading hate, racism, and lies.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Misinformation is not benign; it always benefits those with the power to spread it, at the cost of those without the voice to fight\xA0it.
`;
          }
        })}
<p>Among other things: Zuckerberg has gone on the record numerous times now to claim that fact-checking politicians is not in the platform\u2019s interest (effectively defending their right to spread misinformation at whatever cost and with any reason). On the surface, this may sound like a defense of first amendment rights, but misinformation is not benign; it always benefits those with the voice to spread it, at the cost of those without the voice to fight it.</p>
<p>It\u2019s critical to keep context in mind when discussing the \u201Cright\u201D to misinform at grand scale and with impunity. This type of distortion is almost always used for, and is most effective at, spreading hatred, in a way that neither further falsehoods nor the truth are entirely adequate to fight (as you know if you\u2019ve ever tried to correct a family member who shared something inaccurate or false).</p>
<p>Misinformation is not a two-way street, and it is not to be treated as mere opinion. To side with the right to spread falsehood unchecked is to side with racism, bigotry, anti-science, and any other cause benefited by a lack of context and truth.</p>
<p>Zuckerberg has also refused to acknowledge that the president threatening violent military action against US citizens\u2014let alone citizens who are exercising their constitutional right to protest\u2014is problematic, or to do almost anything about all but the most blatantly violent, racist, hateful or even outright fake posts from just about any source, let alone those in power.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Misinformation is not a two-way street, and it is not to be treated as mere opinion. To side with the right to spread falsehood unchecked is to side with racism, bigotry, anti-science, and any other cause benefited by a lack of context and\xA0truth.
`;
          }
        })}
<p>Time and again, Facebook\u2019s leadership has failed to demonstrate any substantial interest whatsoever in ensuring their platform is not used for malicious intent.</p>
<p>In short, Facebook has failed us\u2014as users, as citizens, and as humans\u2014to an extent that I feel demands I can no longer be even tangentially complicit in anything the company does.</p>
<p>It shouldn\u2019t have taken this long, for any and all of the reasons above. Facebook is, quite frankly, an awful company (and again: it was long before 2016, lest I give the impression this is just about recent events or the election).</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `In short, Facebook has failed us\u2014as users, as citizens, and as humans\u2014to an extent that I feel demands I can no longer be even tangentially complicit in anything the company\xA0does.
`;
          }
        })}
<p>But it\u2019s become clear in recent years that not only will Facebook move in the opposite direction of positive change, but that the company\u2019s role in supporting hate, malice and ignorance is not even a passive one; regardless of the intention or motivation, the outcome is the same. Facebook has positioned itself, actively and deliberately, to be a key player in enabling fascism.</p>
<p>(If that word feels a little strong to you\u2026well, give it time.)</p>
<h2 id="${"what-does-this-do"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-does-this-do"}"><span class="${"icon icon-link"}"></span></a>What does this do?</h2>
<p>Even given the above, I still honestly grapple with whether leaving is the right thing to do.</p>
<p>Me giving up Instagram isn\u2019t particularly courageous or noble or impactful. It\u2019s pretty much <em>nothing</em>. It was never that important to me to begin with, but regardless, my participation (or lack thereof) has effectively zero effect on either Facebook or the world.</p>
<p>Leaving is so seemingly meaningless it appears pointless. Despite the prevalence of ads (<em>SO MANY ADS</em>) on Instagram\u2014which must be presumably assigning <em>some</em> small monetary value to my attention\u2014I\u2019m an all-but-undetectable speck in the galaxy of its users. So why leave? Why <em>not</em> stay if it doesn\u2019t matter?</p>
<p>Because ethics, I believe, aren\u2019t about scale.</p>
<p>I barely knew my maternal grandmother, but I\u2019m told that she had a saying on ethics, which I\u2019m paraphrasing here as: \u201Cif you\u2019re unsure whether something is right or wrong, magnify it by 100 times.\u201D</p>
<p>She reasoned that, if stealing something seems harmless, what if you stole a hundred times? If you could justify a violent word or action, could you really justify 100?</p>
<p>And conversely: if giving what you have seems meaningless, what if you had 100 times that to give?</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `This isn\u2019t me filling the offering plate, or acting like I can; this is me giving my\xA0dollar.
`;
          }
        })}
<p>Me removing myself from Facebook\u2019s platforms won\u2019t mean anything on its own. But for me, it\u2019s not really <em>supposed</em> to.</p>
<p>This is me, reconciling my beliefs with my actions, and choosing not to look the other way any more, no matter how many other pairs of eyes might be pointed in that direction.</p>
<p>This isn\u2019t me filling the offering plate, or acting like I can; this is me giving my dollar.</p>
<p>I won\u2019t tell you whether Instagram\u2014or even Facebook, for that matter\u2014is good for you, or whether you should quit. I understand they\u2019re both tools for community, and that they both serve positive causes as well as negative. Maybe you feel you can, or do, offset the inherent negativity of the platform with the impact of your usage.</p>
<p>Obviously, there are millions of users of Instagram using the platform to support Black Lives Matter, Pride Month, and other very good and noble causes. I\u2019m fully in support of that, unequivocally. But for me, personally: if I\u2019m not using Instagram regularly to begin with, does me hopping on just to post a black square or a rainbow avatar actually help? If I\u2019m showing up for the big things and not participating in the little things, is my impact actually positive, or am I no better than the influencers artificially manufacturing Black Lives Matter photo ops without actually contributing anything substantial?</p>
<p>My feelings on the matter are further complicated by the fact that: if I\u2019m being honest, one major catalyst of these beliefs was, ironically, Facebook.</p>
<p>I have Facebook itself to thank for a good deal of the progress I myself made as a person in my 20s and early 30s, as friends and acquaintances on the platform (especially women) helped to gradually push me to become aware of my own bias and privilege (having been blinded to them by, among other things, the religious conservative values I had been brought up with to that point). Frankly, much as it pains me to admit it, Facebook itself is a large part of the reason I have the beliefs I do today.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `I don\u2019t believe Instagram puts enough good in my life\u2014or that I put enough good into the world because of it\u2014to justify my continued\xA0usage.
`;
          }
        })}
<p>That said, though, it could have just as easily gone the opposite way, and Facebook could have further galvanized my then-problematic views, a fact which had the odd effect of making it both easier and harder to leave.</p>
<p>Partly because of this, I\u2019ve also wrestled with the idea of abandonment. By leaving the platform, am I abdicating my responsibility to use it to speak out against those misusing it? Am I creating a void that will be filled by more misinformation and hatred? What if <em>everyone</em> who felt like I did left? Sure, it would hurt the company, but would it do more harm than good to create an open forum for racists and bigots to share content freely?</p>
<p>All of this is to say nothing of the fact that I have something of a luxury in being able to just walk away from Instagram with virtually no impact to myself in the first place. Plenty of people run businesses that rely at least partially on Instagram. What about the revenue and/or attention they rely on from the platform?</p>
<p>These are hard questions, and I admit I don\u2019t have good answers to them. So\u2026your mileage may vary, I suppose. What you feel is right for you may be different than what I feel, and as long as these questions and their impact are at least being honestly considered, I\u2019m all right with that.</p>
<p>But for me, right now, it\u2019s become clear that the ethics of the company behind Instagram are antithetical to what I believe is right on any scale. I don\u2019t believe Instagram puts enough good in my life\u2014or that I put enough good into the world because of it\u2014to justify my continued usage.</p>
<p>No matter how tiny a grain of sand I might be in that sandcastle, I can\u2019t in good conscience be a part of its walls any more.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `No matter how tiny a grain of sand I might be in that sandcastle, I can\u2019t in good conscience be a part of its walls any\xA0more.
`;
          }
        })}
<p>If you\u2019d like to keep in touch with me, I\u2019ll still be around on <a href="${"https://twitter.com/rickyjanuari"}" rel="${"nofollow"}">Twitter</a>, at least until I face the same reckoning there (though my content there is of a decidedly different flavor). And I\u2019ll be attempting to add some more personal content both there and here, on my personal site.</p>
<p>Meanwhile, I wish you all well, and hope\u2014regardless of the answer\u2014that you\u2019ll at least spend some time considering our role in supporting social media platforms, Facebook and Instagram in particular. Thank you for taking the time to read my thoughts on the topic.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/goodbye-wordpress-de96e921.js
  var goodbye_wordpress_de96e921_exports = {};
  __export(goodbye_wordpress_de96e921_exports, {
    default: () => Goodbye_wordpress,
    metadata: () => metadata15
  });
  var metadata15, Goodbye_wordpress;
  var init_goodbye_wordpress_de96e921 = __esm({
    ".svelte-kit/output/server/chunks/goodbye-wordpress-de96e921.js"() {
      init_index_2749e1b7();
      init_Callout_7f4de651();
      init_PullQuote_effacfdf();
      init_SideNote_5c625ecb();
      metadata15 = {
        "title": "Goodbye, WordPress",
        "date": "2021-02-01",
        "updated": "2021-02-02",
        "categories": ["wordpress", "javascript", "vue"],
        "coverImage": "gw.png",
        "coverWidth": 128,
        "coverHeight": 72,
        "excerpt": "WordPress was potentially the most impactful and empowering technology I've yet encountered. It transformed my career path and enabled me to do anything I wanted at every point in my journey. So why leave it now?"
      };
      Goodbye_wordpress = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `This post mentions Gridsome frequently, but <a href="${"https://rickyjanuari.com/blog/converting-from-gridsome-to-sveltekit"}">this site is actually built with SvelteKit now</a>. It looks and works mostly the same, but the underlying tech is a bit different.
`;
          }
        })}
<p>I was first introduced to WordPress pretty early in my design career. I was a fledgling professional designer working at a small branding agency when I got my first glimpse of everything WordPress could be via the impressive <a href="${"https://www.elegantthemes.com/gallery/divi/"}" rel="${"nofollow"}">Divi theme</a>.</p>
<p>Though I knew the basics of HTML and CSS at the time (which allowed me to implement some customizations beyond what the theme provided), Divi offered to make previously impossible things achievable. The freedom was intoxicating.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `WordPress empowered me to bring my ideas to life in a way no platform ever had\xA0before.
`;
          }
        })}
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `WordPress empowered me to bring my ideas to life in a way no platform ever had\xA0before.
`;
          }
        })}
<p>Things like loading and scroll effects, parallax, sliders, contact forms, project galleries, and all kinds of other features that were previously locked doors as a nascent coder suddenly became as easy as configuring some options in a graphical user interface (GUI).</p>
<p>I got a lot of mileage out of my site while it was on WordPress. At first, it was pure Divi, but soon, I expanded into a child theme with custom PHP templates. As time went on and I grew as a developer, I needed to reach for Divi\u2019s features less and less, until eventually I abandoned Divi and build my own WordPress theme from scratch. (It\u2019s no longer live of course, but there\u2019s a <a href="${"/blog/new-site-new-theme-for-2018"}">post about my theme here</a>.)</p>
<p>Finally, last year (2020), I converted to a headless site, with WordPress on the back end and Gridsome on the front. (I wrote about that process in <a href="${"/blog/a-new-headless-site-with-gridsome/"}">this post</a>.)</p>
<p>At the time, I made the decision to go headless because I wanted to keep a foot in the WordPress world, for reasons laid out in previously mentioned post. But to summarize: I wanted the best of both worlds. I didn\u2019t want to go full static, but giving up WordPress entirely wasn\u2019t really a thought for me then, either, because having a database and all my content (especially images) still represented value.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Fast-forward several months, and I&#39;ve come to the inevitable conclusion that, in the case of this, my personal website and (occasional) blog, WordPress does not represent value so much as tech debt.
`;
          }
        })}
<h2 id="${"why-move-why-now"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#why-move-why-now"}"><span class="${"icon icon-link"}"></span></a>Why move? Why now?</h2>
<p>My personal site has been on WordPress for somewhere around the last 6\u20137 years. Toward the beginning of that time, the cost of hosting and maintaining a WordPress site carried enough value that it was a no-brainer; the cost was trivial compared to what WordPress unlocked for me.</p>
<p>Later, as a Flywheel/WP Engine employee and a more seasoned professional developer, I didn\u2019t really <em>need</em> WordPress anymore, but I had the luxury of hosting as an employee perk. WordPress was always the right price because it was free.</p>
<p>But now that I\u2019ve moved on from that job, I\u2019m forced to consider what it actually costs to host WordPress\u2014not just monetarily (although that is a large factor), but in terms of maintenance, overhead, and everything else that goes along with the stack. Headless isn\u2019t simple, after all; it\u2019s a little like having two websites to worry about instead of just one, and while there are definitive advantages to that approach, everything is also a little more complicated in that world.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `The answer for me is: no; WordPress isn&#39;t worth it anymore in the case of my specific needs and\xA0wants.
`;
          }
        })}
<p>The real question at the end of that mental calculation is: does WordPress\u2019s value outweigh its cost? Is it worthwhile, just to have a headless back-end for a website that I don\u2019t update with any particular frequency?</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `The answer for me is: no; WordPress isn&#39;t worth it anymore in the case of my specific needs and wants.
`;
          }
        })}
<p>I thought about taking the WordPress side of the site to some cheap-o $5/month hosting. I tried out <a href="${"https://spinupwp.com/"}" rel="${"nofollow"}">SpinupWP</a>, and liked it a lot, but not enough to justify the cost of one single site. (I\u2019d definitely use it if I had multiple client sites to host, though.)</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Eventually, I came to the conclusion that I just want things simple, and headless WordPress is not simple.
`;
          }
        })}
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Eventually, I came to the conclusion that I just want things simple, and headless WordPress is not\xA0simple.
`;
          }
        })}
<p>Again: that doesn\u2019t mean WordPress is bad. It\u2019s not. (And while we\u2019re near the topic: neither is PHP. That joke can just die, please.) This just means that of the zillion things WordPress is and is capable of, either I\u2019m not doing them, or doing them WordPress\u2019s way isn\u2019t personally worth the tradeoff to me, and for my unique set of needs and goals.</p>
<h3 id="${"an-aside-on-wordpresss-trajectory-and-future"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#an-aside-on-wordpresss-trajectory-and-future"}"><span class="${"icon icon-link"}"></span></a>An aside on WordPress\u2019s trajectory and future</h3>
<p>There\u2019s an interesting story here about how WordPress, in many ways, made its name\u2014rightfully\u2014as the democratizer of the web. Anybody could get a website and set it up to do pretty much whatever they wanted with WordPress. And if you just wanted that to be a simple blog, hey, even better! You can host it for free on WordPress.com.</p>
<p>But as time goes on, I\u2019ve noticed that it seems like the <em>hosting</em> story of WordPress has evolved a lot\u2014first for the better, and now\u2026maybe not as much.</p>
<p>In the early days (let\u2019s say from WordPress\u2019s origins to around the early 2010s), it could be very difficult to self-host WordPress. Setting up the requisite server software was relegated to relatively few very technical people.</p>
<p>Then, managed WordPress hosting blew up, and companies like WP Engine and Flywheel (RIP) made entering the WordPress space <em>easier</em> than it had ever been before\u2014but also arguably more expensive.</p>
<p>Don\u2019t get me wrong; that\u2019s fair. Managed WordPress hosting exists\u2014and the companies selling it are succeeding despite its price tag\u2014because it\u2019s valuable. They take care of some very difficult things for you, and that\u2019s worth the price in a lot of cases.</p>
<p>But the price tag of WordPress hosting generally assumes that your site is <em>worth</em> that to you. WordPress hosting has become <em>costly</em> because it wants your key, important businesses to run on WordPress, and in that pursuit, I worry that WordPress has begun squeezing the side projects and personal blogs out of the market.</p>
<p>Even GoDaddy starts at $10 per month; most other managed hosts, that would be considered a step above that, aren\u2019t selling it for less than about $15\u201330 per month (even WordPress.com will charge you at least $25 per month if you want SFTP access), and that price tag is <em>not</em> cheap for a simple personal website or side project.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `There&#39;s an argument to be made that Jamstack companies like Netlify and Vercel are succeeding because they&#39;re filling a gap that WordPress just\xA0isn&#39;t. \u2026WordPress, for all its myriad benefits, is definitely <em>not</em> the choice if you just want a random side project to live on the web, forever, for minimal personal\xA0cost.
`;
          }
        })}
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `There&#39;s an argument to be made that Jamstack companies like Netlify and Vercel are succeeding because they&#39;re filling a gap that WordPress just\xA0isn&#39;t.
`;
          }
        })}
<p>Granted, the tech hurdle is higher\u2014not just anybody can code up a static site, and that\u2019s not to be discounted\u2014but I can have a live Jamstack site on the web for <em>absolutely free</em> any time I want with Netlify, et al. </p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `WordPress, for all its myriad benefits, is definitely <em>not</em> the choice if you just want a random side project to live on the web, forever, for minimal personal cost.
`;
          }
        })}
<p>As I write this, WP Engine and, no doubt, many other hosts are working on the headless WordPress story, and figuring out how to empower that tech stack and solve its problems in the same way they solved WordPress\u2019s. I have no doubt they\u2019ll come forward with something very compelling that will meet a great many customers\u2019 needs, but I also have no doubt it won\u2019t be cheap\u2014certainly not as cheap as what the Jamstack is currently offering. And I think that will make many more people ask the same question I asked, and come to the same conclusion; WordPress just won\u2019t continue to be worth it for everyone all the time.</p>
<h2 id="${"so-whats-the-alternative"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#so-whats-the-alternative"}"><span class="${"icon icon-link"}"></span></a>So what\u2019s the alternative?</h2>
<p>When this site was headless WordPress, the front-end was already built in <a href="${"https://gridsome.org/"}" rel="${"nofollow"}">Gridsome</a>, a Vue-based static site generator that could be fairly described as Vue\u2019s equivalent of <a href="${"https://www.gatsbyjs.com/"}" rel="${"nofollow"}">Gatsby</a>.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `A <b>static site generator</b> (or SSG) is a tool that takes input of some kind\u2014maybe Markdown files, maybe JSON from an API, or maybe even a combination of different data sources\u2014and turn it all into a traditional, static HTML website. This allows the site to be hosted cheaply and easily on a CDN-backed host for optimum performance.
`;
          }
        })}
<p>While it would\u2019ve certainly been possible to just abandon the headless formula and go back to good ol\u2019 solo WordPress, that wasn\u2019t really an option to me. I\u2019d lose too much work that had gone into this site already, and honestly, I wasn\u2019t interested in abandoning the modern dev experience that a JavaScript-based framework offers. I\u2019m not making any value statements here, but to me:</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Authoring front-end code in Markdown and Vue just feels nicer than working with the block editor and PHP templates.
`;
          }
        })}
<p>(No knock on PHP. I still enjoy it when I get the chance to dive back into those waters, like playing an old video game I have fond memories of. But it\u2019s not my first choice anymore.)</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Authoring front-end code in Markdown and Vue just feels nicer than working with the block editor and PHP\xA0templates.
`;
          }
        })}
<p>You might ask: <strong>so if you\u2019re cutting out WordPress, where does the content come from?</strong></p>
<p>Gridsome, along with many other static site generators, has the ability to generate content from Markdown files. Markdown is a very nice way to write, and while it certainly misses some of the conveniences of authoring posts in WordPress\u2019s block editor (AKA Gutenberg), it also comes with a lot of upside.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `If you&#39;re not familiar with Markdown: it&#39;s a simple way of authoring formatted text that&#39;s much closer to natural typing than HTML. There&#39;s a pretty neat <a rel="${"external"}" href="${"dillinger.io/"}">Markdown playground here</a> that covers the general syntax.
`;
          }
        })}
<p>The front end of this site was already using Markdown to create content with its projects; each project is a Markdown file with the project\u2019s details. Here\u2019s an example project Markdown file, just to get general the idea across on how Gridsome scrapes content from files and converts it into a content type:</p>
<pre class="${"language-markdown"}"><!-- HTML_TAG_START -->${`<code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml">title: My Awesome Project
featuredMedia: projects/image.png
category: design + illustration
summary: This project was awesome</span>
<span class="token punctuation">---</span></span>
 
The project content Markdown would go here. Neato!</code>`}<!-- HTML_TAG_END --></pre>
<p>Any Markdown files in the <code>/projects</code> directory are processed into content for the <a href="${"/projects"}">projects page</a>, using just a bit of config setup that directs Gridsome to the folder where it can find project files, and what Vue template(s) to render them with:</p>
<pre class="${"language-javascript"}"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token comment">//gridsome.config.js</span>
<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">'@gridsome/source-filesystem'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Where Gridsome looks for .md files to convert:</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'./src/projects/*.md'</span><span class="token punctuation">,</span>
      <span class="token comment">// What we'll call this content type:</span>
      <span class="token literal-property property">typeName</span><span class="token operator">:</span> <span class="token string">'project'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token literal-property property">templates</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">project</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token comment">// The dynamic path for each project</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/projects/:title'</span><span class="token punctuation">,</span>
      <span class="token comment">// What Vue component is used to render each project</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">'src/templates/single_project.vue'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p><em>The above config code tells Gridsome how to convert Markdown files to HTML content. Other SSGs, like <a rel="${"external"}" href="${"11ty.dev"}">Eleventy</a> or Gatsby, work similarly.</em></p>
<p>Finally, the template file for rendering the data collected from the Markdown files (the <code>single_project.vue</code> file seen above, simplified here just to communicate the general idea):</p>
<pre class="${"language-html"}"><!-- HTML_TAG_START -->${`<code class="language-html"><span class="token comment">&lt;!-- The Vue template --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>\u200Btemplate</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Layout</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>&#123;&#123; project.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123; project.category &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project.featuredMedia<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project.content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Layout</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p><em>(Not pictured: there\u2019s also a GraphQL query to grab the currently viewed project. I just didn\u2019t show that for the sake of simplicity.)</em></p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `This site has been updated since that version, and no longer features individual project pages or markdown files.
`;
          }
        })}
<hr>
<p>So moving all my WordPress posts to Markdown files and abandoning the database altogether didn\u2019t seem like that much of a leap; the pieces were all there already. (<em>I was only half-right in that assessment; more on that in a bit</em>.) And I liked the idea of working with a purely file- and code-based site a lot.</p>
<p>Having all your content hosted in the repository along with your files means that search-and-replace is easy, and can be done in your text editor, rather than via MySQL or WP-CLI. It also means anybody can contribute a pull request to correct mistakes or provide context. Plus, previewing posts as they\u2019re being written was always a problem with headless. I\u2019m sure you could do some tricky things to make it possible, but none of them were as easy as simply spinning up a local dev server and writing in a Markdown file, watching your post auto-refresh in the browser every time you save.</p>
<p>But most importantly for me: it means I no longer even need a database. MySQL need not be a part of the stack any longer, because everything I have on the site is in a <code>.md</code> file.</p>
<p>When I was initially converting this site to headless, I didn\u2019t go full static at the time for two reasons:</p>
<ol><li>I liked having WordPress\u2019s REST API to query for searches; and</li>
<li>Exporting WordPress posts as Markdown is somewhere between not easy and painstakingly tedious.</li></ol>
<p>#1 wasn\u2019t really enough value to keep WordPress around, even if there weren\u2019t other alternatives in the Jamstack world. But #2 proved to be the largest stumbling block, so to speak\u2026</p>
<h2 id="${"the-challenges-of-exporting-wordpress-content"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#the-challenges-of-exporting-wordpress-content"}"><span class="${"icon icon-link"}"></span></a>The challenges of exporting WordPress content</h2>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `This miraculous little CLI tool takes your WordPress export XML file, and not only converts each piece of content to Markdown\u2014complete with frontmatter!\u2014but can also scrape your site for all the images in the content and neatly download\xA0them.
`;
          }
        })}
<p>It turns out that, while WordPress offers a content export tool by default, it\u2019s highly limited in what it can do (i.e., it spits out XML). WordPress, naturally, isn\u2019t strongly incentivized to help you move your content to non-WordPress platforms, so their exporter is only designed to work with WordPress (if at all; it\u2019s not particularly reliable in my experience).</p>
<p>I tried a few tools, including a seemingly abandoned Gatsby plugin, and even considered converting my posts by hand before I came across <a href="${"https://github.com/lonekorean/wordpress-export-to-markdown"}" rel="${"nofollow"}">this GitHub repo</a> with a with a Node CLI tool called <code>wordpress-export-to-markdown</code>. (Thanks to the author for jumping in a Twitter thread where I was griping about how hard this whole thing is!)</p>
<p>This miraculous little CLI tool takes your WordPress export XML file, and not only converts each piece of content to Markdown\u2014complete with frontmatter!\u2014but can also scrape your site for all the images in the content and neatly download them.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Frontmatter is how metadata is handled in Markdown. You might have noticed it in the project file example above. Information such as publish date, post title, categories and tags is all typed out in a comment-like block (technically YAML) at the top of the file. Frontmatter isn&#39;t part of the main post content, but its data is accessible for display or filtering purposes.
`;
          }
        })}
<p>While I had a few small hiccups with it (mostly not really the tool\u2019s fault), the biggest was my custom blocks. The info on what a custom block should look like is <em>not</em> stored in the database; instead, there\u2019s just some text like this:</p>
<pre class="${"language-undefined"}"><!-- HTML_TAG_START -->${`<code class="language-undefined">&lt;!-- wp:block-lab/block_name_here --&gt;</code>`}<!-- HTML_TAG_END --></pre>
<p>WordPress apparently matches that line from the database to the PHP file that renders its contents at run time, rather than having the HTML for the block stored in the database as it would with typical blocks, like headings and text. (As you can infer, I\u2019m using the Block Lab plugin for my custom blocks here. I\u2019m not sure if this is a Block Lab-specific problem, or if this is the case for <em>any</em> custom block.)</p>
<p>So long story short: <code>wordpress-export-to-markdown</code> is a phenomenal tool that I\u2019d highly recommend to anybody looking to export WordPress content as Markdown. But WordPress doesn\u2019t provide enough info in its XML export to know how to render a custom block, so the comment (and block, and its contents) are simply omitted from the output.</p>
<p>That meant I had to go through each of my posts, and manually insert every single custom block that was missing, along with its contents.</p>
<p>Fortunately, I only have like 20 posts on this site (over the course of like seven years\u2014oof), so the process, while tedious, only took me an evening or two.</p>
<p>Also fortunately: I like my current solution to custom blocks better anyway.</p>
<h2 id="${"handling-images-without-wordpress"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#handling-images-without-wordpress"}"><span class="${"icon icon-link"}"></span></a>Handling images without WordPress</h2>
<p>One of the amazing things that WordPress does for you, for free and out of the box, is generate multiple image sizes and serve your content images with responsive source sets. This means users always load the appropriate image size for their device, which is a big benefit to both user experience and performance. If you\u2019re using Jetpack, you also get your images (optionally) loaded from WordPress.com\u2019s global CDN servers for faster load times.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Gridsome ships with a <code>g-image</code> component that handles loading appropriately sized images, <em>and</em> goes a step further with automatic lazy\xA0loading.
`;
          }
        })}
<p>Moving away from WordPress means those benefits are gone. Fortunately, Gridsome ships with a <code>&lt;g-image&gt;</code> component that handles loading appropriately sized images, <em>and</em> goes a step further with automatic lazy loading. And when you\u2019re deploying on Netlify, you have a CDN already, so that\u2019s all sorted.</p>
<p>There <em>is</em> the matter of getting the images you need without the ones you don\u2019t (since your <code>wp-content</code> folder will be full of extraneous resized images alongside the originals). Scraping all the original images from the WordPress site was fairly easy thanks to the <code>wordpress-export-to-markdown</code> tool mentioned above (although it <em>did</em> miss a few for some reason. No big deal, but something to watch out for). Beyond that, a bit of RegEx in a search-and-replace over the Markdown files, and I was in business.</p>
<p>A couple of other considerations around images, though:</p>
<ul><li><p><strong>All your images need to live in your repo with this approach.</strong> I don\u2019t have enough (and they aren\u2019t large enough) that it\u2019s a problem, but that might be an issue for some sites.</p></li>
<li><p><strong>Build times balloon with lots of images.</strong> Netlify is free to use up to a certain number of build minutes, and the only times I\u2019ve gotten close were when I was doing regular updates on this site. (Thankfully, there\u2019s a <a href="${"https://github.com/edm00se/netlify-plugin-gridsome-cache"}" rel="${"nofollow"}">Gridsome Cache Netlify plugin</a> to prevent unnecessary duplicate image processing.</p></li></ul>
<h2 id="${"building-with-vue-components-in-markdown"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#building-with-vue-components-in-markdown"}"><span class="${"icon icon-link"}"></span></a>Building with Vue components in Markdown</h2>
<p>Among Gridsome\u2019s library of plugins is a particularly delightful one called <a href="${"https://gridsome.org/plugins/@gridsome/vue-remark"}" rel="${"nofollow"}">Vue Remark</a>. </p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Vue Remark allows you to simply drop Vue components into Markdown files anywhere they&#39;re\xA0needed.
`;
          }
        })}
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Vue Remark allows you to simply drop Vue components into Markdown files anywhere they&#39;re\xA0needed.
`;
          }
        })}
<p>This means I can still have the functionality of all my custom blocks even while I\u2019m writing posts in Markdown!</p>
<p>Vue Remark allows you to simply drop Vue components into Markdown files anywhere they\u2019re needed.</p>
<p>Here\u2019s an example:</p>
<pre class="${"language-markdown"}"><!-- HTML_TAG_START -->${`<code class="language-markdown">
<span class="token title important"><span class="token punctuation">#</span> Some generic Markdown</span>
 
A paragraph <span class="token italic"><span class="token punctuation">_</span><span class="token content">also</span><span class="token punctuation">_</span></span> using <span class="token italic"><span class="token punctuation">_</span><span class="token content">Markdown</span><span class="token punctuation">_</span></span>.
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SomeVueComponent</span> <span class="token attr-name">props</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whatever<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  Use components where needed!
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SomeVueComponent</span><span class="token punctuation">></span></span>
 

<span class="token title important"><span class="token punctuation">##</span> Back to Markdown!</span>
 
<span class="token italic"><span class="token punctuation">_</span><span class="token content">Neat, huh?</span><span class="token punctuation">_</span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>All the custom blocks I had on WordPress have now been faithfully recreated in simple Vue single-file components, available to import and use at will in these posts.</p>
<p>The authoring experience is incredibly nice, too; since Gridsome runs on a local Node dev server with auto-refresh, I can simply start the server, navigate to the post, and go to work. Every time I hit <code>\u2318 + s</code> I see my updates in the browser, fully styled, in a matter of milliseconds.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Nuxt has a similar feature available via installable module, but even goes so far as to allow you to edit the Markdown file by editing the text in the browser, which is a type of dark witchcraft I&#39;m not even sure I can handle.
`;
          }
        })}
<h2 id="${"other-considerations"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#other-considerations"}"><span class="${"icon icon-link"}"></span></a>Other considerations</h2>
<p>Remember that authoring content via Markdown means that handling drafts is something you need to do on your own; there isn\u2019t a \u201Cpublish\u201D button anymore. (Though you won\u2019t lose revisions as long as you keep a tidy git history.)</p>
<p>There are a few ways to go about drafts. The simplest is probably to add a <code>published</code> or <code>status</code> key to the frontmatter of each post, and add a conditional to your code to filter out unpublished content.</p>
<p>Personally, I created a <code>drafts</code> folder inside my <code>posts</code> folder, and then added it to the project\u2019s <code>.gitignore</code> file to ensure that any time I push to the main branch, the drafts stay behind. That way, nobody can snoop on my drafts in GitHub before they\u2019re actually published, either. (Not that anybody cares that much, or that it would really matter even if they did, but at least if I delete a post before I publish it, it\u2019s not anywhere in my GitHub history.)</p>
<p>Also note that generating taxonomy pages (categories, tags, etc.) will likely be an extra manual challenge with any static site generator. In the case of Gridsome, you can modify the <code>gridsome.server.js</code> file to add new collections. Here\u2019s how I achieved mine:</p>
<pre class="${"language-javascript"}"><!-- HTML_TAG_START -->${`<code class="language-javascript">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">api</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  api<span class="token punctuation">.</span><span class="token function">loadSource</span><span class="token punctuation">(</span><span class="token parameter">actions</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
 
    <span class="token comment">//Create a new "categories" collection</span>
    <span class="token keyword">const</span> categories <span class="token operator">=</span> actions<span class="token punctuation">.</span><span class="token function">addCollection</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">typeName</span><span class="token operator">:</span> <span class="token string">'category'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
 
    <span class="token comment">//Get all the posts (which already exist from the vue-remark plugin)</span>
    <span class="token keyword">const</span> allPosts <span class="token operator">=</span> actions<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_collection<span class="token punctuation">.</span>data
 
    <span class="token comment">//Loop over the posts and add their categories to an array</span>
    <span class="token keyword">let</span> allPostsCategories <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    allPosts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">post</span> <span class="token operator">=></span> allPostsCategories<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>post<span class="token punctuation">.</span>categories<span class="token punctuation">)</span><span class="token punctuation">)</span>
 
    <span class="token comment">//Filter out duplicates</span>
    <span class="token keyword">const</span> uniqueCategories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>allPostsCategories<span class="token punctuation">)</span>
 
    <span class="token comment">//Finally, add each category as a data node, with an array of the matching posts</span>
    uniqueCategories<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">category</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      categories<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> category<span class="token punctuation">,</span>
        <span class="token literal-property property">posts</span><span class="token operator">:</span> allPosts<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">post</span> <span class="token operator">=></span> post<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `There are more efficient ways to achieve the above; my first try used <code>flatMap</code>. But turns out: Node doesn&#39;t have the <code>flatMap</code> array method, so it wouldn&#39;t compile on Netlify&#39;s servers. So this was my slightly longer workaround.
`;
          }
        })}
<h2 id="${"final-thoughts"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#final-thoughts"}"><span class="${"icon icon-link"}"></span></a>Final thoughts</h2>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `I still love WordPress. But I found myself wanting a site I could tinker with in my editor, all together in one place. No database; no SQL dumps; no live server at all. Just content files compiled to beautifully uncomplicated HTML.
`;
          }
        })}
<p>This approach certainly isn\u2019t right for everyone. It works great for me because I\u2019m the only one working on this site. But if I had co-authors, or users, or collaborators, the whole calculation might be drastically different.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `I still love WordPress. But I found myself wanting a site I could tinker with in my editor, all together in one place. No database; no SQL dumps; no live server at all. Just content files compiled to beautifully uncomplicated\xA0HTML.
`;
          }
        })}
<p>And of course, what <em>I</em> find to be simple may be very different from what <em>you</em> find to be simple. I love living in my code editor. You might find a visual interface easier to use. Both are just fine. It\u2019s just a matter of personal preference.</p>
<p>WordPress just didn\u2019t quite fit my wants and needs for this project. It might still be a great fit for you and yours. And I\u2019m sure it will be again for me for a future project.</p>
<p>But right now, I like things being back together, all in one place.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/how-to-connect-local-with-codekit-cf46e021.js
  var how_to_connect_local_with_codekit_cf46e021_exports = {};
  __export(how_to_connect_local_with_codekit_cf46e021_exports, {
    default: () => How_to_connect_local_with_codekit,
    metadata: () => metadata16
  });
  var metadata16, How_to_connect_local_with_codekit;
  var init_how_to_connect_local_with_codekit_cf46e021 = __esm({
    ".svelte-kit/output/server/chunks/how-to-connect-local-with-codekit-cf46e021.js"() {
      init_index_2749e1b7();
      init_SideNote_5c625ecb();
      metadata16 = {
        "title": "How to Connect Local with CodeKit",
        "date": "2020-02-21",
        "updated": "2020-07-15",
        "categories": ["css", "javascript", "web", "wordpress"],
        "coverImage": "Untitled.png",
        "coverWidth": 1280,
        "coverHeight": 567,
        "excerpt": "Enjoy all the convenience of easy local WordPress development with Local, plus build tools with CodeKit, without any of the tricky command line setup."
      };
      How_to_connect_local_with_codekit = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p><a href="${"https://localwp.com/"}" rel="${"nofollow"}">Local</a> (formerly known as Local by Flywheel) is the go-to tool for developing WordPress websites\u2014where else?\u2014locally. It\u2019s fast (especially the new \u201D<a href="${"https://localwp.com/community/t/local-5-2-3/16870"}" rel="${"nofollow"}">lightning</a>\u201D release), incredibly easy to use, cross-platform, and completely free.</p>
<p>Full disclosure: I currently work for <a href="${"https://getflywheel.com/"}" rel="${"nofollow"}">Flywheel</a>, the software company behind Local. But I\u2019m being 100% honest when I say there\u2019s no other tool I\u2019d consider using for building WordPress sites, period. Flywheel could fire me today and I\u2019d still use Local tomorrow.</p>
<p>As amazing as Local is on its own, though, some of the biggest benefits of developing locally (automatic browser refreshing, for example) aren\u2019t built in. That\u2019s where <a href="${"https://codekitapp.com/"}" rel="${"nofollow"}">CodeKit</a> shines!</p>
<p><img src="${"/images/post_images/codekit-window.png"}" alt="${"CodeKit (on a Vue project, and in dark mode)"}"></p>
<h2 id="${"what-is-codekit"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-is-codekit"}"><span class="${"icon icon-link"}"></span></a>What is CodeKit?</h2>
<p><strong>CodeKit</strong> is a Mac app that gives you an easy graphical interface to configure the kind of handy dev features that usually require a lot of technical setup. CodeKit makes it super easy to do all the nice things that you\u2019d normally need to use terminal commands, package managers and config files to get otherwise.</p>
<p>Unlike Local, CodeKit is a paid app, but it comes with a free trial if you\u2019d like to check it out. In my opinion and experience, it\u2019s <em>well</em> worth the $~35 price tag if you prefer a nice visual app interface to the command line.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `If you\u2019re on Windows, you don\u2019t have access to CodeKit (since it\u2019s Mac only). But while I haven\u2019t tried it myself, Prepros appears to be a equivalent app.
`;
          }
        })}
<p><strong>Some examples of what CodeKit provides:</strong></p>
<ul><li><strong>Automatic browser refreshing</strong>; the window changes each time you save your files as you\u2019re working</li>
<li><strong>Automatic compilation, minification, source maps and cache busting.</strong> Save your sass files, and see your compiled CSS in the browser instantly. (Also works with JavaScript, and plus, CodeKit auto-generates source maps and does cache-busting)</li>
<li><strong>Test your code on other devices.</strong> CodeKit lets you load your local site on your phone, tablet, or wherever, and even make changes one place and see it reflected on every other screen</li>
<li><strong>Image optimization</strong></li>
<li><strong>Build tools</strong> like Autoprefixer, Babel, Libsass, ESlint, and a lot more all built in and easily configurable</li></ul>
<p>If you\u2019re not sure about all of those features or only need a few, that\u2019s ok too! CodeKit makes it easy to use what you need, and ignore what you don\u2019t.</p>
<h2 id="${"local--codekit"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#local--codekit"}"><span class="${"icon icon-link"}"></span></a>Local + CodeKit</h2>
<p>It\u2019s probably pretty easy to imagine the benefits of getting all that cool stuff within Local, available for your WordPress development needs. <strong>So let\u2019s get it set up!</strong></p>
<h3 id="${"1-create-or-pick-a-site-in-local"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#1-create-or-pick-a-site-in-local"}"><span class="${"icon icon-link"}"></span></a>1. Create (or Pick) a Site in Local</h3>
<p>First step: if you haven\u2019t already, start by creating a site in Local. (If you\u2019ve already got one you want to use, that\u2019s fine too; just skip ahead.) The specific configuration options in Local don\u2019t matter; any Local site will do!</p>
<p><img src="${"/images/post_images/local-new-site-setup.png"}" alt="${"Creating a new site in Local"}"></p>
<p>Create a new site in Local if you don\u2019t have one, or just use one you already have.</p>
<p>(By the way: you\u2019ve probably noticed from my screenshot that I like dark mode. That can be enabled in each app\u2019s Preferences menu.)</p>
<p>You <em>might</em> see a warning about a port conflict in Local. If you do, just go ahead and click the button to fix the issue. You won\u2019t be able to use a custom domain this way, but the CodeKit connection will still work. The site URL in the browser just won\u2019t look as nice.</p>
<p><img src="${"/images/post_images/port-conflict.png"}" alt="${"Port conflict warning"}"></p>
<p>If you see a port conflict, just click the button to proceed. No big deal.</p>
<h3 id="${"2-start-your-local-site-and-note-its-site-host-setting"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#2-start-your-local-site-and-note-its-site-host-setting"}"><span class="${"icon icon-link"}"></span></a>2. Start Your Local Site and Note its Site Host Setting</h3>
<p>Again, the specific setup of the site doesn\u2019t really matter. The only things to be sure of are:</p>
<ol><li>The site is running; and</li>
<li>You note the Site Host (in the case of my screenshot, <code>localhost:10008</code>, but yours might be a custom <code>.local</code> domain instead)</li></ol>
<p><img src="${"/images/post_images/Image-2020-02-20-at-8.47.39-PM-1024x691.png"}" alt="${"Look for 'Site host' in the Overview tab in Local"}"></p>
<h3 id="${"3-add-your-project-to-codekit"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#3-add-your-project-to-codekit"}"><span class="${"icon icon-link"}"></span></a>3. Add Your Project to CodeKit</h3>
<p>Head over to CodeKit now, and go to <strong>File &gt; Add Project</strong>. Navigate to your Local site\u2019s \u201Cpublic\u201D directory, and choose it.</p>
<p>By default, Local places your sites inside of a \u201CLocal Sites\u201D folder. So the path to your site\u2019s \u201Cpublic\u201D directory will most likely be something like this:</p>
<p><code>~/Local Sites/your-sites-name/app/public</code></p>
<p>The <code>public</code> folder is your Local WordPress site\u2019s root directory. You\u2019ll want to watch that directory so that any time something changes anywhere in the WordPress site, CodeKit will be aware of it and can react by compiling files, refreshing the browser, etc.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `If you weren\u2019t actually interested in using CodeKit for its live previews and auto-refreshing, and all you wanted was the code features, you could just add whatever directory you\u2019re working in (the theme, for example) instead of adding the whole site.
`;
          }
        })}
<p>Once you\u2019ve added your project, you\u2019ll see CodeKit look something like this:</p>
<p><img src="${"/images/post_images/codekit-public-folder.png"}" alt="${"A Local CodeKit project"}"></p>
<h3 id="${"4-configure-the-codekit-projects-settings"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#4-configure-the-codekit-projects-settings"}"><span class="${"icon icon-link"}"></span></a>4. Configure the CodeKit Project\u2019s Settings</h3>
<p>Now that your project (site) has been added in CodeKit, head into Project Settings, either from <strong>View &gt; Project Settings</strong> or from the gear icon on the left sidebar.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `You can rename the project from here if you want\u2014which you might want to do to make things easier if you\u2019re working on multiple Local WordPress projects at once.
`;
          }
        })}
<p>In Project Settings, head to <strong>Browser-Refreshing</strong> and scroll down to the External Server Options section.</p>
<p><img src="${"/images/post_images/Image-2020-02-20-at-9.10.43-PM-1024x699.png"}" alt="${"CodeKit's Project Settings > Browser-Refreshing area"}"></p>
<p>Here, you\u2019ll take the two steps necessary to connect CodeKit with Local:</p>
<ol><li>Toggle on the <strong>Use An External Server</strong> button;</li>
<li>Copy your Local site\u2019s <strong>Site Host</strong> setting, and paste it into the <strong>External Server Address</strong> box in Codekit</li></ol>
<p><img src="${"/images/post_images/image-1024x557.png"}" alt="${"Toggle External Server on, and enter your Local site's Site Host URL as the address"}"></p>
<h3 id="${"5-click-the-codekit-preview-link"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#5-click-the-codekit-preview-link"}"><span class="${"icon icon-link"}"></span></a>5. Click the CodeKit Preview Link</h3>
<p><strong>That\u2019s it! You\u2019re connected!</strong> Now all you need to do is preview in CodeKit to see changes live in real time. You can either go to <strong>File &gt; Preview</strong> <strong>in Browser\u2026</strong>, or hit the preview button at the top of the CodeKit window:</p>
<p><img src="${"/images/post_images/image-1-1024x155.png"}" alt="${"The Browser Preview button"}"></p>
<p>(Note that the URL you see in your browser window may not match what you just entered from Local. That\u2019s ok, as long as the page works.)</p>
<p>Now as you make changes in your code\u2014for example, changing CSS files or editing the HTML on a page\u2014your browser will just automatically refresh like magic! \u2728</p>
<p><img src="${"/images/post_images/codekit-magic.gif"}" alt="${"Now as you save your code changes, the page will automatically update and refresh!"}"></p>
<p><strong>If you\u2019re having issues</strong>: be sure that the site is running in Local, and that the protocol matches between the two (http or https; it should be the same both places. You might need to check or un-check the TLS box under Security Options and/or restart the server):</p>
<p><img src="${"/images/post_images/codekit-preview-window.png"}" alt="${"Make sure the TLS setting in CodeKit matches your Local site's protocol"}"></p>
<p>The Preview Server URLs box (shown above) is also where you\u2019ll find the URLs you can use to view your Local site on other devices! Want to check out your site on your phone? It\u2019s as simple as heading to the Bonjour URL (iPhone) or Non-Bonjour URL (anything else) in your device\u2019s browser!</p>
<h2 id="${"bonus-setting-up-sass-in-codekit"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#bonus-setting-up-sass-in-codekit"}"><span class="${"icon icon-link"}"></span></a>Bonus: Setting Up Sass in CodeKit</h2>
<p>Just to provide an example of how easy CodeKit makes it to get set up with things like Sass, let\u2019s explore CodeKit a little now that we have everything set up.</p>
<p>If you have a Sass file that you\u2019d like to compile into CSS on the fly, find that file in Codekit and click to select it. You\u2019ll immediately see a suite of options in the right sidebar:</p>
<p><img src="${"/images/post_images/image-2-1024x865.png"}" alt="${"Select a file to see the compilation options"}"></p>
<p>Making CodeKit compile your Sass is as simple as choosing the options you want, and the path where you want CodeKit to output the compiled CSS file!</p>
<p>As a bonus, if you have any errors in your Sass syntax (like here, where I forgot a semicolon at the end of a line), CodeKit will highlight those and let you know right away as soon as you save the file:</p>
<p><img src="${"/images/post_images/image-3-1024x449.png"}" alt="${"Errors shown in CodeKit"}"></p>
<p>A similar set of options (minify, compile, generate source maps, etc.) is available with JavaScript files, plus many other file types.</p>
<h2 id="${"final-step-enjoy"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#final-step-enjoy"}"><span class="${"icon icon-link"}"></span></a>Final Step: Enjoy!</h2>
<p><strong>That\u2019s it!</strong> Enjoy all the convenience of easy local WordPress development with Local, plus build tools with CodeKit, without any of the tricky command line setup. \u{1F389}</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/introducing-svelte-comparing-with-react-vue-f7387ef5.js
  var introducing_svelte_comparing_with_react_vue_f7387ef5_exports = {};
  __export(introducing_svelte_comparing_with_react_vue_f7387ef5_exports, {
    default: () => Introducing_svelte_comparing_with_react_vue,
    metadata: () => metadata17
  });
  var CounterButton, ToggleButton, css$14, VolumeControl, css37, CodeComparison, metadata17, Introducing_svelte_comparing_with_react_vue;
  var init_introducing_svelte_comparing_with_react_vue_f7387ef5 = __esm({
    ".svelte-kit/output/server/chunks/introducing-svelte-comparing-with-react-vue-f7387ef5.js"() {
      init_index_2749e1b7();
      init_Callout_7f4de651();
      init_PullQuote_effacfdf();
      init_SideNote_5c625ecb();
      CounterButton = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let count = 0;
        return `<div class="${"example-component-wrapper"}"><button>Number of clicks: ${escape(count)}</button></div>`;
      });
      ToggleButton = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let buttonText;
        buttonText = "Show more";
        return `<div class="${"example-component-wrapper"}"><p>Svelte is a JavaScript framework.
    
    ${``}</p>

  <button>${escape(buttonText)}</button></div>`;
      });
      css$14 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}input.svelte-12ioyum{padding:0;width:100%;max-width:12rem;display:block;margin:0}label.svelte-12ioyum{font-family:var(--headingFont);font-weight:bold}',
        map: null
      };
      VolumeControl = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let volume = 0;
        $$result.css.add(css$14);
        return `<div class="${"example-component-wrapper"}"><label for="${"volume"}" class="${"svelte-12ioyum"}">Volume: ${escape(volume)}%
  </label>
  
  <input id="${"volume"}" type="${"range"}" min="${"0"}" max="${"100"}" class="${"svelte-12ioyum"}"${add_attribute("value", volume, 0)}>
</div>`;
      });
      css37 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.svelte-code-comparison.svelte-1eou47t.svelte-1eou47t.svelte-1eou47t{margin:var(--halfNote) 0}.svelte-code-comparison__button-bar.svelte-1eou47t.svelte-1eou47t.svelte-1eou47t{display:flex;justify-content:flex-start}.svelte-code-comparison.svelte-1eou47t button.svelte-1eou47t.svelte-1eou47t{padding-left:2vw;padding-right:2vw;border-color:var(--ink);border-bottom:0 !important;border-width:1px}.dark .svelte-code-comparison.svelte-1eou47t button.svelte-1eou47t.svelte-1eou47t{border-color:var(--paper)}@media(min-width: 1440px){.svelte-code-comparison.svelte-1eou47t button.svelte-1eou47t.svelte-1eou47t{padding-left:1em;padding-right:1em}}.svelte-code-comparison.svelte-1eou47t button.svelte-1eou47t+button.svelte-1eou47t{border-left:0}.svelte-code-comparison.svelte-1eou47t .current.svelte-1eou47t.svelte-1eou47t{background:#1d1e26;border:1px solid var(--black);color:#9580ff;font-weight:bold}.svelte-code-comparison.svelte-1eou47t pre[class*="language-"]{margin-top:0 !important;padding-top:1rem}.svelte-code-comparison.svelte-1eou47t pre[class*="language-"]:before{display:none}',
        map: null
      };
      CodeComparison = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { includeBothVues = false } = $$props;
        let { dir } = $$props;
        let currentFramework;
        let frameworks = [];
        if ($$props.includeBothVues === void 0 && $$bindings.includeBothVues && includeBothVues !== void 0)
          $$bindings.includeBothVues(includeBothVues);
        if ($$props.dir === void 0 && $$bindings.dir && dir !== void 0)
          $$bindings.dir(dir);
        $$result.css.add(css37);
        return `<div class="${"svelte-code-comparison svelte-1eou47t"}"><div class="${"svelte-code-comparison__button-bar svelte-1eou47t"}" role="${"tablist"}" aria-label="${"Framework"}">${each(frameworks, (framework) => {
          return `<button role="${"tab"}"${add_attribute("aria-controls", framework.slug, 0)}${add_attribute("aria-selected", currentFramework == framework.component, 0)} class="${["svelte-1eou47t", currentFramework == framework.component ? "current" : ""].join(" ").trim()}">${escape(framework.title)}
      </button>`;
        })}</div>

  ${each(frameworks, (framework) => {
          return `<div${add_attribute("id", framework.slug, 0)}${add_attribute("tabindex", currentFramework == framework.component ? 0 : -1, 0)} ${currentFramework != framework.component ? "hidden" : ""}>${validate_component(framework.component || missing_component, "svelte:component").$$render($$result, {}, {}, {})}
    </div>`;
        })}

  <noscript>${each(frameworks, (framework) => {
          return `${validate_component(framework.component || missing_component, "svelte:component").$$render($$result, {}, {}, {})}`;
        })}</noscript>
</div>`;
      });
      metadata17 = {
        "title": "Introducing Svelte, and Comparing Svelte with React and Vue",
        "date": "2021-10-1",
        "updated": "2022-01-18",
        "categories": ["javascript", "svelte", "web"],
        "coverImage": "introducing_svelte.png",
        "coverWidth": 16,
        "coverHeight": 9,
        "excerpt": "Svelte is a new style of framework for building sites and apps. Let's dive into what makes it different, why it's so enjoyable, and how it's able to ship such tiny, fast apps."
      };
      Introducing_svelte_comparing_with_react_vue = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>Let\u2019s be honest: lots of things in web development are harder than they should be. Some days, it can seem as though everything in the frontend world is needlessly over-engineered and convoluted.</p>
<p>That\u2019s what makes <a href="${"https://svelte.dev/"}" rel="${"nofollow"}">Svelte</a> seem like such a breath of fresh air.</p>
<h2 id="${"what-is-svelte"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-is-svelte"}"><span class="${"icon icon-link"}"></span></a>What is Svelte?</h2>
<p>At a basic level, you could think of Svelte as a frontend user interface (UI) framework akin to <a href="${"https://reactjs.org"}" rel="${"nofollow"}">React</a>, <a href="${"https://vuejs.org"}" rel="${"nofollow"}">Vue</a>, etc. Svelte is the newest of the big names in the space, however, and it definitely seems as though it\u2019s learned from the others, in terms of both developer experience and optimization.</p>
<p>As with any frontend framework, you use Svelte to build components, which are then the building blocks for your user interface (UI). As events happen and state and data change (for example: a user adding an item to the cart), the components automatically update to reflect those changes in the UI. (More on that in a bit.)</p>
<p>So how is Svelte <em>different</em>? Glad you asked\u2026</p>
<h3 id="${"how-is-svelte-different"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#how-is-svelte-different"}"><span class="${"icon icon-link"}"></span></a>How is Svelte different?</h3>
<p>Svelte was created by <a href="${"https://twitter.com/rich_harris"}" rel="${"nofollow"}">Rich Harris</a>, a developer and graphics editor for the <a href="${"https://www.nytimes.com/"}" rel="${"nofollow"}">New York Times</a>. (<strong>Edit:</strong> Harris has since been <a href="${"https://vercel.com/blog/vercel-welcomes-rich-harris-creator-of-svelte"}" rel="${"nofollow"}">hired by Vercel</a> to work on Svelte full-time!)</p>
<p>The news world moves fast, so the interactive UIs and visualizations Harris was creating for the <em>Times</em> needed to be built as quickly as possible. But since it\u2019s critical for the news to be accessible to <em>everyone</em>, those bits of interactivity <em>also</em> had to be as small and performant as possible.</p>
<p>Harris needed a solution that was extremely quick and easy to build with, yet that would be fast and smooth for any reader on any device or network, no matter how limited. In many cases, the bloated JavaScript bundles that are the byproducts of many other frameworks disqualified them from consideration. So Harris set out to build his own solution, and that\u2019s how Svelte was born.</p>
<p>While relatively new and small compared to the other frameworks on the list, Svelte is uniquely battle-tested: the <a href="${"https://www.nytimes.com/interactive/2021/us/covid-cases.html"}" rel="${"nofollow"}">New York Times Covid map</a> is a Svelte app. (Harris\u2019s former employer is far from the only large company utilizing the tech, however; IBM, Square, Philips, 1Password, and Spotify number among its growing list of adopters.)</p>
<hr>
<p>The attention to developer experience (DX) is obvious in Svelte. I instantly loved how easy it made <em>everything</em> I wanted to do\u2014especially compared to React, as I cheekily tweeted at the time:</p>
<blockquote class="${"twitter-tweet"}"><p lang="${"en"}" dir="${"ltr"}">My elevator pitch for <a href="${"https://twitter.com/sveltejs"}">@sveltejs</a> :<br><br>Svelte is React without all the bullshit.</p>\u2014 Ricky Januari (@rickyjanuari) <a href="${"https://twitter.com/rickyjanuari/status/1155265498675929088"}">July 27, 2019</a></blockquote>
<p>From the start, I was consistently and pleasantly surprised how <em>little</em> code I needed to do things in Svelte\u2014and how close it was to the JavaScript, HTML and CSS I already knew.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Just about everywhere I&#39;d normally be reaching for a workaround or tripping over a gotcha when using another framework, Svelte was delightfully straightforward.
`;
          }
        })}
<p>In fact, I found myself having to <em>unlearn</em> many of the more convoluted solutions common in other frameworks (a common refrain from Svelte adopters).</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Just about everywhere I&#39;d normally be reaching for a workaround or tripping over a gotcha when using another framework, Svelte was delightfully straightforward.
`;
          }
        })}
<p>But instead of me talking about it, let\u2019s get to some comparisons. (Since this isn\u2019t intended to be a code-along, we\u2019ll cover actually <em>installing</em> Svelte at the end.)</p>
<img src="${"/images/post_images/svelte-react-vue.png"}" alt="${""}" class="${"section-heading-image"}">
<h2 id="${"comparing-svelte-to-react-and-vue"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#comparing-svelte-to-react-and-vue"}"><span class="${"icon icon-link"}"></span></a>Comparing Svelte to React and Vue</h2>
<p>As mentioned, at a basic level, Svelte is similar to other frontend frameworks. So let\u2019s look a little closer at the details of how Svelte differs: its focus on build-time over run-time, and the simplicity of its syntax.</p>
<h3 id="${"build-over-browser"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#build-over-browser"}"><span class="${"icon icon-link"}"></span></a>Build over browser</h3>
<p>I already mentioned how performant Svelte apps are. That\u2019s possible because Svelte takes a different approach from other frontend frameworks by doing as much as it can at the <em>build</em> step\u2014when the code is initially compiled\u2014rather than running client-side.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `If you want to get technical, Svelte isn&#39;t really a JavaScript framework at all, as much as it\xA0is\xA0a\xA0compiler.
`;
          }
        })}
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `If you want to get technical, Svelte isn&#39;t really a JavaScript framework at all, as much as it\xA0is\xA0a\xA0compiler.
`;
          }
        })}
<p>To elaborate: React, Vue, and most other frameworks run <em>in</em> the browser. You load them first, and then <em>use</em> them by calling their methods to execute whatever code you write (not unlike jQuery and countless similar libraries). You can load React, Vue, etc. in a script tag, in a <a href="${"https://codepen.io"}" rel="${"nofollow"}">CodePen</a>, or otherwise drop them into whatever environment you want. Granted, there\u2019s probably a build tool involved to reduce the bundle size when you work with these frameworks in a production environment. But to some extent at least, you\u2019re inevitably shipping the framework itself to the browser, and loading it there.</p>
<p><strong>Svelte doesn\u2019t work like that</strong>; you can\u2019t \u201Cload Svelte\u201D in the browser, or play with it on CodePen (though the <a href="${"https://svelte.dev/repl/hello-world"}" rel="${"nofollow"}">Svelte REPL</a> works well instead). Svelte isn\u2019t a script.</p>
<p>Instead, to create a Svelte app, you <a href="${"https://svelte.dev/blog/the-easiest-way-to-get-started"}" rel="${"nofollow"}">install the Svelte repo</a> on your machine, and write Svelte code\u2014which, technically speaking, is a small superset of HTML. The compiler does the rest:</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `All your Svelte code is compiled down to minimal, self-contained JavaScript before it ever gets to the browser.
`;
          }
        })}
<p>It\u2019s not unlike how <a href="${"https://sass-lang.com/"}" rel="${"nofollow"}">Sass</a> is compiled to plain CSS. That\u2019s why Svelte has been referred to as \u201Ca framework without the framework.\u201D (The <a href="${"https://svelte.dev/repl/hello-world"}" rel="${"nofollow"}">REPL</a> offers a direct peek into the compiled JavaScript, if you\u2019re interested.)</p>
<p>This approach allows for extremely small bundle sizes, which in turn translates to better loading speed and performance. A smaller bundle can be shipped to the browser faster <em>and</em> parsed by the browser more quickly.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `All your Svelte code is compiled down to minimal, self-contained JavaScript before it ever gets to the\xA0browser.
`;
          }
        })}
<p>React and Vue both use a \u201D<a href="${"https://stackoverflow.com/questions/21965738/what-is-virtual-dom"}" rel="${"nofollow"}">virtual DOM</a>,\u201D for rendering, which\u2014while faster than crawling the DOM itself to make changes\u2014still has its own performance implications. Thanks to the Svelte compiler, however, we don\u2019t have to worry about that; components are tied directly to their DOM nodes. You can read more about that in Rich Harris\u2019s <a href="${"https://svelte.dev/blog/virtual-dom-is-pure-overhead"}" rel="${"nofollow"}">Virtual DOM is pure overhead</a>.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `There&#39;s a little more nuance than this when discussing Svelte&#39;s performance relative to the field, but we&#39;ll get into that in the last section.
`;
          }
        })}
<h3 id="${"authoring-svelte-components"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#authoring-svelte-components"}"><span class="${"icon icon-link"}"></span></a>Authoring Svelte components</h3>
<p>One of the things I like most about Svelte is its HTML-first philosophy. With few exceptions, Svelte code is entirely browser-readable HTML and JavaScript. In fact, technically, you could call Svelte a small superset of HTML.</p>
<p>But enough telling; let\u2019s show.</p>
<p>Just as you write <code>.jsx</code> component files in React and <code>.vue</code> files in Vue, Svelte has <code>.svelte</code> component files. A Svelte component might look like this (though you can order the pieces any way you like):</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// Component logic goes here</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- HTML goes here --></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token comment">/* CSS goes here (scoped by default!) */</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Let\u2019s see a real example.</p>
<p>Maybe the most contrived way to demonstrate a frontend framework is a button component that counts how many times it\u2019s been clicked. It\u2019s the \u201Chello world\u201D of component examples:</p>
${validate_component(CounterButton || missing_component, "svelte:component").$$render($$result, {}, {}, {})}
<p>It\u2019s not a particularly practical example, but it <em>is</em> a common one because it\u2019s an effective way to demonstrate the bread and butter of frontend frameworks: make a small component to track your state (the count), and whenever something causes the state to change (the click), automatically update the UI (the button).</p>
<p>Click through the examples below to compare this component in different frameworks:</p>
${validate_component(CodeComparison, "CodeComparison").$$render($$result, {
          dir: "counter-button",
          includeBothVues: true
        }, {}, {})}
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `I use arrow functions and omit semicolons in these examples, but that&#39;s just personal stylistic preference.
`;
          }
        })}
<p>There are some key differences I\u2019d like to point out between the Svelte version and the others:</p>
<ul><li><p><strong>Svelte is reactive by default</strong>. This means when a variable is reassigned, every place it\u2019s used or referenced also updates automatically. (<em>React and Vue both require you to explicitly initialize reactive variables</em>.)</p>
<ul><li><p>React in particular does this because of an insistence on \u201Cimmutability.\u201D Its philosophy dictates that you <em>shouldn\u2019t</em> be able to change a variable\u2019s value without calling a function that\u2019s \u201Cauthorized\u201D to do so.</p>
<p>In theory this prevents unwanted mutations (changes), but in practice, 99% of the time it\u2019s unnecessary boilerplate.</p></li></ul></li>
<li><p><strong>The Svelte version is the shortest</strong>, both in terms of line count and character count. While this isn\u2019t necessarily meaningful on its own, shorter code <em>does</em> tend to be less error-prone, as long as it\u2019s readable (which I would argue it definitely is).</p></li>
<li><p><strong>Svelte isn\u2019t picky about HTML.</strong> React needs a <code>return</code> with a single element, and Vue needs a single <code>&lt;template&gt;</code> tag wrapping all the markup. (Vue 2 <em>also</em> requires a single element inside <em>that</em>.) Svelte can have whatever HTML, wherever\u2014and with all its attributes intact, unlike in JSX, React\u2019s de facto templating language.</p></li></ul>
<h4 id="${"a-more-practical-toggle-button-example"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#a-more-practical-toggle-button-example"}"><span class="${"icon icon-link"}"></span></a>A more practical toggle button example</h4>
<p>Showing the user how many times they\u2019ve clicked on a button isn\u2019t particularly practical, so let\u2019s look at something <em>slightly</em> more realistic; a button that toggles some hidden content:</p>
${validate_component(ToggleButton, "ToggleButton").$$render($$result, {}, {}, {})}
<p>This example is at least <em>close</em> to real-world functionality; it\u2019s hopefully not too hard to imagine how something similar to this would be useful in a production scenario.</p>
<p>I like this example because it introduces two key framework concepts:</p>
<ol><li><strong>Conditional rendering</strong> \u2013 <code>if</code> statements inside the markup; and</li>
<li><strong>Computed values</strong> \u2013 dynamic variables that change depending on the situation (in this case, the button text).</li></ol>
<p>Let\u2019s compare how Svelte, React, and Vue each handle these concepts:</p>
${validate_component(CodeComparison, "CodeComparison").$$render($$result, {
          dir: "toggle-button",
          includeBothVues: true
        }, {}, {})}
<p>Svelte\u2019s way of handling computed values is that <code>$:</code> operator you see above; prepend any variable name with that, and it will be reevaluated every time anything it depends on changes. (In this case, <code>buttonText</code> is reevaluated each time <code>isTextShown</code> changes.)</p>
<p>React lets you do something similar, but Vue moves these to <code>computed</code> functions.</p>
<p>Other differences worth noting:</p>
<ul><li><p>Svelte and Vue 3 do not require you to \u201Cwrap\u201D your markup in a single element. React and Vue 2 do. (I wouldn\u2019t be surprised if React figures out a way to do away with this requirement soon, however.)</p></li>
<li><p>In React and Vue, you need to wrap conditional elements in HTML and/or stringify them. Svelte lets you put whatever otherwise valid markup you want inside of <code>#if</code> blocks, and doesn\u2019t require you to tie them to an element, either.</p></li></ul>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `The accessibility of this toggle button example is questionable, for the sake of brevity. I recommend Heydon Pickering&#39;s <a href="${"https://inclusive-components.design/toggle-button/"}" rel="${"external"}">Building Inclusive Toggle Buttons</a> for more info.
`;
          }
        })}
<h4 id="${"comparing-form-bindings"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#comparing-form-bindings"}"><span class="${"icon icon-link"}"></span></a>Comparing form bindings</h4>
<p>Here\u2019s one last quick <em>and</em> practical example, to compare form bindings between frameworks: a volume slider. Try it out:</p>
${validate_component(VolumeControl, "VolumeControl").$$render($$result, {}, {}, {})}
${validate_component(CodeComparison, "CodeComparison").$$render($$result, {
          dir: "volume-control",
          includeBothVues: true
        }, {}, {})}
<p>Notice especially how React\u2019s data flow is one-way; it needs you to explicitly update the <code>volume</code> variable any time its corresponding input changes. In other words: you need to make the input both <em>read</em> the volume setting <em>and update</em> the volume setting, as two different steps.</p>
<p>By contrast, both Svelte and Vue offer two-way data binding; you just tell the framework that whenever either the input <em>or</em> the value changes, the other should update to reflect that.</p>
<p>It should also be noted that you can add two-way data binding to component props in Svelte as well:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span> <span class="token attr-name"><span class="token namespace">bind:</span>someProp=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>someValue<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>This would allow the <code>ChildComponent</code> to pass changes to the parent component and vice versa. React is firmly against this idea because, again, it highly values immutability and one-way data flow. In practice, I personally find that dogma more inhibiting than helpful.</p>
<h4 id="${"comparing-logic"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#comparing-logic"}"><span class="${"icon icon-link"}"></span></a>Comparing logic</h4>
<p>Though we\u2019ve seen it already, I think it\u2019s worth glancing once more at how each of the three frameworks handles conditional rendering. Here\u2019s how you\u2019d show a <code>&lt;Hello /&gt;</code> component conditionally:</p>
${validate_component(CodeComparison, "CodeComparison").$$render($$result, { dir: "conditionals" }, {}, {})}
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `I&#39;m not distinguishing between Vue 2 and 3 in these examples because their templating syntax is identical.
`;
          }
        })}
<p>You can of course do <code>else</code> as well (and <code>else if</code> for that matter, though I won\u2019t demo that just because writing the React expression would be a little bit of a nightmare).</p>
<p>Here\u2019s an example where we show a <code>&lt;WelcomeBanner /&gt;</code> component if the user is logged in, and a login form component otherwise:</p>
${validate_component(CodeComparison, "CodeComparison").$$render($$result, { dir: "complex-conditionals" }, {}, {})}
<h4 id="${"loops"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#loops"}"><span class="${"icon icon-link"}"></span></a>Loops</h4>
<p>I appreciate how Svelte allows loops inside of markup, without requiring you to tie the loop to any elements or map over an array (and in most cases, without requiring you to <code>key</code> each item, either).</p>
<p>Here, assume we have an array called <code>posts</code>, full of objects containing post info:</p>
${validate_component(CodeComparison, "CodeComparison").$$render($$result, { dir: "loops" }, {}, {})}
<p>It\u2019s also nice that you can put any markup you like inside Svelte\u2019s <code>each</code> block; it doesn\u2019t need to be a single element.</p>
<h3 id="${"other-reasons-to-love-svelte"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#other-reasons-to-love-svelte"}"><span class="${"icon icon-link"}"></span></a>Other reasons to love Svelte</h3>
<p>While the above examples don\u2019t cover them, some other features of Svelte that I love include:</p>
<ul><li><p><strong>Everything lives together in one file</strong>. Similar to single-file <code>.vue</code> components, <code>.svelte</code> files keep your component\u2019s logic, markup <em>and</em> styles all together. (More on that in the next section.)</p></li>
<li><p><strong>Scoped CSS by default</strong>. (More on Svelte CSS in the next section, too).</p></li>
<li><p><strong><a href="${"https://svelte.dev/tutorial/transition"}" rel="${"nofollow"}">Transitions and animations baked-in</a></strong>. A robust built-in API means there\u2019s no need to reach for an external library or hand-code visual transformations.</p></li>
<li><p><strong>Built-in <a href="${"https://svelte.dev/tutorial/writable-stores"}" rel="${"nofollow"}">reusable data stores</a></strong> (think: a very light, simple version of Redux or Vuex)</p></li>
<li><p><strong>Easy shorthands</strong> for class binding, prop passing, and event modifiers (that I miss now when working with other frameworks)</p></li></ul>
<p>I could go on and on about how easy Svelte makes things, and how advanced yet simple it seems. Even <a href="${"https://svelte.dev/tutorial/basics"}" rel="${"nofollow"}">Svelte\u2019s docs and tutorial site</a> is way ahead of the game; the whole thing is a live REPL (coding environment) where you can write your own Svelte code and see it running live!</p>
<h3 id="${"css-in-svelte"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#css-in-svelte"}"><span class="${"icon icon-link"}"></span></a>CSS in Svelte</h3>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `One of my favorite parts about Svelte is how fun and easy it makes styling.
`;
          }
        })}
<p>To add styles to a component in Svelte, you simply create a <code>&lt;style&gt;</code> tag in the component\u2019s <code>.svelte</code> file. Any CSS inside it will be scoped to the component by default.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `One of my favorite parts about Svelte is how fun and easy it makes styling.
`;
          }
        })}
<p>If you prefer, you can use Sass in your components with minimal modification, and by adding <code>lang=&quot;scss&quot;</code> to the <code>&lt;style&gt;</code> tag. This is possible thanks to <a href="${"https://github.com/sveltejs/svelte-preprocess"}" rel="${"nofollow"}">Svelte Preprocess</a>.</p>
<p>Svelte Preprocess is an Svelte add-on, with support for several \u201Clanguages\u201D (incluing Sass, PostCSS and TypeScript) built-in. On top of that, Svelte Preprocess adds an extremely nice Sass feature: you can <a href="${"https://github.com/sveltejs/svelte-preprocess/blob/main/docs/getting-started.md#31-prepending-content"}" rel="${"nofollow"}">specify content to prepend when loading your component\u2019s Sass</a>.</p>
<p>This way, if you have all of your Sass variables in an external <code>_vars.scss</code> file like me, you can just have the processer auto-import that into every component. This saves you the trouble of manually <code>@import</code>ing the SCSS file with a bunch of <code>../../../</code> file system traversal every time you want to use a variable in a component.</p>
<h5 id="${"conditional-styling"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#conditional-styling"}"><span class="${"icon icon-link"}"></span></a>Conditional styling</h5>
<p>Conditional styling is a <em>breeze</em> in Svelte thanks to its simple shorthands. Let\u2019s look a little closer at how you might apply a <code>.enabled</code> class to a component, based on a boolean value:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> enabled <span class="token operator">=</span> <span class="token boolean">false</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>enabled <span class="token operator">?</span> <span class="token string">'enabled'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>That works, and if you\u2019ve used conditional styling in other frameworks, you might have resorted to something similar. But ternaries can be a little wordy and tough to read, especially when one side isn\u2019t even doing anything.</p>
<p>Like in React, you <em>could</em> shorten this to a \u201Cshort-circuit\u201D conditional:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> enabled <span class="token operator">=</span> <span class="token boolean">false</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>enabled <span class="token operator">&amp;&amp;</span> <span class="token string">'enabled'</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>This also works, but isn\u2019t quite as idiomatic as I\u2019d like, personally; unless you\u2019re already familiar with React, you might not realize what the <code>&amp;&amp;</code> operator is doing in this situation.</p>
<p>As an alternative, in Svelte, we can just do this instead:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> enabled <span class="token operator">=</span> <span class="token boolean">false</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">class:</span>enabled=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>enabled<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>That\u2019s pretty cool! It\u2019s easier to read, too; you can simply see what class will apply, based on what JS value.</p>
<p><strong>We can go one step further, though</strong>: if the class name and property name are identical, you can just do this:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> enabled <span class="token operator">=</span> <span class="token boolean">false</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">class:</span>enabled</span> <span class="token punctuation">/></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p><strong>Whoa!</strong> That\u2019s rad. It\u2019s basically <a href="${"https://alligator.io/js/object-property-shorthand-es6/"}" rel="${"nofollow"}">ES6 object property value shorthand</a> for conditional classes.</p>
<p>Also worth mentioning: you can have as many <code>class</code> attributes as you want (dynamic or otherwise) on a single element:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>layout<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">class:</span>logged-in=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>isLoggedIn<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name"><span class="token namespace">class:</span>darkMode</span>
  <span class="token attr-name"><span class="token namespace">class:</span>reduceMotion</span>
<span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- ...Content here --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<h5 id="${"scoped-vs-global-styling"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#scoped-vs-global-styling"}"><span class="${"icon icon-link"}"></span></a>Scoped vs. global styling</h5>
<p>If you\u2019d like to make a component\u2019s CSS global, you can do that on a per-rule basis with the <code>:global()</code> function:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">ul</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* This CSS applies ONLY to the component */</span>

    <span class="token selector">:global(li)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">/* These styles are global */</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p><strong><em>Or</em></strong> if you prefer, you can make the entire tag global with the <code>global</code> attribute:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">global</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token comment">/* All CSS here is global */</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p><strong>One word of warning there, however:</strong> global styles can persist once loaded on the page, since Svelte outputs your component\u2019s styles as a standalone CSS file. So if you have a <code>global</code> style tag in a component that only loads conditionally, its styles can stick around even after that component is removed from that page, potentially applying to elements on new pages as well.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `I&#39;ve found it&#39;s a good idea to always use a wrapping parent class selector, even when dealing with scoped styles.
`;
          }
        })}
<p>This could lead to some confusion, since \u201Cglobal\u201D only means global <em>once loaded</em>; the component has to be mounted once first before those styles are actually available.</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Because of this, I&#39;ve found it&#39;s a good idea to always use a wrapping parent class selector, even when dealing with scoped styles.
`;
          }
        })}
<p>At worst, it\u2019s redundant, and at best you\u2019ve saved yourself from unintentional style leakage (either now or if you decide to un-scope the styles in the future).</p>
<p>If you\u2019d like to read more about styling in Svelte, be sure to read <a href="${"https://css-tricks.com/what-i-like-about-writing-styles-with-svelte/"}" rel="${"nofollow"}">What I Like About Writing Styles with Svelte</a> on CSS Tricks. </p>
<h3 id="${"props-and-component-communication"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#props-and-component-communication"}"><span class="${"icon icon-link"}"></span></a>Props and component communication</h3>
<p>I appreciate the flexibility that\u2019s baked into Svelte. This is evident in the way it allows you to pass data and events between components.</p>
<p>If you like the way React handles things, you can pass methods to your child components, and keep the one-way flow intact.</p>
<p>If you like Vue\u2019s <code>$emit</code>, you can <a href="${"https://svelte.dev/tutorial/component-events"}" rel="${"nofollow"}">dispatch custom events</a> from child components and listen for them on the parent.</p>
<p>As mentioned above, you can also <code>bind</code> props to enable two-way data flow, or just have both components subscribed to the same Svelte store\u2014or even mix and match. The choice is yours.</p>
<hr>
<p>To create a prop in a Svelte component, you simply create a variable using the <code>export</code> keyword:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">let</span> propToBePassedIn
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>The above indicates a <em>required</em> prop; if you want to create an optional prop, just give it a default:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">let</span> propToBePassedIn <span class="token operator">=</span> <span class="token boolean">false</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>This syntax may seem a little odd at first, since we\u2019re generally used to exports as a way to pass things <em>out</em>. It\u2019s admittedly one of Svelte\u2019s quirks, but it becomes familiar fairly quickly. Think of it as a component <em>exporting</em> the responsibility for a value to a parent component.</p>
<p>Let\u2019s have one last comparison, just to look at how it\u2019s done in other frameworks:</p>
${validate_component(CodeComparison, "CodeComparison").$$render($$result, { dir: "props", includeBothVues: true }, {}, {})}
<p>In any of the above cases (since both props are just strings), you\u2019d use the component just like so:</p>
<pre class="${"language-html"}"><!-- HTML_TAG_START -->${`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PageHeading</span>
  <span class="token attr-name">pageTitle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>The big page title text\u2026<span class="token punctuation">"</span></span>
  <span class="token attr-name">pageSubtitle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>\u2026and a little subheading<span class="token punctuation">"</span></span>
<span class="token punctuation">/></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>A couple of things to point out:</p>
<ul><li><p>Note that React does <em>not</em> have any prop typing, or any way to require a prop. You\u2019d need to import a library for that, probably <a href="${"https://reactjs.org/docs/typechecking-with-proptypes.html"}" rel="${"nofollow"}">PropTypes</a>. (You could of course hand-write the logic in the component, but that doesn\u2019t scale well.)</p></li>
<li><p>While Svelte <em>does</em> allow you to set required props, it doesn\u2019t have prop typing built-in, as Vue does. That\u2019s largely because Svelte is fully TypeScript compatible, however. The expectation seems to be: if you want prop typing, you can just go with TypeScript for that.</p></li></ul>
<h2 id="${"what-to-know-about-svelte"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-to-know-about-svelte"}"><span class="${"icon icon-link"}"></span></a>What to know about Svelte</h2>
<p>I\u2019ll be honest: to me, any arguments against adopting Svelte grow fewer and thinner all the time. But I\u2019ll mention some things you should know and some of the arguments for and against Svelte here, just for perspective if nothing else.</p>
<h3 id="${"debunking-the-small-community-argument"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#debunking-the-small-community-argument"}"><span class="${"icon icon-link"}"></span></a>Debunking the \u201Csmall community\u201D argument</h3>
<p>When comparing Svelte (or any newer technology, for that matter) with the larger, more established players, arguments against adoption often point to community size. Where React, Vue, Angular, etc. all have large ecosystems full of resources for you to take advantage of, Svelte can seem comparatively small.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `When you&#39;ve been living in framework land long enough, it&#39;s easy to forget the reason you need a package in the first place is often compatibility with (or the need to work around) the framework itself.
`;
          }
        })}
<p>The fear, then, is that when or if you need to reach for additional packages to handle things beyond the main framework\u2019s capabilities, you may be left in the lurch.</p>
<p>I\u2019d like to put some context around that argument:</p>
<ol><li><p><strong>You don\u2019t often <em>need</em> packages with Svelte.</strong> When you\u2019ve been living in framework land long enough, it\u2019s easy to forget the reason you need a package in the first place is often compatibility with (or the need to work around) the framework itself. </p>
<p>Svelte is much closer to the HTML, CSS and JavaScript of the web, which means you don\u2019t often <em>need</em> to go looking for a package that, say, plays nice with your framework\u2019s hooks or lifecycle methods. Plus, many of the features you\u2019d need a package for in other frameworks come baked in with Svelte (motion, scoped CSS, and state management being the biggest examples).</p></li>
<li><p><strong>Svelte is extremely compatible with vanilla JavaScript packages.</strong> This means that while, yes, the ecosystem of <em>dedicated</em> Svelte packages and plugins is comparatively small, it can often benefit from and easily use <em>any</em> framework-agnostic package\u2014which is a pretty massive portion of the packages out there.</p></li>
<li><p><strong>Even when you <em>do</em> need to build something yourself, SvelteKit makes it comparatively simple.</strong> One example: previously, I was using an RSS plugin with Gridsome, but no such package exists for SvelteKit.</p>
<p>A quick web search, however, was all it took to find a very easy way to <a href="${"https://www.davidwparker.com/posts/how-to-make-an-rss-feed-in-sveltekit"}" rel="${"nofollow"}">Create an RSS feed in SvelteKit</a>, with no dependencies, in under 40 lines of code.</p></li></ol>
<h3 id="${"yes-svelte-scales"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#yes-svelte-scales"}"><span class="${"icon icon-link"}"></span></a>Yes, Svelte scales</h3>
<p>We\u2019ve talked about how SvelteKit\u2019s components compile and ship as minimal, self-contained JavaScript, which means there\u2019s no overhead of a framework. This approach leads to smaller bundles, but the downside is: there\u2019s also less shared code, so each individual component will inevitably contain repeated code.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `The scale at which Svelte&#39;s advantages disappear is actually unrealistically high for just about any\xA0application.
`;
          }
        })}
<p>Loading a framework script upfront adds to the <em>initial</em> load, but the more its code is reused, the the more it pays off\u2014which means that above a certain scale, the advantage of Svelte\u2019s approach is neutralized, and it\u2019s actually <em>more</em> efficient to build with another framework.</p>
<p>This causes some people to claim that Svelte doesn\u2019t scale, but that\u2019s premature.</p>
<p>The <em>real</em> question that matters is: <em>where is that point</em>? Clearly, nobody\u2019s worried about whether React scales, so when does Svelte lose its advantage over React?</p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `Turns out: the scale at which Svelte&#39;s advantages disappear is actually unrealistically high for just about any application.
`;
          }
        })}
<p>If you\u2019d like more detail, you can read this <a href="${"https://github.com/halfnelson/svelte-it-will-scale/blob/master/README.md"}" rel="${"nofollow"}">comparison of React and Svelte bundle scaling</a>, or <a href="${"https://svelte-scaling.acmion.com/"}" rel="${"nofollow"}">this similar comparison</a>. But to summarize both: Svelte\u2019s advantage disappears somewhere around 150 kB of components loaded onto the page. That doesn\u2019t <em>sound</em> like a lot, but components are tiny; it would actually take a pretty massive number (or extremely high complexity) to get to that point. Many components aren\u2019t even 1 kB. (In fact, speed tests have dinged me for not g-zipping components, since Netlify doesn\u2019t automatically gzip any components that are less than 1 kB in size, as the gains are too tiny to bother with.)</p>
<p>For comparison\u2019s sake: <a href="${"/blog/converting-from-gridsome-to-sveltekit/"}">I recently rewrote this site in SvelteKit</a>. Granted, it\u2019s still a small personal site and not a production app, but I\u2019m <em>barely</em> 20% of the way to that scale at any given route. My largest and most complex component\u2014the <code>__layout.svelte</code> file, which has 17 imports\u2014is only 12 kB. None of my other components are even 3 kB. So it\u2019s tough to fathom how I\u2019d make a page large and complex enough to approach the ~150 kB vertex, given I\u2019m orders of magnitude below that right now. (And just to emphasize/clarify: this is <em>per route</em>, not the app as a whole.)</p>
<p>Plus let\u2019s not forget: that\u2019s the scale at which you\u2019re on <em>even ground</em> with React. You\u2019d <em>still</em> have to go significantly larger than <em>that</em> before there would be any meaningful difference between the two.</p>
<p><em>Plus</em>, this whole discussion focuses on how things are right now, in this moment, and not on future upside. Will React get smaller and faster in the future? Probably; it\u2019s supported by a large and talented team. But it\u2019s also benefitted from nearly a decade of optimization already; there may not be a lot left to squeeze out of it at this point.</p>
<p>On the other hand, Svelte is comparably young. If I\u2019m betting on which framework will improve more in the future <em>relative to its current position</em>, I\u2019m backing Svelte, no question.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `It&#39;s worth mentioning that since Svelte started becoming popular, other frameworks have learned from it and closed the performance gap a bit. React is still generally significantly heavier, but Vue 3 is fairly comparable to Svelte performance-wise in many cases.
`;
          }
        })}
<h3 id="${"svelte-doesnt-support-internet-explorer-by-default"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#svelte-doesnt-support-internet-explorer-by-default"}"><span class="${"icon icon-link"}"></span></a>Svelte doesn\u2019t support Internet Explorer by default</h3>
<p>Svelte requires polyfills to run properly in Internet Explorer (and even then, support for any version of IE below 11 is not guaranteed).</p>
<p>If you need to support IE 11, you can read the <a href="${"https://github.com/Shopify/payment-service/issues/6667"}" rel="${"nofollow"}">Svelte/IE11 GitHub issue</a>, which lists some possible workarounds and polyfills. Or, this may be one case where a choice of another framework is necessitated.</p>
<p>However, if you\u2019re starting a new project today: note that Internet Explorer is not long for this world. <a href="${"https://www.searchenginejournal.com/google-search-ends-support-for-internet-explorer-11/421726/"}" rel="${"nofollow"}">Google search recently dropped support for IE 11</a>, citing its tiny and shrinking market share (only around 1% of all browsers). WordPress, which powers about 40% of the web at this point, dropped support for IE 11 in <a href="${"https://wordpress.org/news/2021/05/dropping-support-for-internet-explorer-11/"}" rel="${"nofollow"}">WordPress version 5.8 earlier this year</a>. And even <a href="${"https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/"}" rel="${"nofollow"}">Microsoft itself will be putting the final nail in IE 11\u2019s coffin in July 2022</a>.</p>
<h3 id="${"what-are-your-goals"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-are-your-goals"}"><span class="${"icon icon-link"}"></span></a>What are your goals?</h3>
<p>The answer to the question of whether you should use Svelte <em>right now</em> is a classic: \u201Cit depends.\u201D</p>
<p>Are you learning your <em>first</em> framework? If so, what\u2019s your goal? If you\u2019re looking for an easy tool to learn, for something that will empower you to build interactive UIs, or just for some additional knowledge and experience, I\u2019d recommend Svelte wholeheartedly. </p>
${validate_component(Callout, "Callout").$$render($$result, {}, {}, {
          default: () => {
            return `There&#39;s no wrong choice when it comes to developing your own skills\u2014particularly because having one framework down makes it much easier to learn a new one, like moving from instrument to\xA0instrument.
`;
          }
        })}
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `There&#39;s no wrong choice when it comes to developing your own skills and knowledge.
`;
          }
        })}
<p>On the other hand, if you\u2019re learning in the hopes of getting a job with your newfound skills, it would be hard to recommend anything other than React for that pursuit\u2014simply because it\u2019s the <em>largest</em> framework by far in terms of market share and jobs available. I wish that weren\u2019t the case, but tech as a whole (in the U.S., at least), went in heavily on React and I don\u2019t see that changing any time soon. Still, though: if you already know React, I think it\u2019s still worth learning Svelte just for the perspective, if nothing else.</p>
<p>Alternately: are you choosing a technology for a relatively new startup or project? Svelte will likely enable you to move more quickly and build something that\u2019s more performant, but hiring or collaborating may be a challenge, given the relatively small pool of Svelte devs. That said, though: knowing one JS framework tends to make learning a new one easier, and Svelte is in my opinion the easiest to start with. I think any developer who\u2019s already familiar with another frontend framework should be able to pick up Svelte pretty quickly (and vice versa).</p>
<h3 id="${"svelte-shines-in-limited-environments"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#svelte-shines-in-limited-environments"}"><span class="${"icon icon-link"}"></span></a>Svelte shines in limited environments</h3>
<p>I touched on this in the intro, but one of Svelte\u2019s biggest strengths is its minimal JavaScript bundle sizes. This makes it ideal for any code that will be executed by low-power devices that can\u2019t parse JavaScript quickly (smart TVs, watches, and other IoT devices for example, or older smartphones that might be more common in less economically advantaged markets). It <em>also</em> means Svelte shines where bandwidth is limited, which again makes it a perfect fit for older devices and users who might be on poor internet connections.</p>
<h3 id="${"reactivity-with-arrays-and-objects"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#reactivity-with-arrays-and-objects"}"><span class="${"icon icon-link"}"></span></a>Reactivity with arrays and objects</h3>
<p>Svelte\u2019s one notable \u201Cgotcha\u201D is in how it handles automatic reactivity with arrays and objects. You can read more about it in the <a href="${"https://svelte.dev/tutorial/updating-arrays-and-objects"}" rel="${"nofollow"}">Svelte tutorial on arrays and objects</a>, but to summarize: <em>modifying</em> an array or object won\u2019t register with Svelte as an update, and therefore, won\u2019t cause a re-render. You need to <em>re-assign</em> the variable to force Svelte to recognize the change.</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">]</span>

colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span>
<span class="token comment">// \u274C Updates the array, but doesn't cause a re-render</span>

colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>colors<span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span>
<span class="token comment">// \u2705 Reassigning causes a re-render</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>The same principle works with objects, as well:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">let</span> me <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'Josh'</span>
<span class="token punctuation">&#125;</span>

me<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">'Collinsworth'</span>
<span class="token comment">// \u274C Updates the object, but doesn't cause a re-render</span>

me <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>me<span class="token punctuation">,</span> <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'Collinsworth'</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// \u2705 Reassigning causes a re-render</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>If for some reason you <em>had</em> to use <code>.push()</code>, you could just assign the array to itself afterwards. This would work:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js">myArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newThing<span class="token punctuation">)</span>
myArray <span class="token operator">=</span> myArray</code>`}<!-- HTML_TAG_END --></pre>
<p>But I think this is a little nicer (and works the exact same way):</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js">myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>myArray<span class="token punctuation">,</span> newThing<span class="token punctuation">]</span></code>`}<!-- HTML_TAG_END --></pre>
<p>If you want to get nerdy for a second: <strong>this is actually a quirk of JavaScript itself</strong>, rather than of Svelte. JavaScript still considers the array or object as the same unique thing until and unless it\u2019s reassigned. (This is why you can use <code>const</code> to declare an array or object and still modify its properties; the variable itself hasn\u2019t been mutated, even though its contents have.)</p>
<h2 id="${"how-to-get-started-with-svelte"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#how-to-get-started-with-svelte"}"><span class="${"icon icon-link"}"></span></a>How to get started with Svelte</h2>
<p>If you\u2019d like to dive in and get some hands-on experience with Svelte (and I recommend you do!), there are two main ways forward at this point.</p>
<h3 id="${"the-svelte-repl"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#the-svelte-repl"}"><span class="${"icon icon-link"}"></span></a>The Svelte REPL</h3>
<p>Clearly I\u2019m a big fan, so I could be biased, but I honestly think Svelte might have the best tutorial and documentation of any framework out there.</p>
<p>There\u2019s a wonderful introduction in the <a href="${"https://svelte.dev/tutorial/basics"}" rel="${"nofollow"}">Svelte Tutorial</a>, which functions as a live coding environment where you\u2019re taught Svelte bit by bit, and try to finish incomplete Svelte code challenges along the way. (Or, if you like, you can just click \u201Cshow me\u201D to see the complete lesson.) It\u2019s fun and engaging, and covers all of Svelte\u2019s concepts from simple to complex extremely well. In fact, I find myself going back to it over and over. I highly recommend it both for learning and for reference.</p>
<h3 id="${"starting-your-own-svelte-project"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#starting-your-own-svelte-project"}"><span class="${"icon icon-link"}"></span></a>Starting your own Svelte project</h3>
<p>Alternatively, there\u2019s a <a href="${"https://svelte.dev/blog/the-easiest-way-to-get-started"}" rel="${"nofollow"}">Svelte quickstart guide</a> that walks you through installing Svelte on your machine. I\u2019ll post the directions here, too; it\u2019s suprisingly quick, assuming you already have NPM installed:</p>
<blockquote><pre class="${"language-bash"}"><!-- HTML_TAG_START -->${`<code class="language-bash">npx degit sveltejs/template my-svelte-project
<span class="token builtin class-name">cd</span> my-svelte-project
<span class="token comment"># to use TypeScript run:</span>
<span class="token comment"># node scripts/setupTypeScript.js</span>

<span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run dev</code>`}<!-- HTML_TAG_END --></pre></blockquote>
<p>If you\u2019re not familiar with those commands:</p>
<ul><li><p><code>npx</code> allows you to run something from NPM, but <em>without actually installing it on your machine</em>. In this case, we just want to run <code>degit</code> once; we don\u2019t need to keep it around for anything afterward.</p></li>
<li><p><code>degit</code> clones a repo (in this case, the <code>template</code> project from <code>sveltejs</code>), but <em>without</em> its git history; it\u2019ll be as though you\u2019re starting up a fresh new project.</p></li></ul>
<p>Naturally, you can replace <code>my-svelte-project</code> with whatever name you\u2019d like for your local project. Once you <code>npm install</code>, <code>npm run dev</code> will start a dev server that will show you your project and automatically refresh as you save your changes.</p>
<h2 id="${"conclusion"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#conclusion"}"><span class="${"icon icon-link"}"></span></a>Conclusion</h2>
<p>I hope you\u2019re now as excited about Svelte as I am! I encourage you to try it out on your own, even if it\u2019s just playing around in the <a href="${"https://svelte.dev/tutorial/basics"}" rel="${"nofollow"}">Svelte tutorial</a>. If you haven\u2019t tried it before, I think you\u2019ll be pleasantly surprised how comparatively straightforward it is.</p>
<p>And if you\u2019re looking to dive deeper, there\u2019s also SvelteKit, a Svelte app framework for larger/more complex projects. I\u2019ve written a post on <a href="${"/blog/converting-from-gridsome-to-sveltekit"}">converting this site to SvelteKit from Gridsome</a>, if you\u2019d like to check it out as well.</p>
<p>In any case, thanks for reading, and if you have any questions or thoughts, <a href="${"/contact?from_page=svelte_comparison"}">reach out</a> or leave a comment below!</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/lets-learn-css-variables-7d1d9c23.js
  var lets_learn_css_variables_7d1d9c23_exports = {};
  __export(lets_learn_css_variables_7d1d9c23_exports, {
    default: () => Lets_learn_css_variables,
    metadata: () => metadata18
  });
  var metadata18, Lets_learn_css_variables;
  var init_lets_learn_css_variables_7d1d9c23 = __esm({
    ".svelte-kit/output/server/chunks/lets-learn-css-variables-7d1d9c23.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      metadata18 = {
        "title": "Let's Learn CSS Variables!",
        "date": "2018-02-25",
        "updated": "2020-05-19",
        "categories": ["css"],
        "coverImage": "css-variables-1.png",
        "coverWidth": 1096,
        "coverHeight": 734,
        "excerpt": "CSS variables (otherwise known as CSS custom properties) give previously impossible superpowers to CSS developers. This post covers what they are, how they work, and a couple of nifty ways you can implement them on your own website."
      };
      Lets_learn_css_variables = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>The usefulness of CSS variables should be fairly apparent if you\u2019ve managed any sizable stylesheet before. If you have, you probably already know how untidy it can be at large scale. In fact, that\u2019s one of the biggest knocks against CSS; it\u2019s very easy for a stylesheet to balloon, making updates difficult as you\u2019re forced to search through hundreds (or thousands) of lines of code to make changes.</p>
<p>Fortunately for us, browsers are always adapting newer and better ways of doing things, and so we get an awesome, fairly new feature called <strong>CSS variables</strong>!</p>
<p>(Pedantic side note: technically, these are called \u201Ccustom properties.\u201D But that\u2019s boring, not as clear, and honestly a less common name than CSS variables. So I\u2019m gonna stick with the latter.)</p>
<h2 id="${"the-old-way"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#the-old-way"}"><span class="${"icon icon-link"}"></span></a>The Old Way</h2>
<p>To demonstrate what CSS variables are good for, let\u2019s take a common example: you\u2019re managing a robust stylesheet for a client, and their brand color is used all over the place. It\u2019s in buttons, borders, backgrounds, text colors, and all kinds of other places, something like this:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #ffd100<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token selector">button</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> #ffd100<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token selector">input</span> <span class="token punctuation">&#123;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #ffd100<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>And so on and so on. Eventually, though, your client decides that this is not the proper color, or rebrands, or for whatever other reason, this color needs to change and be updated <em>everywhere</em> it exists on the website.</p>
<p>That\u2019s obviously a huge pain, because you\u2019ve got to do a large-scale find-and-replace now. With some text editor know-how, it\u2019s not too big a deal, but things can be missed or even changed when they weren\u2019t supposed to be if you\u2019re not careful, especially when dealing with multiple stylesheets (or, <em>*shudder*</em>, CSS <em>outside</em> of stylesheets).</p>
<p>Fortunately for us, this is the black-and-white part of the infomercial where the poor, hapless CSS author says \u201Cthere\u2019s got to be a better way,\u201D and the announcer cheerfully replies, \u201Cwell, now there is!\u201D as the world bursts into color. Enter CSS variables!</p>
<h2 id="${"css-variable-basics"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#css-variable-basics"}"><span class="${"icon icon-link"}"></span></a>CSS Variable Basics</h2>
<p>Rather than using the same value over and over again (making it tough to manage and update your stylesheet), a CSS variable allows you to simply set a <em>name</em> for any given value. Then, whenever you want to use that value (in this case, our specific color), you put the <em>name</em> in your stylesheet, rather than the actual hex code. The name is essentially an alias or placeholder for the color; a reference back to the original setting.</p>
<p>Then, if you ever want to change the value, you only need to update it in one location; everywhere else updates automatically!</p>
<p>But instead of talking about it, let me show you how you might use it:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">&#123;</span>
    <span class="token property">--brand-yellow</span><span class="token punctuation">:</span> #ffd100<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token selector">h1</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--brand-yellow<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token selector">button</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--brand-yellow<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token selector">input:focus</span> <span class="token punctuation">&#123;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid <span class="token function">var</span><span class="token punctuation">(</span>--brand-yellow<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p><img src="${"/images/post_images/changing-css-var-color.gif"}" alt="${"Showing CSS properties changing as CSS variables are altered"}"></p>
<p><strong>Whoa!</strong> That might look like a lot of new syntax, depending on your current familiarity with CSS. And some of it <em>is</em> brand new, so let\u2019s break it down piece by piece, starting at the top.</p>
<h2 id="${"putting-together-the-pieces-of-css-variable-syntax"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#putting-together-the-pieces-of-css-variable-syntax"}"><span class="${"icon icon-link"}"></span></a>Putting Together the Pieces of CSS Variable Syntax</h2>
<h3 id="${"what-is-root"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-is-root"}"><span class="${"icon icon-link"}"></span></a>What is <code>:root</code>?</h3>
<p>You might not have used the <code>:root</code> CSS pseudo-class before, but it refers to the topmost element in the HTML document. In a webpage, this will always be the <code>&lt;html&gt;</code> element, and in fact, the <code>:root</code> selector is pretty much the exact same as the <code>html</code> selector. (The only difference, for those curious, is that <code>:root</code> is slightly more specific. So if you used both selectors, the styles applied to <code>:root</code> would take precedence.)</p>
<p>That explains <em>what</em> <code>:root</code> is, but not <em>why</em>. Why are we putting variables in a rule targeting the <code>:root</code>? Turns out, there\u2019s a very good reason for this, and it is: the cascade.</p>
<p>Remember, in CSS, everything trickles down the cascade, and elements inherit properties from their parent and ancestor elements. So the reason we define CSS variables inside the :root selector is that we want them to cascade down, and be \u201Cknown\u201D to every other element in the document to use as needed.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Remember, in CSS, everything trickles down the cascade, and elements inherit properties from their parent and ancestor elements. So the reason we define CSS variables inside the :root selector is that we want them to cascade down, and be \u201Cknown\u201D to every other element in the document to use as\xA0needed.
`;
          }
        })}
<p>In other words: applying a style to the <code>:root</code> means it gets \u201Cpassed down\u201D to every other element in the document. This wouldn\u2019t be the case if we applied CSS variables to, say, a random <code>&lt;div&gt;</code>. Elements <em>inside</em> that <code>&lt;div&gt;</code> would know about the variables and could use them, but no elements outside would. So it makes the most sense to apply CSS variables to the <code>:root</code> pseudo-class, since <em>everything</em> is inside of the root tag, which is <code>&lt;html&gt;</code>.</p>
<h3 id="${"what-does---brand-yellow-mean"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-does---brand-yellow-mean"}"><span class="${"icon icon-link"}"></span></a>What does <code>--brand-yellow</code> mean?</h3>
<p>In the example above, I\u2019ve named my CSS variable \u201Cbrand-yellow,\u201D but there\u2019s nothing special about those words. You can actually name your CSS variables anything you want to! (I\u2019d recommend something intuitive, though, so that when you or anybody else comes across the variable in a CSS file, its name will confer its value and purpose. Variable names like <code>--myVariable</code> or <code>--x</code> aren\u2019t very helpful or descriptive.)</p>
<p>The only special part is the double dashes (<code>--</code>) <em>before</em> the variable name. Browsers have decided that these dashes are how we must name our variables, to indicate that they are different than normal CSS properties.</p>
<p>So you could name your variable something like <code>--myYellow</code> or <code>--brand-orange</code> or <code>--em</code> or anything you want!</p>
<p><strong>And by the way: variables can be anything, not just colors!</strong></p>
<p>If you have a particular unit of measurement you\u2019re using over and over again\u2014say, for example, <code>16px</code>\u2014you could set a CSS variable for it, and use it anywhere you need!</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">&#123;</span>
    <span class="token property">--unit</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token selector">header</span> <span class="token punctuation">&#123;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token selector">h1</span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>And so on. <strong>Anything that can be a CSS value can be a CSS variable!</strong> So if you\u2019re repeating it often, it may be worth setting a variable for it. That way, if you decide to change all of those instances\u2014if <code>16px</code> needed to change to <code>18px</code>, for example\u2014you only need to make the change in one place!</p>
<h3 id="${"whats-with-var"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#whats-with-var"}"><span class="${"icon icon-link"}"></span></a>What\u2019s with <code>var()</code>?</h3>
<p>Those of you who have worked in pretty much any common programming language will recognize that <code>var()</code> is a function. (And for those of you who <em>aren\u2019t</em> familiar with functions, don\u2019t worry: this one\u2019s very easy to use.)</p>
<p>As you probably guessed, \u201Cvar\u201D is short for \u201Cvariable,\u201D and the <code>var()</code> function is how you actually <em>use</em> those values you set up in the <code>:root</code> element. Just insert the <code>var()</code> function, and put the name of whichever variable you\u2019d like to use inside the parentheses. Easy as that!</p>
<p>Once more, let\u2019s have a look at the whole thing put all together in a new example:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">&#123;</span>
    <span class="token property">--base-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token selector">p</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token selector">header</span> <span class="token punctuation">&#123;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>In the above example, we\u2019ve got a <code>--base-size</code> variable set to 18px, and our <code>&lt;p&gt;</code> elements will use it as both their font-size and their bottom margin. Plus, it will be the padding measure used by our <code>&lt;header&gt;</code> element. And if we ever decide that\u2019s too much or too little, all we need to do is update the value of the variable where it\u2019s declared in the <code>:root</code>, and all changes will be made together quickly and neatly!</p>
<h2 id="${"a-couple-of-fancy-css-variable-tricks"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#a-couple-of-fancy-css-variable-tricks"}"><span class="${"icon icon-link"}"></span></a>A Couple of Fancy CSS Variable Tricks</h2>
<h3 id="${"using-css-variables-with-calc"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#using-css-variables-with-calc"}"><span class="${"icon icon-link"}"></span></a>Using CSS Variables with <code>calc()</code></h3>
<p>You might be familiar with another of CSS\u2019s (few) functions, <code>calc()</code>. The <code>calc()</code> function (short, fairly obviously, for \u201Ccalculation\u201D) allows you to have CSS do math that would otherwise be impossible in the language. Here\u2019s a basic example of <code>calc()</code> in action:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 32px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>That bit of CSS sets elements with the <code>.container</code> class to be 100% wide, but then <em>subtracts</em> 32px from whatever that total may be (probably to account for 16 pixels of padding or margin on each side of the element).</p>
<p>Mixing units of measurement like this\u2014units such as <code>%</code> and <code>px</code> (or even <code>vw</code> or <code>vh</code>)\u2014is one of the things <code>calc()</code> is really useful for.</p>
<p><strong>But what does this have to do with CSS variables?</strong> Get excited: we can do a little CSS function inception to <em>use</em> CSS variables <em>inside</em> of a <code>calc()</code> function!</p>
<p>Feast your eyes on this example CSS:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">&#123;</span>
  <span class="token property">--base-unit</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token selector">.container</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span> <span class="token function">var</span><span class="token punctuation">(</span>--base-unit<span class="token punctuation">)</span> * 1.2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span> <span class="token function">var</span><span class="token punctuation">(</span>--base-unit<span class="token punctuation">)</span> * 1.5<span class="token punctuation">)</span><span class="token punctuation">;</span>   
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span> <span class="token function">var</span><span class="token punctuation">(</span>--base-unit<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p><strong>Nifty, huh?</strong> By using <code>calc( var(--base-unit) * 1.2)</code>, we\u2019ve had CSS take our <code>--base-unit</code> variable (which, remember, is <code>16px</code>) and multiply it by 1.2\u2014resulting in a font-size of roughly 19px. The padding is 1.5 times our <code>--base-unit</code> variable, resulting in a value of 24px, and the bottom margin is the variable <em>divided</em> by two, thus, 8px.</p>
<p>Another example I really like: resizing CSS grid columns individually. Ordinarily, to redefine one column in your grid, you\u2019d need to rewrite the whole rule, but with CSS variables, you can reach in and adjust at will without touching what you don\u2019t need to:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token comment">/* Set the default styling for the .grid class */</span>
<span class="token selector">.grid</span> <span class="token punctuation">&#123;</span>
  <span class="token property">--left-column</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--left-column<span class="token punctuation">)</span><span class="token punctuation">,</span> 32rem<span class="token punctuation">,</span> 1fr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token comment">/* Make the left column wider at certain breakpoints,
   without touching the rest of the grid. /*/</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
  <span class="token selector">.grid</span> <span class="token punctuation">&#123;</span>
    <span class="token property">--left-column</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
  <span class="token selector">.grid</span> <span class="token punctuation">&#123;</span>
    <span class="token property">--left-column</span><span class="token punctuation">:</span> 4rem<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Are you excited? I\u2019m excited.</p>
<h3 id="${"redefining-css-variables-with-media-queries"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#redefining-css-variables-with-media-queries"}"><span class="${"icon icon-link"}"></span></a>Redefining CSS Variables with Media Queries</h3>
<p>Let\u2019s keep using the example above; 16px might be a suitable unit of measurement for <em>some</em> screens, but we might want it to grow or shrink depending on the screen size. Easy! Just use a media query:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">&#123;</span>
  <span class="token property">--base-unit</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span><span class="token punctuation">&#123;</span>
  <span class="token selector">:root</span> <span class="token punctuation">&#123;</span>
    <span class="token property">--base-unit</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 900px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
  <span class="token selector">:root</span> <span class="token punctuation">&#123;</span>
    <span class="token property">--base-unit</span><span class="token punctuation">:</span> 22px<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p><img src="${"/images/post_images/css-variables-media-queries-3.gif"}" alt="${" "}"></p>
<p>You can\u2019t tell me that\u2019s not cool (and <em>much</em> easier than updating each of those values individually at every breakpoint)!</p>
<h2 id="${"browser-support"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#browser-support"}"><span class="${"icon icon-link"}"></span></a>Browser Support</h2>
<p>As with any new feature, browser support is key. Fortunately, as of this writing, there\u2019s very little to be wary about as far as using CSS variables right away; the only major browser without support is Internet Explorer 11 (and lower):</p>
<p><img src="${"/images/post_images/caniuse-css-vars-1-1.png"}" alt="${"CanIUse.com screenshot showing global support for custom CSS properties (CSS variables) at around 90%"}"></p>
<p>Global support is near 90%, with IE11 and Opera Mini (which seems to have many gaps in support) making up the vast majority of the remaining 10%.</p>
<p>But this post will age, so you can check <a href="${"http://caniuse.com"}" rel="${"nofollow"}">caniuse.com</a> for up-to-date stats on <a href="${"https://caniuse.com/#search=css%20variables"}" rel="${"nofollow"}">browser support for custom properties (CSS variables)</a>.</p>
<p>Right now, I personally wouldn\u2019t hesitate to use CSS variables in production; that\u2019s hefty support. But it will depend on your site\u2019s users. If some are likely to be on IE11, I\u2019d definitely recommend using fallback values for custom properties, like so:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #53565a<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--brand-primary<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>But regardless, I hope you\u2019ve enjoyed, and have fun with using CSS variables in your next project!</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/new-site-new-theme-for-2018-dcc2dfe4.js
  var new_site_new_theme_for_2018_dcc2dfe4_exports = {};
  __export(new_site_new_theme_for_2018_dcc2dfe4_exports, {
    default: () => New_site_new_theme_for_2018,
    metadata: () => metadata19
  });
  var metadata19, New_site_new_theme_for_2018;
  var init_new_site_new_theme_for_2018_dcc2dfe4 = __esm({
    ".svelte-kit/output/server/chunks/new-site-new-theme-for-2018-dcc2dfe4.js"() {
      init_index_2749e1b7();
      init_SideNote_5c625ecb();
      metadata19 = {
        "title": "New Site, New Theme for 2018",
        "date": "2018-01-02",
        "updated": "2020-05-18",
        "categories": ["design", "web", "php", "wordpress"],
        "coverImage": "2018-logo.jpg",
        "coverWidth": 16,
        "coverHeight": 9,
        "excerpt": "Building a WordPress theme (and a new brand) from scratch."
      };
      New_site_new_theme_for_2018 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `This site is no longer on WordPress, so the theme described here can&#39;t actually be seen anywhere, and the features described mostly aren&#39;t on this website any longer.
`;
          }
        })}
<p>It\u2019s been a goal of mine for a very long time to completely redesign my\xA0WordPress theme from scratch. Finally, that goal is a reality!</p>
<p>The first time I built my own site, back in (I\u2019d guess) 2013, I used <a href="${"http://www.adobe.com/products/muse.html"}" rel="${"nofollow"}">Adobe Muse</a>, which was a good fit for my lack of skill at the time, but a tool that lost relevance as I learned to code.</p>
<p>In 2014, I launched a portfolio site that I coded (mostly) from scratch. Looking back at it now makes me cringe a bit; knowing how to make something work and how to build it correctly are two very different things.</p>
<p>I built a\xA0WordPress site on the <a href="${"https://www.elegantthemes.com/gallery/divi/"}" rel="${"nofollow"}">Divi</a>\xA0theme roughly three years ago. At first, it was built entirely on Divi\u2019s visual page builder, and that was handy for creating new layouts quickly. But the more I learned about\xA0WordPress (and child themes in particular), the less necessary it was to have the parent theme around. It was extra bloat for mostly features I didn\u2019t use at all. So for a very long time, starting over with my own theme, built from scratch and completely personalized just for this site, has been a goal\u2014and now I finally get to check it off.</p>
<h2 id="${"about-the-theme"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#about-the-theme"}"><span class="${"icon icon-link"}"></span></a>About the theme</h2>
<p>Rather than beginning with a parent theme or a starter theme like <a href="${"http://underscores.me"}" rel="${"nofollow"}">Underscores</a>, I wanted this theme to be built completely from scratch. No borrowed or pre-written code at all; 100% original.</p>
<p>For building, I began with <a href="${"https://local.getflywheel.com"}" rel="${"nofollow"}">Local by Flywheel</a>. Yes, I work for <a href="${"https://getflywheel.com"}" rel="${"nofollow"}">Flywheel</a>, but I honestly don\u2019t believe there\u2019s a better tool for running\xA0WordPress sites locally\u2014particularly given that my live site is hosted on Flywheel already, which means that pulling a copy of my live site to my local machine for development (and then pushing it back live when ready) was all as easy as a click of a button, thanks to the Push to Flywheel feature.</p>
<p>I also implemented <a href="${"https://codekitapp.com/"}" rel="${"nofollow"}">CodeKit</a>, for minification, auto browser refreshing, and <a href="${"http://sass-lang.com/"}" rel="${"nofollow"}">Sass</a> compilation. Bonus: CodeKit works with Local seamlessly.</p>
<p>Speaking of Sass: it\u2019s invaluable. During theme development, I set up variables for breakpoint widths, colors, some font families, and created a mixin for flexbox settings.</p>
<p><a href="${"/images/post_images/sass-variables.png"}"><img src="${"/images/post_images/sass-variables.png"}" alt="${"A list of Sass variables used for colors, breakpoints, fonts and Flexbox settings"}"></a></p>
<p>(That\u2019s the <a href="${"https://packagecontrol.io/packages/ColorHelper"}" rel="${"nofollow"}">ColorHelper</a> Sublime extension creating the color boxes, by the way.)</p>
<p>I also got to take the opportunity to finally learn and implement <a href="${"https://wordpress.org/plugins/timber-library/"}" rel="${"nofollow"}">Timber</a>. I\u2019d been hearing too many good things for too long to ignore it any more.</p>
<p>I love the way Timber makes template files so much cleaner, abstracting output code to bare minimums and eliminating the need to deal with the loop directly. Like any framework, though, there\u2019s a little bit of a learning curve, particularly for some of WordPress\u2019s more complex functionality, like comments and pagination. It\u2019s very well documented, though. I would recommend it, and look forward to using it again. I\u2019ll have to add it to my <a href="${"https://api.rickyjanuari.com/essential-tools-wordpress-development/"}" rel="${"nofollow"}">essential tools</a>\xA0for\xA0WordPress development.</p>
<p>The theme runs mostly off a single index.php file which dynamically pulls in the appropriate Timber .twig files based on context. In fact, aside from the index file, the theme\u2019s only PHP template files are the footer and header, the functions file, and a sidebar file.</p>
<h2 id="${"advanced-custom-fields--css-grid"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#advanced-custom-fields--css-grid"}"><span class="${"icon icon-link"}"></span></a>Advanced Custom Fields + CSS Grid</h2>
<p>I also took this opportunity to use CSS grid on a project for the first time\u2014specifically, on the <a href="${"https://api.rickyjanuari.com/design/"}" rel="${"nofollow"}">design</a> page. It turns out, CSS grid mixes really well with <a href="${"https://www.advancedcustomfields.com/"}" rel="${"nofollow"}">Advanced Custom Fields</a>, particularly the Pro Repeater field. I set up fields for images, height and width, to control the size of images in the grid:</p>

<p><a href="${"/images/post_images/acf-fields-1.png"}"><img src="${"/images/post_images/acf-fields-1-1024x797.png"}" alt="${"Custom fields that allow for a width and height property to use in the image grid"}"></a></p>
<p>The width and height have max values, and a Sass loop (and a media query) sets CSS for those values with classes:</p>
<p><img src="${"/images/post_images/sass-grid.png"}" alt="${"A Sass @for loop to set classes for each possible width and height, and add CSS accordingly."}"></p>
<p>I\u2019ve been using the same logo for myself since I was in school. On a whim, I decided to create a new one that more closely matches where I am now; more focused on development and applying design principles to the web.</p>
<p><img src="${"/images/post_images/Full-Logo-2018.svg"}" alt="${"2018 logo"}"></p>
<p>As in the header, the logo\u2019s \u201Cicon\u201D form simply removes the lettering, leaving only two sets of brackets, implying code (particularly delving into objects or arrays), with the middle two characters highlighted and in the vague shape of a \u201CJ\u201D and a \u201CC\u201D (my initials, of course). I like to think it also hints at my own duality of designer/developer.</p>
<h2 id="${"the-fonts"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#the-fonts"}"><span class="${"icon icon-link"}"></span></a>The fonts</h2>
<p>I\u2019ve owned <a href="${"https://www.myfonts.com/fonts/stawix/amsi-pro/"}" rel="${"nofollow"}">AmsiPro</a>\xA0for years, and I\u2019ve been waiting to use it on a project since I first saw it. I finally decided its personality was right for this project. It\u2019s bold and friendly (particularly the ultra weight used for this site\u2019s headers), but completely utilitarian and readable at lighter weights, as body copy.</p>
<p>I wanted to keep the font load fairly light, so only occasional splashes of <a href="${"https://www.myfonts.com/fonts/rene-bieder/sagona/"}" rel="${"nofollow"}">Sagona</a>\xA0Book Italic are used in places to highlight text. I\u2019ve liked Sagona for a long time. I appreciate the hints of happiness in this Clarendon-esque serif, and I feel that makes it pair well with Amsi Pro.</p>
<p><strong>Thanks for reading!</strong> It\u2019s a personal goal to blog more this year and share some of the things I\u2019ve learned over the past few, so this should just be the first of many new posts in the new year. Happy 2018!</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/pantone-40caa47d.js
  var pantone_40caa47d_exports = {};
  __export(pantone_40caa47d_exports, {
    default: () => Pantone,
    metadata: () => metadata20
  });
  var metadata20, Pantone;
  var init_pantone_40caa47d = __esm({
    ".svelte-kit/output/server/chunks/pantone-40caa47d.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      init_SideNote_5c625ecb();
      metadata20 = {
        "title": "Pantone, Color, and What I Wish I Had Known Sooner as a Designer",
        "date": "2015-04-01",
        "updated": "2021-01-19",
        "categories": ["design", "opinion"],
        "coverImage": "ColorPost-4.jpg",
        "coverWidth": 35,
        "coverHeight": 22,
        "excerpt": "One of the most difficult things for me to learn in my transition from the classroom to a professional branding agency was how to properly handle color output. So I decided to write this post in the hope of saving you some from some of the pitfalls that I failed to avoid."
      };
      Pantone = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>One of the most difficult things for me to learn in my transition from the classroom to a <a href="${"http://dday.com"}" rel="${"nofollow"}">professional branding agency</a> was how to properly handle color output. Sure, I learned in my classes how to open the swatch palette and find the Pantone swatch I wanted, but how to properly utilize that swatch and ensure its consistency across all print and web mediums\u2014this was something new to me.</p>
<p>Don\u2019t get me wrong; I had great teachers. But little in a classroom environment compares with the task of creating a comprehensive logo and stationery package for a real-world client. (Plus, the print overview course at my school was an elective that I didn\u2019t\u2026er, elect.)</p>
<p>Trust me: it\u2019s no fun having to redo 300 logos because you didn\u2019t get the colors exactly right. So I decided to write this post in the hope of saving you some from some of the pitfalls that I failed to avoid.</p>
<h2 id="${"an-explanation-of-spot-colors"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#an-explanation-of-spot-colors"}"><span class="${"icon icon-link"}"></span></a>An explanation of spot colors</h2>
<p>Let\u2019s refresh ourselves on the printing process.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Even the best process printers are mixing inks on the fly to create a limited range of color, and that can often result in\xA0inconsistency.
`;
          }
        })}
<p>As you probably know, most color printers create color by mixing cyan, magenta, yellow and black inks. This is called CMYK, 4-color, or \u201Cprocess\u201D printing (and by the way, the K in CMYK stands for \u201Ckey,\u201D as the black color plate was once referred to as the key plate, in case you were wondering). Cyan plus magenta equals blue, magenta plus yellow equals red, and on and on. CMYK is very popular because it\u2019s cheap, and most colors can be recreated decently within the process printing color range, also known as a \u201Cgamut.\u201D</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `Some printers add extra inks to the standard CMYK\u2014most commonly a light cyan and a light magenta, but sometimes others\u2014for better color reproduction, especially in photos. If you&#39;re serious about home printing, a 6- or 8-color printer can be a very good investment.) But regardless, there is a limit to the color precision of process printing. Even the best process printers are mixing inks on the fly to create a limited range of color, and that can often result in inconsistency.
`;
          }
        })}
<p>That\u2019s where the Pantone Matching System, called just Pantone or PMS for short, comes in.</p>
<p>Pantone inks are special inks that are each created prior to printing.</p>
<p>Inks such as this are called \u201Cspot\u201D colors. They aren\u2019t combinations of cyan, magenta, yellow and/or black created during printing; they\u2019re precisely and individually mixed beforehand, kind of like paint. Spot colors are also like paint in that they are applied by the printer in a flat uniform layer, as opposed to the tiny halftone dots created by more traditional printing methods like CMYK. This makes spot colors much, much more consistent than process color.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Pantone inks are special inks that are each created prior to\xA0printing.
`;
          }
        })}
<p>Think about it this way: if you were going to paint a wall in your house green, which would create a more consistent result\u2014buying a bucket of cyan paint and a bucket of yellow paint and mixing them together as you went, or just buying green paint to begin with?</p>
<p>The latter, obviously. That\u2019s why spot colors are so great.</p>
<p><strong>There are drawbacks to spot color printing, however.</strong></p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `In short, spot color printing is the best way to ensure color accuracy and a high-quality print, but because of its nature, it\u2019s difficult and often\xA0expensive.
`;
          }
        })}
<p>Most pertinently, spot colors each require their own ink well during printing. Let\u2019s say you have a project that you want to print in standard CMYK, except that your client wants their two-color logo printed with the two appropriate spot colors. That would make this a six-color job; cyan, magenta, yellow and black plus the two specified spot colors equals six. So unless your printer has two extra spots for ink (and it almost certainly doesn\u2019t), this unfortunately means that the job will need to be handled by a professional print shop\u2014and for that matter, will probably not be cheap.</p>
<p>In short, spot color printing is the best way to ensure color accuracy and a high-quality print, but because of its nature, it\u2019s difficult and often expensive. Even large companies usually reserve spot color printing only for the most important printed materials, or those that only require one or maybe two colors.</p>
<h2 id="${"pantone-is-more-than-spot-inks"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#pantone-is-more-than-spot-inks"}"><span class="${"icon icon-link"}"></span></a>Pantone is more than spot inks</h2>
<p>So you probably can\u2019t print actual Pantone <em>inks</em> on your own, but there\u2019s good news:</p>
<p>Each Pantone swatch in the book includes CMYK, RGB and HTML values to reproduce that swatch color as accurately as possible in standard print and onscreen applications.</p>
<p><img src="${"/images/post_images/ColorPost-2.jpg"}" alt="${"Pantone swatches include recommended CMYK, RGB and HTML values"}"></p>
<p>Always be sure to use the CMYK, RGB and/or HTML values recommended here on the Pantone swatch. Avoid converting by any other method.</p>
<h3 id="${"getting-consistent-color-without-using-pantone-inks"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#getting-consistent-color-without-using-pantone-inks"}"><span class="${"icon icon-link"}"></span></a>Getting consistent color without using Pantone inks</h3>
<p>Unless you or your client are actually shelling out the money to print spot inks, the best way to reproduce those glorious Pantone swatches as accurately as possible is to replace every spot color swatch in your document with its appropriate, Pantone-recommended CMYK swatch, found in the Pantone swatch books. (There are online resources to locate these values as well, but they may not always be 100% accurate.)</p>
<p>Why must you do this? Because spot color swatches in a design program aren\u2019t meant to be printed correctly by a process printer; they\u2019re meant to register with the printer as the proper spot color.</p>
<p>In other words, because the input doesn\u2019t match the output.</p>
<p><img src="${"/images/post_images/Swatch-Panel.jpg"}" alt="${"InDesign's swatch panel"}"></p>
<p>As shown in the image above, standard color swatches (such as the \u201CDark Red\u201D swatch) are indicated in the InDesign swatch panel by a checkered box icon to the right of the swatch name. Spot color swatches (like Pantone swatches) are indicated with a small dot icon in the same position. If you are using any spot color swatches in your document and you are not going to be printing those with true spot color inks, you <em>must</em> convert those spot color swatches and all instances of those colors in your document to standard CMYK values for best results.</p>
<p><strong>Here\u2019s what happens otherwise:</strong></p>
<p>If you send a document with spot colors to a process printer, the machine will check to see if it has spot color inks loaded up. When that check comes back negative, rather than just ignoring those colors in your document, it will automatically attempt to translate your spot colors into some combination of cyan, magenta, yellow and black ink.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Color conversion is not like converting celsius to fahrenheit or liters to gallons; it\u2019s not mathematical, and there is no perfect formula for converting any given color into a new color\xA0space.
`;
          }
        })}
<p>This is where problems arise, as whatever method seems right to the computer will often not be correct to the eye. Color conversion is not like converting celsius to fahrenheit or liters to gallons; it\u2019s not mathematical, and there is no perfect formula for converting any given color into a new color space.</p>
<p>Put another, less technical way: sending a document with spot colors through a standard 4-color process print is a little like translating the same sentence into a new language over and over. The end result might look passable, but it will almost certainly be missing the finer nuances of the original source material.</p>
<p><img src="${"/images/post_images/Screen-Shot-2015-04-01-at-11.59.07-AM.png"}" alt="${"The 'print' modal window in InDesign"}"></p>
<p>In the print popup window, select \u201Coutput\u201D on the left and see how many inks are in the ink section. If it\u2019s more than the basic four process inks, you\u2019ll want to convert your spot colors to process colors for optimal print results.</p>
<h2 id="${"if-you-want-something-done-right-youve-got-to-do-it-yourself"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#if-you-want-something-done-right-youve-got-to-do-it-yourself"}"><span class="${"icon icon-link"}"></span></a>If you want something done right, you\u2019ve got to do it yourself.</h2>
<p>This is where I went wrong as a student and as a rookie professional.</p>
<p>So we\u2019ve established that we need to change our spot colors to process colors before we send our document to print. But that\u2019s easy, right? Just switch the color panel to CMYK sliders and copy whatever values are there. They should be the same values as what\u2019s listed in the Pantone swatch book, right?</p>
<p>That\u2019s what I thought, too, but I was very wrong.</p>
<p><img src="${"/images/post_images/Screen-Shot-2015-04-01-at-12.02.15-PM.png"}" alt="${"The InDesign color panel, showing Pantone 132 C"}"></p>
<p>Here\u2019s the color panel with a Pantone swatch selected.</p>
<p><img src="${"/images/post_images/Screen-Shot-2015-04-01-at-12.02.28-PM.png"}" alt="${"The InDesign color panel, showing the color conversion menu options"}"></p>
<p>If you open the panel menu and change the color to CMYK\u2026</p>
<p><img src="${"/images/post_images/Screen-Shot-2015-04-01-at-12.02.37-PM.png"}" alt="${"The InDesign color panel, showing the newly converted and incorrect CMYK values"}"></p>
<p>\u2026you will not end up with the correct CMYK values for your Pantone swatch.</p>
<p>Changing the document color mode and/or the color mode in the color panel of a design program will <em>NOT</em> change a spot color to the appropriate CMYK, RGB or HTML value. <em>You must get those from the Pantone swatch book and enter them manually.</em> (There are easy ways to do this using the tools in the swatch panel, but I won\u2019t go into that here.)</p>
<p><img src="${"/images/post_images/20150401_142813-300x206.jpg"}" alt="${"A Pantone book swatch, detailing RGB, CMYK, and HTML values"}"></p>
<p>Take the example in the above image: the recommended CMYK formula for Pantone 132 C is 9/38/100/32. That\u2019s <em>very</em> far from the values that InDesign dialed up for me in the color panel in the screenshot before that. (A telltale sign of improperly converted CMYK swatches is that they involve decimal points, e.g., the 13.04% black shown in the color panel screenshot above. No Pantone swatch\u2019s recommended CMYK value ever calls for decimals.)</p>
<h2 id="${"coated-or-uncoated"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#coated-or-uncoated"}"><span class="${"icon icon-link"}"></span></a>Coated or Uncoated?</h2>
<p>You may have noticed every Pantone swatch has a suffix, usually either \u201CC\u201D or \u201CU\u201D (though there are others). These two initials stand for coated and uncoated, respectively, and indicate the type of paper for which the swatch is best suited.</p>
<p>You may have also noticed that in general, when you print something on uncoated paper\u2014say for example cheap office copy paper, or that nifty artsy craft paper\u2014your colors and images tend to come out darker than they do when you use a smooth or glossy stock.</p>
<p>That smoother paper is \u201Ccoated\u201D stock, and its smoothness allows ink to sit neatly on the surface of the paper. This helps the ink display its hue and brightness better than uncoated paper. (This is why photos are usually printed on high gloss paper.)</p>
<p><em>Uncoated</em> stock, on the other hand, absorbs ink. No matter how white the actual paper is, things printed on uncoated stock tend to darken as the ink sinks below the surface.</p>
<p><strong>So how can you ensure that the same base color printed to both stocks will still be consistent?</strong></p>
<p>Compare the coated and uncoated versions of the same Pantone swatch, such as Pantone 186 C and Pantone 186 U below. (Fun fact: that\u2019s official Husker red. Know your audience.) You\u2019ll notice that the uncoated swatch is a bit lighter. This is because of the darkening that occurs when printing on uncoated stock. The same Pantone spot color will look a bit different on coated and on uncoated stock.</p>
<p><img src="${"/images/post_images/ColorPost-1-1024x316.jpg"}" alt="${"Pantone swatches of 186 C and 186 U, showing the uncoated version is noticeably lighter than the coated version."}"></p>
<p>Uncoated swatches (such as the right swatch in the image above) tend to be slightly lighter than coated (left) to offset the natural darkening effect that uncoated paper has. Notice that the CMYK values are all lower.</p>
<p>So if, for example, your brand color is Pantone 109 (bonus factoid: that\u2019s the yellow I\u2019m using on this site), and you\u2019re trying to mimic the look of the Pantone 109 spot color on coated stock, use the values from the Pantone 109 C swatch. Likewise, if you want to mimic how Pantone 109 looks when uncoated stock is the final destination, use the CMYK (or RGB/HEX) value from the Pantone 109 U swatch.</p>
<p>[<strong>EDIT: It\u2019s worth noting, as I left out of the original version of this post:</strong> the actual Pantone ink formula for a coated swatch will be exactly the same as the ink formula for an uncoated swatch. The CMYK, RGB and all previews will be different between the two, because they\u2019ll be designed to match the <em>result</em> of printing that specific spot color formula on the given paper type, but the actual spot colors are identical. They will, however, inevitably vary; you can\u2019t expect to print one ink on two different kinds of paper and have them look identical. Therefore, if you\u2019re looking for the same literal color to be printed on both coated and uncoated stocks identically, it may be best to try to manually match swatches, not rely on the same Pantone number for both applications. Thanks to Dave for mentioning this to me in the comments below!]</p>
<p>[Additional edit: this site has been moved off WordPress, so there are no longer comments. You live on in infamy, Dave.]</p>
<h2 id="${"dammit-gamut"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#dammit-gamut"}"><span class="${"icon icon-link"}"></span></a>Dammit, gamut</h2>
<p>Have a look through a Pantone swatch book and you\u2019ll notice each individual swatch has two side-by-side samples. The left sample is printed with true Pantone ink (which, by the way, is why Pantone books are so expensive; printing hundreds of spot colors is no cheap or simple task). The right sample, meanwhile, is appended with a \u201CP,\u201D indicating it\u2019s printed with process color.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `CMYK has a limited gamut (color range) and simply cannot reproduce all colors with 100%\xA0accuracy
`;
          }
        })}
<p>You\u2019ll see that these side-by-side samples of spot color and process color are not always an exact match, with the degree of discrepancy varying from swatch to swatch. This is mostly because CMYK has a limited gamut (color range) and simply cannot reproduce all colors with 100% accuracy, so this is not a foolproof system. Also, as mentioned earlier, spot colors print a solid layer of ink, while process printing creates color with halftone dots. Still, the values listed on these Pantone swatches are generally your best bet for at least getting as close as possible.</p>
<p><img src="${"/images/post_images/ColorPost-3-1024x611.jpg"}" alt="${"The same swatch in PMS and CMYK can come out very different due to gamut restrictions"}"></p>
<p>Due to the limitations of the CMYK gamut and halftone printing, some colors will be more consistent than others when translated from Pantone.</p>
<p>When choosing colors for a client, I often try to find Pantone swatches with as little discernible difference between the spot and process sample as possible, since most clients will rarely (if ever) be printing with a true Pantone spot color ink.</p>
<p>One tip worth noting: a CMYK value that has at least one ink at or near 100% will usually give you a richer and more consistent process color output than a swatch with process colors all at low or mid values.</p>
<h2 id="${"ok-so-what-about-rgb-and-html-color"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#ok-so-what-about-rgb-and-html-color"}"><span class="${"icon icon-link"}"></span></a>OK, so what about RGB and HTML color?</h2>
<p>The RGB and HTML values accompanying each Pantone swatch are the values you should use for digital media\u2014for example, using a Pantone color in an onscreen presentation or as a color for a website.</p>
<p><strong>A quick refresher on RGB vs. CMYK</strong></p>
<p>RGB is the color mode of virtually every electronic display, from your phone to your computer monitor and probably your TV, and it is effectively the opposite of CMYK. In process print, the paper starts white and brightness is subtracted with colored ink until eventually you reach black; conversely, in RGB, the background of a display is black by default, and colored light is added until eventually white is created.</p>
<p>HTML (also called HEX) is exactly the same as RGB. They\u2019re the same thing; HTML/HEX just uses a different method of entering the color values. (Hex is short for hexadecimal, a digital numbering system that includes 16 basic single-digit numbers rather than 10.)</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `\u2026deep, dark colors can be an issue in RGB since by default there\u2019s always at least a little bit of light creating and illuminating the colors your eye perceives on a backlit screen. Conversely, bright whites and neons tend to be problematic in the world of paper and ink, where adding color necessarily means darkening to a certain\xA0degree.
`;
          }
        })}
<p>RGB/HTML/HEX has a different gamut from CMYK/4-color/process, and while the two mostly overlap, there is still a narrow range of specific colors that can be printed but which cannot displayed accurately onscreen and vice versa. For example, very deep, dark colors can be an issue in RGB since by default there\u2019s always at least a little bit of light creating and illuminating the colors your eye perceives on a backlit screen. Conversely, bright whites and neons tend to be problematic in the world of paper and ink, where adding color necessarily means darkening to a certain degree. Also, this is a good point to mention that you cannot actually print white using a standard printer, since there\u2019s no way to mix colored inks together and create white. Anything you designate as white in your document will just be the plain paper color.</p>
<p>(Print and screen also have different resolutions, with print generally being much higher, but that\u2019s another topic altogether.)</p>
<p><strong>What this all means</strong></p>
<p>If you want to mimic, for example, Pantone 109 C onscreen, you should input the RGB or HTML value from the Pantone 109 C swatch. What you <em>shouldn\u2019t</em> do is pick a Pantone spot color swatch and then export that in a jpeg, or use the eyedropper tool or something like that. Again, this takes precise color control out of your hands and leaves it to the assumptions of a computer algorithm. <em>Always</em> use the values on the Pantone swatch.</p>
<p>Note that just because you manually set your swatch\u2019s CMYK value to what\u2019s on the Pantone swatch doesn\u2019t mean the RGB is correct, too. To the contrary; as I mentioned earlier, there\u2019s no precise way to convert colors from one color space to another, so if your color is correct in one color space, it\u2019s wrong in the other. Calibrate for your intended purpose. And remember that to properly output RGB color, your entire document should be set to RGB color mode.</p>
<h2 id="${"what-to-provide-to-your-clients"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-to-provide-to-your-clients"}"><span class="${"icon icon-link"}"></span></a>What to provide to your clients</h2>
<p>This depends somewhat on the client and the intended use, but in general, if you and/or your client are serious about accurate and consistent color reproduction, you should be providing your client with a suite which includes every permutation of their logo dialed up in each of these color modes (and with multiple file types for each):</p>
<ul><li>Pantone Coated</li>
<li>Pantone Uncoated</li>
<li>CMYK with values from the coated swatch</li>
<li>CMYK with values from the uncoated swatch</li>
<li>RGB (I recommend the value from the coated swatch)</li>
<li>White/reversed</li>
<li>Black</li></ul>
<p><strong>A note about black and white</strong></p>
<p>White is easy. It\u2019s all colors at max in RGB, and all colors at zero in CMYK. Even the computer won\u2019t mess that up. But black, on the other hand, works a little differently.</p>
<p>If you dial up black in RGB mode, you\u2019ll get a slightly different black than you would if you hit the black swatch while in CMYK color mode. RGB black is 0/0/0; that\u2019s simple. No light = black. But in CMYK, if you try to do the opposite and crank up all four process inks to 100% each, you <em>will</em> get a very rich black (the one called \u201CRegistration\u201D in InDesign\u2019s swatch panel), but you\u2019ll also waste a <em>ton</em> of ink if you max out every color in your printer to create black.</p>
<p>I could go further into this, but for now, just know that standard CMYK black is dialed in as 0/0/0/100, and you should generally just go with that for things like black body copy. You can make your blacks darker and richer by mixing the four process colors if you so choose, but at the expense of more inks being used on every single instance of black coloring.</p>
<p><strong>So does this mean that I should give my client two sets of black files?</strong></p>
<p>If you want to be incredibly picky, you can. But it\u2019s generally safe to assume that a client\u2019s only use for a black logo is in print. There isn\u2019t any restriction on color in onscreen media\u2014no cheap print jobs, no costly ink, no black-and-white newspaper ads\u2014so it\u2019s probably ok to only make black logos using whatever CMYK black formula you settle on.</p>
<h2 id="${"great-i-read-this-whole-thing-so-now-my-colors-will-always-match-perfectly-right"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#great-i-read-this-whole-thing-so-now-my-colors-will-always-match-perfectly-right"}"><span class="${"icon icon-link"}"></span></a>Great! I read this whole thing, so now my colors will always match perfectly, right?</h2>
<p>Well\u2026in a word, no.</p>
<p>Properly utilizing Pantone colors is your best chance at fighting color discrepancy, yes. But this should be considered more of a loose guide to a journey with many variables than any guarantee of success.</p>
<p>The fact is, every printer is different. You could send the same file to ten different printers and get ten slightly different results\u2014or even use the same printer all ten times and wind up with variances.</p>
<p>All paper is different, too, and paper and ink are both sensitive; conditions like temperature, humidity, light, and even the mere weight of the paper can affect printing results. But even a perfect process printer in perfect conditions couldn\u2019t replicate every single color the eye can perceive with 100% accuracy; that\u2019s impossible. And even if it weren\u2019t and all your print materials <em>were</em> perfectly matched, every screen in the world would still be different, capable of being modified to display color differently and to be brighter or dimmer than the one you\u2019re looking at.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Color isn\u2019t a precise studio recording you can play back at will; it\u2019s an ongoing live\xA0concert.
`;
          }
        })}
<p>Put bluntly, there is no true perfection in color reproduction. You won\u2019t achieve it. Color isn\u2019t a precise studio recording you can play back at will; it\u2019s an ongoing live concert. The same notes may be played on the same instruments night after night, but the production is always unique to some varying degree.</p>
<p>If color is extremely important to you, your only solution may be testing and tinkering over and over and over until you finally get acceptably close to the results you desire. But hopefully, now you have the tools to avoid some of the pitfalls along that journey, to get as close as you can, and to explain to clients, when necessary, how that whole process works.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/profit-is-not-a-value-97b16a49.js
  var profit_is_not_a_value_97b16a49_exports = {};
  __export(profit_is_not_a_value_97b16a49_exports, {
    default: () => Profit_is_not_a_value,
    metadata: () => metadata21
  });
  var metadata21, Profit_is_not_a_value;
  var init_profit_is_not_a_value_97b16a49 = __esm({
    ".svelte-kit/output/server/chunks/profit-is-not-a-value-97b16a49.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      metadata21 = {
        "title": "Profit is Not a Value",
        "date": "2015-08-05",
        "updated": "2020-05-19",
        "categories": ["opinion", "personal"],
        "coverImage": "money.png",
        "coverWidth": 8,
        "coverHeight": 5,
        "excerpt": "Any executive or business owner will say their company values integrity, and virtually every company claims that they reward and value their employees exhibiting their brand values. But is that really accurate?"
      };
      Profit_is_not_a_value = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>Working at a branding agency, you frequently find yourself in preliminary meetings where people describe their organization to you. \u201CWhat makes you different?\u201D is the question at the heart of branding and marketing. And whether the organization in question is a nonprofit, a Fortune 500 company or a local startup, the people at the head of it always have very specific ideas about what makes their particular outfit different from any other.</p>
<p>(Whether these ideas are original is another matter\u2014\u201CIntegrity\u201D is such a\xA0popular word in these conversations that it\u2019s immediately\xA0rejected as soon as it\u2019s spoken. Phrases like \u201Cwe put service first,\u201D or \u201Cwe have a commitment to excellence\u201D are so similarly generic as to be rendered meaningless by their ubiquity. What organization <em>wouldn\u2019t</em> say those things?)</p>
<p>But that\u2019s ok; we as designers, branding agencies, etc. wouldn\u2019t have jobs if everybody already knew all about the unique strengths and weaknesses of their own brand and how to ideally leverage those qualities. We\u2019re here because clients need an outside, more objective point of view; an expert.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Phrases like \u201Cwe put service first,\u201D or \u201Cwe have a commitment to excellence\u201D are so similarly generic as to be rendered meaningless by their ubiquity. What organization wouldn\u2019t say those things?
`;
          }
        })}
<p>One of the things I love about where I work and the process we employ is that\xA0these conversations\xA0are not by far the end of our discovery\u2014nor should they\xA0be for any agency that takes branding seriously. <a href="${"http://dday.com"}" rel="${"nofollow"}">David Day | Associates</a>\u2019\xA0brand process (at the risk of sounding like too much of a company man) can often take weeks or even months of intensive research, interviews, surveys, workshops, roundtables and market exploration. All of this takes place at every level; stakeholder, consumer, competitor, market peers and those completely outside the brand\u2019s hemisphere.</p>
<p>This practice certainly isn\u2019t unique to dda (though most branding agencies have\xA0honed and personalized their\xA0approach to it, ours\xA0included), but the goal and result of this is the distillation\xA0of\xA0<em>brand values:</em>\xA0a collection of words or phrases painstakingly extracted from this process which form\xA0the central brand identity. These values are a mantra of sorts, a kind of brand code, refining and solidly defining\xA0why the\xA0organization\xA0exists, how it does everything it does and will go about\xA0operating in the future. Some companies (and the agencies that brand them) have other names for the brand values, but the meaning is the same, and virtually every company on the planet\u2014especially the larger and more successful ones\u2014have and embrace them.</p>
<p>If done well and researched carefully, the words and phrases that emerge from the branding process form a cohesive identity. These values will be personal, meaningful and unique.</p>
<p>For example, below are the ten core values of <a href="${"http://www.zappos.com/"}" rel="${"nofollow"}">Zappos</a>:</p>
<ol><li>Deliver WOW Through Service</li>
<li>Embrace and Drive Change</li>
<li>Create Fun and A Little Weirdness</li>
<li>Be Adventurous, Creative, and Open-Minded</li>
<li>Pursue Growth and Learning</li>
<li>Build Open and Honest Relationships With Communication</li>
<li>Build a Positive Team and Family Spirit</li>
<li>Do More With Less</li>
<li>Be Passionate and Determined</li>
<li>Be Humble</li></ol>
<p>That\u2019s great, isn\u2019t it? That list <em>sounds</em> like Zappos. It <em>feels</em> like their brand feels. You get a sense of what that organization is all about and even what their workplace culture might be like just\xA0from that tiny list. And that\u2019s the whole point; this is the beating heart of the brand.</p>
<p>It\u2019s not uncommon for executives to commission\xA0posters, mugs and mousepads with the brand\xA0values on them. In the offices of a company that\u2019s been through this process, ideally, everybody from the CEO on down makes their business decisions based on their alignment with these values, HR rewards employees for exhibiting these values in their everyday work, and the success of the company and its employees is measured solely against them.</p>
<p><em>Deep breath.</em></p>
<p>But\u2026that\u2019s not often the case, is it?</p>
<h2 id="${"where-brands-fall-apart"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#where-brands-fall-apart"}"><span class="${"icon icon-link"}"></span></a>Where Brands Fall Apart</h2>
<p>Here\u2019s where I\u2019m going with this: that company I just described doesn\u2019t really seem to exist in reality most of the time, does it? Which begs the question:</p>
<p><em>If this sort of holistic\xA0dedication\xA0to brand values is\xA0so common in theory, why is it so rare in practice?</em></p>
<p>Just as any\xA0executive or business owner will\xA0<em>say</em>\xA0their company values integrity (and quality and service, of course), so virtually every company\xA0<em>claims</em> that they reward and value their employees exhibiting their brand values.</p>
<p>But is that really accurate?</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `If this sort of holistic dedication to brand values is so common in theory, why is it so rare in practice?
`;
          }
        })}
<p>I\u2019ve heard of a lot of CEOs being fired for failing to turn a profit, just as I\u2019m sure you have. There are countless examples of the exit door swinging open rapidly\xA0for executives who dropped shareholder prices or who initiated plans, programs and products that weren\u2019t sufficiently fiscally successful.\xA0If you want to lose your job, there\u2019s no surer way than to lose your\xA0company some money.</p>
<p>So where are all of the CEOs, executives and managers who lost their jobs for failing to adequately exhibit and execute the brand\u2019s core values?</p>
<p>To take the example above, if you work at Zappos, hopefully somebody will take notice if you\u2019re not pursuing growth and learning (#5), or if you are not helping to build a positive team and family spirit (#7). But whether or not that happens in reality (and I can\u2019t speak to that particular company\u2019s culture either way), I feel confident they\u2019ll notice and respond quickly if you\u2019re costing the company money.</p>
<p>Sure, the point of business is to make money, but if these brand\xA0values are really supposed to inform everything that a company\xA0does, shouldn\u2019t the question at least be asked occasionally:\xA0<em>does profit ever conflict with our\xA0values</em>? What if the employee or manager who\u2019s losing the money is doing so in the name of upholding the brand values?</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Sure, the point of business is to make money, but if these brand values are really supposed to inform everything that a company does, shouldn\u2019t the question at least be asked occasionally: does profit ever conflict with our values?
`;
          }
        })}
<p>There are many instances where this exact thing does happen; we just don\u2019t tend to think of it in this light. For example: a business that says it puts people first will lay off workers in a location that isn\u2019t sufficiently profitable even when there were other options available; a company that claims to value family above all else will either pay its employees too little to afford child care or demand too many hours to make raising children viable; a company that says it values innovation will try to guard its own research from other innovators for fear of losing dollars; and a business that supposedly takes pride in its country, state and local community will move offshore to avoid taxes. Hell, I\u2019ve even heard people in healthcare argue against treating patients in desperate need if they can\u2019t pay.</p>
<p>All of this is invariably done for one central, core, defining purpose: profit.\xA0It\u2019s the first option in the flowchart of modern capitalism:\xA0</p>
<p><em>Can you make money?</em>\xA0&gt; Yes &gt; <em>Make money.</em> [End of chart]</p>
<p>So this leaves us in the position of accepting one of two uncomfortable realities:</p>
<ol><li>Companies lie about their values;</li>
<li>Companies tell the truth about their values, but profit is also one, and it\xA0trumps the rest.</li></ol>
<p>In either of the similar realities\xA0above, we\u2019re forced to ask what purpose and\xA0legitimacy these brand values actually hold. It\u2019s almost insultingly\xA0easy to find a product or service advertising something like, \u201CWe put quality and integrity at the heart of all we do.\u201D And we buy it (figuratively and literally). But if that exact same product or service said \u201CWe put profit at the heart of all we do,\u201D we\u2019d flip it the bird and walk away\u2014even though we all know deep down that if every company were being honest, almost every\xA0piece of corporate business communication\xA0would say this.</p>
<p>This is a problem. How do we change this behavior?</p>
<p>As always, it\u2019s up to you, consumer. Vote with your dollars. It\u2019s time to reward companies that truly live out their brand values and put those before their own profit margins.</p>
<p>It\u2019s up to you,\xA0employees, to raise your voice and blow the proverbial whistle when you see companies contradicting their own values.</p>
<p>And it\u2019s up to you,\xA0bosses, managers, presidents and CEOs,\xA0to put the health of your brand ahead of the health of your shareholders\u2019 wallets. Money\u2019s nice, but it\u2019s nothing more than a means to an end. And if you\u2019re sacrificing good people on the way to that end, then it isn\u2019t worth it.</p>
<p>The best way to improve your product,\xA0service,\xA0or whatever it is that your organization offers is to invest in the people creating it. And\xA0<em>that</em> is often completely counterintuitive to investing in profit.</p>
<p>Profit is not a value.</p>
<p>It\u2019s up to all of us to stop acting like it is.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/the-five-things-i-wish-somebody-had-told-me-as-a-design-student-e793bf01.js
  var the_five_things_i_wish_somebody_had_told_me_as_a_design_student_e793bf01_exports = {};
  __export(the_five_things_i_wish_somebody_had_told_me_as_a_design_student_e793bf01_exports, {
    default: () => The_five_things_i_wish_somebody_had_told_me_as_a_design_student,
    metadata: () => metadata22
  });
  var metadata22, The_five_things_i_wish_somebody_had_told_me_as_a_design_student;
  var init_the_five_things_i_wish_somebody_had_told_me_as_a_design_student_e793bf01 = __esm({
    ".svelte-kit/output/server/chunks/the-five-things-i-wish-somebody-had-told-me-as-a-design-student-e793bf01.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      metadata22 = {
        "title": "The Five Things I Wish Somebody Had Told Me as a Design Student",
        "date": "2016-02-21",
        "updated": "2021-01-19",
        "categories": ["design", "personal", "opinion"],
        "coverImage": "what-i-wish.png",
        "coverWidth": 48,
        "coverHeight": 29,
        "excerpt": "Your worst instructor as a design student will lay out clear goals and expectations which will not change; this is not a given with clients."
      };
      The_five_things_i_wish_somebody_had_told_me_as_a_design_student = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>I recently had the privilege of attending <a href="${"http://www.meetthepros.org/2016/"}" rel="${"nofollow"}">Meet the Pros 2016</a> and addressing multiple small design student groups in roundtable discussions focused on the question: what do you wish you would have known about being a professional while you were still a design student?</p>
<p>I was at Meet the Pros myself two years ago, and it was a seminal experience in my professional path. I still flip through the small notebook in which I keep notes, quotes and advice that I wrote down during that two-day conference. And while I\u2019m technically not a full-time graphic design professional anymore (I still freelance, but my focus is more diverse), it still got me thinking: what <em>have</em> I learned in the past two years? What would I have benefitted from knowing as my two-years-younger self?</p>
<p>Here\u2019s what I answered, and what I told the design students I spoke to last Tuesday. It was fun to think about and write for me; hopefully it\u2019s helpful for you in some way as well.</p>
<h3 id="${"being-a-great-person-is-just-as-important-as-having-a-great-portfolio"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#being-a-great-person-is-just-as-important-as-having-a-great-portfolio"}"><span class="${"icon icon-link"}"></span></a>Being a Great Person is Just as important as Having a Great Portfolio</h3>
<p>I\u2019ve written about this topic before, but I feel it bears repeating: we\u2019re reminded constantly as design students that the goal of everything we\u2019re doing is to come out of our program with an amazing portfolio. That portfolio, of course, will (hopefully) get us a job. And we have the message drilled into our heads on an almost daily basis: <em>a bad portfolio can cost you a job that you might have otherwise gotten</em>.</p>
<p>But not enough attention is paid to the other side of that coin, in my opinion. An important message gets lost in all the talk of a perfect book full of perfect projects: when it all comes down to it, an employer can\u2019t hire your portfolio; they have to hire <em>you</em>. And <em>you can cost your portfolio a job it might have otherwise gotten</em>.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `When it all comes down to it, an employer can\u2019t hire your portfolio; they have to hire you. And you can cost your portfolio a job it might have otherwise\xA0gotten.
`;
          }
        })}
<p>I was in a Q&amp;A session recently with Dusty Davidson, one of the founders and owners of <a href="${"http://getflywheel.com"}" rel="${"nofollow"}">Flywheel</a>, in which somebody asked him: what should companies be looking for in a potential employee?</p>
<p>If you\u2019re not familiar with Flywheel, it\u2019s an enviable place to work. (Full disclosure: Flywheel is my current employer, but this is far from a subjective stance; Flywheel recently <a href="${"http://siliconprairienews.com/2015/10/congratulations-to-the-winners-of-the-2015-spawards/"}" rel="${"nofollow"}">won two Silicon Prairie Awards</a> for Best Culture and Startup of the Year, respectively). They\u2019re a respected company with a phenomenal culture and a highly successful product, built on a firm belief in design.</p>
<p>So one might have expected Dusty\u2019s answer to follow along those lines professionally and to sound like a checklist of r\xE9sum\xE9 items. But in a somewhat unorthodox and casually practical manner, he answered with the following three almost entirely non-r\xE9sum\xE9- and non-portfolio-related items:</p>
<ul><li><strong>Someone who is impressive.</strong> Whether that\u2019s related to their job directly or not is somewhat beside the point. Are they an impressive person in some way, whether that\u2019s their portfolio, their background, their conversation, the way they carry themselves, or some other way?</li>
<li><strong>Someone who is passionate.</strong> Again, not necessarily related to the job. Ideally, yes, you have passion for what you\u2019re doing professionally, but it could be anything. Knowing that this person is somebody who cares about something and is focused on it says a lot about them.</li>
<li><strong>Someone other people want to be around.</strong> A successful work environment, team and culture starts from there, and any hirer worth their salt knows this.</li></ul>
<p>Frankly, I wish I\u2019d been given that list two years ago. I wish somebody had told me that my portfolio wasn\u2019t the only way I could stand out, and indeed, wasn\u2019t the only way I <em>should</em> stand out. That my portfolio wasn\u2019t the one getting hired; <em>I</em> was.</p>
<p>There\u2019s a phenomenal quote that I heard from <a href="${"http://www.baileylauerman.com/us/leaders/marty-amsler/"}" rel="${"nofollow"}">Marty Amsler</a> of <a href="${"http://www.baileylauerman.com/"}" rel="${"nofollow"}">Bailey Lauerman</a> when I was at Meet the Pros: \u201CA good portfolio gets you an interview; a good attitude gets you a job.\u201D</p>
<p>Being the right person is usually at least as important as having the right portfolio. So while you\u2019re working on your book, don\u2019t forget to work on yourself, too. Be impressive. Be passionate. Be somebody other people want to be around.</p>
<h3 id="${"your-worst-instructor-is-still-better-than-any-bad-client"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#your-worst-instructor-is-still-better-than-any-bad-client"}"><span class="${"icon icon-link"}"></span></a>Your Worst Instructor is Still Better Than Any Bad Client</h3>
<p>Let\u2019s be real: we all have instructors we didn\u2019t like in school. And while sometimes that may have been for good reason, if we\u2019re honest with ourselves, a lot of the time it\u2019s because we didn\u2019t like their feedback. But whenever I hear students speak derisively of an instructor (which, it should go without saying, is something you should absolutely <em>never</em> do in any remotely professional setting), I feel compelled to let them know how good they have it right now:</p>
<ul><li>Your worst instructor sets a timeline and a deadline and sticks to it; bad clients do no such thing.</li>
<li>Your worst instructor will lay out clear goals and expectations which will not change; this is not a given with clients.</li>
<li>Your worst instructor is one person with one voice; bad clients have committee members with conflicting opinions.</li>
<li>Your worst instructor will not drop the project or refuse to contribute as needed or even to show up; a bad client may.</li>
<li>Your worst instructor is doing what they do because they believe in design in some way; bad clients do not share this belief.</li>
<li>Your worst instructor will give you feedback relevant to the project\u2019s goals and expectations, with an understanding of the design process that went into your work; bad clients will behave irrationally, emotionally, and without any reason whatsoever.</li></ul>
<p>Besides the above, speaking poorly of anyone is a surefire way to throw a giant red flag in the professional world. So just don\u2019t do it.</p>
<p>Instead, realize that your instructors are there to help you succeed. Besides, accepting and acquiescing to feedback you might not agree with is excellent practice for being a professional\u2026</p>
<h3 id="${"youre-going-to-need-thick-skin-and-zero-pride"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#youre-going-to-need-thick-skin-and-zero-pride"}"><span class="${"icon icon-link"}"></span></a>You\u2019re Going to Need Thick Skin (and Zero Pride)</h3>
<p>As noted above, real-world clients make all kinds of decisions for all kinds of reasons, many of which are irrational and likely to be against your professional advice. They will tear down your work, give you exactly the opposite of what you need, focus on the wrong things and hold with an unyielding death grip to their preconceived and baseless notions of what the final product ought to look like.</p>
<p>Don\u2019t despair; there is a lot you can do to quell this behavior. If you haven\u2019t read <a href="${"https://medium.com/@monteiro/13-ways-designers-screw-up-client-presentations-51aaee11e28c#.l238fmkt1"}" rel="${"nofollow"}">13 Ways Designers Screw Up Client Presentations</a> by Mike Monteiro (my design hero), you must do so before you <em>ever</em> give a professional presentation. Seriously; bookmark that link right now. Or just go read it instead of finishing this post. It\u2019s fine. That article is much better than this one anyway.</p>
<p>But no matter how good your research, process, rationale and work are, sometimes the client will still be wrong. Sometimes they won\u2019t be able to differentiate between something that they personally like and something that will be effective for their goals. Sometimes they will make the wrong decision even when you find the most superlatively diplomatic and persuasive ways to inform them that they are wrong. And sometimes\u2014<em>sometimes</em>\u2014you have no option but to accept that you and your client simply have irreconcilable views of the project.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Ego is self-sabotage; professionals can sniff it out for the toxin it is, and it will poison every aspect of your relationship with your\xA0clients.
`;
          }
        })}
<p>There seems to be a bit of elitism that gets built into designers on their way through school. (Design is not unique in this way, of course; many creative fields seem to instill a certain haughtiness in their recruits.) But the sooner you can jettison this baggage, the better.</p>
<p>Ego does as much good for a designer as a 20-pound pair of boots does a swimmer. It will do nothing but hold you back, both with professionals and with clients. Ego is self-sabotage; professionals can sniff it out for the toxin it is, and it will poison every aspect of your relationship with your clients.</p>
<p>Ok, I may have gone overboard with the mixed metaphors. But the point is: ego is counterproductive at best and suicidal at worst. Take pride in your work, but don\u2019t be prideful. Defend your work, but don\u2019t be defensive.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Take pride in your work, but don\u2019t be prideful. Defend your work, but don\u2019t be\xA0defensive.
`;
          }
        })}
<p>Like it or not, what we do\u2014while grounded in many objective principles and disciplines\u2014is still subjective. My view of green is different than yours and your feelings about this typeface are different than mine. Our experiences lead us to different conclusions about what we see. It\u2019s nobody\u2019s fault. Keep the end goal and target audience in mind (your client probably isn\u2019t at this point) and just move on.</p>
<h3 id="${"only-do-the-work-if-you-care-and-dont-care-about-the-money"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#only-do-the-work-if-you-care-and-dont-care-about-the-money"}"><span class="${"icon icon-link"}"></span></a>Only Do the Work If You Care (and Don\u2019t Care About the Money)</h3>
<p>It\u2019s pretty fashionable\u2014downright clich\xE9, actually\u2014to advise people to follow their passions these days (particularly in blog posts). Sure, I\u2019d give that advice to anyone, but this is about more than that. It\u2019s about aligning yourself to the right people and the right goals because <em>that\u2019s</em> what makes the work worthwhile.</p>
<p>Obviously, you probably won\u2019t have the luxury of picking your employer or your clients right out of school. But when and if the opportunity comes along to choose between making more money or doing something you care more about, my advice is to take the second option every single time.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `What you fail to realize as a poor design student is that money is a drug. And like any drug, its effect can only last so long. Then you realize that no amount of it actually changes the dismal situation you\u2019re\xA0in.
`;
          }
        })}
<p>Let me share a couple of examples from my personal experience:</p>
<p>When I was in school, I was lucky enough to land a gig doing regular contract work. I didn\u2019t care about the work itself, but the money was great and the perks were fantastic. And I loved it\u2026at first.</p>
<p>What you fail to realize as a poor design student is that money is a drug. And like any drug, its effect can only last so long. Then you realize that no amount of it actually changes the dismal situation you\u2019re in.</p>
<p>There was a time when, if that employer who was handing me contract work would have offered to hire me on full time, I would have accepted the position with open arms. But when the buzz of good pay and free soda wore off, I realized I was working for people who didn\u2019t share my values and doing work I didn\u2019t care about to further goals I didn\u2019t believe in.</p>
<p>I didn\u2019t actually <em>want</em> to be where I was or doing what I was doing, and money was comically and tragically powerless to change that.</p>
<p>This advice comes with two very important caveats:</p>
<ol><li><strong>This is <em>not</em> a license to be a lazy creative.</strong> You don\u2019t always get to do things you care about when you feel like doing them. Do your work anyway.</li>
<li><strong>Success looks different to everyone, and you need to know in advance what it looks like for you</strong>. Maybe to you, success does equal a big paycheck. But for me personally, success has almost <em>nothing</em> to do with money (and I would argue it should be that way for any designer; this isn\u2019t a career to take on if you want to retire wealthy).</li></ol>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `I didn\u2019t actually want to be where I was or doing what I was doing, and money was comically and tragically powerless to change\xA0that.
`;
          }
        })}
<p>I wound up leaving that job for one that paid literally half as well and offered even fewer hours. In effect, I made the difficult decision to take a pay cut of greater than 50% at my next internship in order to work at a smaller shop where I respected the work and aligned with the values of the people.</p>
<p>And you know what? It was unequivocally the best decision I could have made. Sure, it was tough. But I was happier, I was doing better work, and because of that, it led to things my previous position never could have.</p>
<p>Some time later, motivated by some tight financial times, I made the opposite decision. I took on the best-paying freelance project I\u2019d ever gotten even though I couldn\u2019t actually get behind the values of the client. And as you may have guessed, I was abjectly miserable. There was a point in the middle of the dozens and dozens of hours of work that I had agreed to and that I couldn\u2019t possibly outsource when I thought to myself, <em>I would actually</em> pay <em>my contract to get out of doing this work right now</em>.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Assuming your needs are met otherwise, financial deficiency is an easier burden to carry than creative\xA0despair.
`;
          }
        })}
<p>The thing is, the work itself wasn\u2019t bad. In fact, it was the kind of work that, under most other circumstances, I might have been doing just for fun. But knowing that my time and efforts were being transformed into a vehicle for furthering goals I didn\u2019t agree with for people whose values didn\u2019t align to mine sucked any hope of enjoyment out of the project. It was supposed to be freedom; it became entrapment.</p>
<p>Design is hard enough work as it is. Don\u2019t make it harder by shackling yourself to people and projects you don\u2019t care about. It\u2019s never worth it. Assuming your needs are met otherwise, financial deficiency is an easier burden to carry than creative despair.</p>
<h3 id="${"school-doesnt-prepare-you-to-manage-a-professional-workload"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#school-doesnt-prepare-you-to-manage-a-professional-workload"}"><span class="${"icon icon-link"}"></span></a>School Doesn\u2019t Prepare You to Manage a Professional Workload</h3>
<p>There\u2019s little school can do\u2014outside of becoming entirely unreasonable\u2014to prepare a design student for the timeline and workload of a professional environment. In school, you can get away with taking a worse grade or turning in a project a little late or maybe even redoing a project entirely if it doesn\u2019t go well. If you feel like playing video games instead of further perfecting your work, it\u2019s fine. You have weeks to work on it anyway most likely, and you can always revise the project before it eventually goes into your portfolio. The deadline definitely won\u2019t change. It\u2019s possible nobody outside your class will ever see the project. And besides, nobody\u2019s going to hire you based on your GPA anyway. (Trust me; nobody\u2019s once asked me.)</p>
<p>In short, the price for failure in school is relatively low, and this is absolutely not the case in the professional world.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `In short, the price for failure in school is relatively low, and this is absolutely not the case in the professional\xA0world.
`;
          }
        })}
<p>Failure in school is a continuum; failure in the professional world is an absolute. There\u2019s no bad grade and there are few revisions to be had; there are just unhappy clients, which can lead quickly to unemployment if the fault is yours.</p>
<p>The timeline is also often very different; as a professional, you may very well be working on a project that is due this afternoon when you just found out about it this morning. That project may have initially had a completely different timeline when the client suddenly decided they needed it right now. You will very likely be juggling any number of projects at once, and if you don\u2019t feel like it or would rather trade in a little quality work for some quality time, you don\u2019t often get that luxury.</p>
<p>Sometimes all your professional projects are out waiting on client feedback and you have nothing but free time. Sometimes you get all of those projects back in the same day and have to find a way to complete them all. School can only do so much to teach you to manage your downtime responsibly in order to be prepared when timelines shift and work comes flooding in. Because of my own failure to learn this (a longstanding personal downfall), I never worked as hard as a design student as I was forced to work as a professional.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `School can only do so much to teach you to manage your downtime responsibly in order to be prepared when timelines shift and work comes flooding\xA0in.
`;
          }
        })}
<p>No, not all design jobs demand insane scheduling, but some do. Hopefully you won\u2019t land at a self-serving agency where they treat their interns like batteries to be sucked of their energy and then discarded, but maybe you will for a while. Hopefully your clients stick to timelines and you can keep the flow of work smooth, but maybe not. Regardless, the kind of time management skills involved in maintaining that balance and still putting out quality work is a much more intense and focused version than school often demands.</p>
<p>It\u2019s very important to practice good time management skills before you have to learn the hard way. Trust me; I\u2019ve put in enough unhealthily late nights and torturously early mornings to know that it\u2019s way better to learn it as a student before your poor habits bite your career in the ass.</p>
<p>Hopefully I haven\u2019t scared you away from wanting to be a design professional. This post admittedly spent a lot of time dwelling on the negative, but if you avoid the pitfalls that I failed to sidestep, this can be a wondrously fulfilling career. Best of luck, design student.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/why-designers-shouldnt-remake-other-designers-logos-9be49eae.js
  var why_designers_shouldnt_remake_other_designers_logos_9be49eae_exports = {};
  __export(why_designers_shouldnt_remake_other_designers_logos_9be49eae_exports, {
    default: () => Why_designers_shouldnt_remake_other_designers_logos,
    metadata: () => metadata23
  });
  var metadata23, Why_designers_shouldnt_remake_other_designers_logos;
  var init_why_designers_shouldnt_remake_other_designers_logos_9be49eae = __esm({
    ".svelte-kit/output/server/chunks/why-designers-shouldnt-remake-other-designers-logos-9be49eae.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      init_SideNote_5c625ecb();
      metadata23 = {
        "title": `Why Designers Shouldn't "Fix" Other Designers' Logos`,
        "date": "2015-09-04",
        "updated": "2021-01-19",
        "categories": ["design", "personal", "opinion"],
        "coverImage": "Screen-Shot-2015-09-03-at-9_14_54-AM.png",
        "coverWidth": 85,
        "coverHeight": 36,
        "excerpt": "No matter how simple the end product, design is hard work. To come up with something that looks good, something people like, is at best tangential to the main point. The question is: does it succeed at meeting the project goals? And you don\u2019t know how to answer that question."
      };
      Why_designers_shouldnt_remake_other_designers_logos = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `I once had a design student read this post, and mistakenly think I was advising them against redesigning logos in an academic context. Far from it; redesign can be an excellent creative exercise for students. This post is about the rather toxic habit some in the design community have of spending a day (or an hour) tweaking a logo or brand and calling it &quot;better..
`;
          }
        })}
<p>Earlier this week, <a href="${"http://google.com"}" rel="${"nofollow"}">Google</a> unveiled their new sans-serif identity, ditching the familiar serifs\xA0for which the company has been known since its inception for a cleaner, simpler look:</p>
<p><img src="${"/images/post_images/Screen-Shot-2015-09-03-at-9_14_54-AM.png"}" alt="${"Google's new logo on its iconic homescreen."}"></p>
<p>Among the population in general, and particularly among designers, reviews have been mixed. Some herald this as a fresh new direction, perhaps <em>the</em> emblematic tech company boldly being unafraid to leave behind the conventions of the past to embrace the present and future. Others\u2026well, others thought it might have been better.</p>
<p>That\u2019s an understatement, really. Barely 48 hours had\xA0passed since the announcement\xA0when, with\xA0a cursory search of\xA0the word \u201CGoogle\u201D in <a href="${"https://dribbble.com/"}" rel="${"nofollow"}">Dribbble</a>, I came upon pages and\xA0pages full of graphic designers posting their ideas for a \u201Cfixed\u201D or \u201Cbetter\u201D version of Google\u2019s new logo. Here\u2019s just a small glance at everything that was out there (believe me\u2014there were hundreds more, and again, this was less than two days after the new identity system was announced):</p>
<p><img src="${"/images/post_images/Screen-Shot-2015-09-03-at-9.07.07-AM.png"}" alt="${"Designers scrambling to 'fix' Google's new logo"}"></p>
<p>To say that this behavior was limited to Dribbble would be inaccurate. The announcement was made on Tuesday, and before the day was even over there were slews of articles, some thousands of words long, popping up\xA0all\xA0across the internet, many of which\xA0filled with righteous indignation over Google\u2019s decision to go with something so supposedly unoriginal, plain, radically different, or just bad (in the opinion of the writer, of course).</p>
<p>Accusations cropped up. Some said Google had copied their new logo from an old Gymboree mark (<em>as though two colorful sans-serif capital Gs ought to\xA0look unmistakably distinct</em>):</p>
<blockquote class="${"twitter-tweet"}" lang="${"en"}"><p dir="${"ltr"}" lang="${"en"}"><a href="${"https://twitter.com/Gymboree"}">@Gymboree</a> &#39;s identity (1993-2000) vs.<a href="${"https://twitter.com/google"}">@google</a>&#39;s new identity (Sep 01, 2015) <a href="${"https://twitter.com/hashtag/gymbore?src=hash"}">#gymbore</a> <a href="${"https://twitter.com/hashtag/google?src=hash"}">#google</a> <a href="${"https://twitter.com/hashtag/logo?src=hash"}">#logo</a> <a href="${"https://twitter.com/hashtag/GoogleLogo?src=hash"}">#GoogleLogo</a> <a href="${"http://t.co/uf2ucAxoS1"}">pic.twitter.com/uf2ucAxoS1</a></p>\u2014 Micael Butial (@caelerz) <a href="${"https://twitter.com/caelerz/status/638926119270400000"}">September 2, 2015</a></blockquote>
<p>Others accused Google of simple unoriginality (<em>as though a few cherry-picked modern sans-serif logotypes</em> wouldn\u2019t <em>look similar when they\u2019re all shown side-by-side in black</em>):</p>
<blockquote class="${"twitter-tweet"}" lang="${"en"}"><a href="${"https://twitter.com/hashtag/creative?src=hash"}">#creative</a> <a href="${"http://t.co/u9ScnzwCbC"}">pic.twitter.com/u9ScnzwCbC</a> \u2014 Ramin Nasibov (@RaminNasibov) <a href="${"https://twitter.com/RaminNasibov/status/639022680151355392"}">September 2, 2015</a></blockquote>
<p>While still others thought it was just plain poor, like <a href="${"http://www.businessinsider.com/typography-expert-hates-googles-new-logo-2015-9"}" rel="${"nofollow"}">this typographer</a>.</p>
<p>In the case of Google, I\u2019d like to go on a small tangent and point out that Google is really playing their own game here. In terms of identity, their needs are radically different than pretty much any other company on <del>Google</del> Earth. They don\u2019t really have competitors, at least not like most brands do. Sure, there\u2019s Apple and Microsoft, but for the most part, Google has already won every game it\u2019s\xA0playing.\xA0Google is\xA0the 800 lb. gorilla; it sits wherever it wants. It doesn\u2019t need to worry much about being confused with, or looking worse than, any another company. Short of Google changing their logo to, say, a swastika, people aren\u2019t going to stop using Google products. We\u2019re still going to use\xA0google.com for searching (which everyone\xA0will still call \u201CGoogling,\u201D even if it\u2019s not technically accurate), we\u2019ll still use our gmail accounts, we\u2019ll still look to <a href="${"https://www.google.com/maps"}" rel="${"nofollow"}">Google Maps</a> any time we need directions somewhere, and on and on. Even the least plugged-in among us probably still has\xA0their life impacted by Google a dozen times a day.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Google&#39;s\xA0problem wasn&#39;t that they needed\xA0the greatest logo\xA0ever; their problem was that they needed a unifying identity system, and that problem has now been\xA0solved.
`;
          }
        })}
<p>So in terms of branding, Google doesn\u2019t really have to listen to anybody, least of all an upset\xA0designer on the internet.</p>
<p>But tangent aside, and not specific to Google: any time a new design comes out, there is bound to be discussion about whether or not that new design\u2014pardon the pun\u2014misses the mark. Sometimes this discussion will be heated. Sometimes it will even become such a cacophonous outcry that the brand behind the design decides it might be best to take a step back. (Gap, anyone? For the record: I don\u2019t think it was as bad as everyone else did. So the aborted logo redesign\xA0was plain. What is Gap, exactly? Gap sells\xA0khakis and business-casual button-ups.\xA0If that\u2019s not Helvetica in clothing form, I don\u2019t know what is.)</p>
<p>I\u2019m not necessarily saying Google\u2019s new logo is the greatest thing ever\xA0(though that\u2019s beside the point:\xA0Google\u2019s\xA0problem wasn\u2019t that they needed\xA0the greatest logo\xA0ever; their problem was that they needed a unifying identity system, and that problem has now been solved.) And I\u2019m not saying all the feedback that emerged from the design community was unwarranted or inaccurate. That typographer above makes some reasonable points. Many designers did.</p>
<p>But the problem was, they made these points and registered these reactions instantaneously and without regard for what makes graphic design more than subjective window dressing: the <em>how</em>\xA0and the <em>why</em>.</p>
<h2 id="${"emotion-vs-thought"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#emotion-vs-thought"}"><span class="${"icon icon-link"}"></span></a>Emotion vs. Thought</h2>
<p>Graphic design is a tricky thing. It\u2019s both art and science, subjective and objective. It\u2019s part left-brained rationality and part right-brained creativity. It\u2019s a merging of thought\xA0and emotion. And this is what makes reacting to graphic design such a careful balance of immediate reactions and delayed reactions.</p>
<p>When we present designs (and especially redesigns or entirely new names) to clients, we always tell them: register your immediate reactions, think about them and remember them. But don\u2019t put too much weight on them\xA0and don\u2019t let your immediate reaction kill an idea before it\u2019s had a chance to grow on you, because\u2014and this is important\u2014<strong>the human brain is wired to reject things it isn\u2019t accustomed to.</strong></p>
<p>You know why movie sequels are so popular? Because people want things that are new, but they don\u2019t like things that are unfamiliar. So it is with design; we <em>say</em> we want things to look fresh and new, but our brains really don\u2019t like anything we\u2019re unfamiliar or uncomfortable with. It\u2019s just part of human nature. That\u2019s why we lash out at new logos and new identities; like it or not, no matter how consciously aware we are of it, there\u2019s an animal part of our brain that screams out \u201CI don\u2019t like it!\u201D like a toddler\xA0refusing to try a new food.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `The human brain is wired to reject things it isn&#39;t accustomed to. You know why movie sequels are so popular? Because people want things that are new, but they don&#39;t like things that are\xA0unfamiliar.
`;
          }
        })}
<p>But fortunately for our primitive brains, time changes perception. We all have things we didn\u2019t like at first but grew to love as we came to understand them better. (For me, pretty much every one of my favorite albums is one that I didn\u2019t like at all on first listen, while most of the albums I loved right off the bat\xA0I now find completely uninteresting.) Every time Pepsi changes their logo it seems like a radical shift for a little while, but before long, it looks weird when you spot the last\xA0version\xA0in the background of a movie.</p>
<p>We\u2019ve all tried something we hated at first or met somebody we didn\u2019t like at first impression, only to realize over time that either we were wrong, our perceptions were wrong, or we\u2019ve actually changed.\xA0Design requires this type of delayed reaction. It requires you to live with it and get to know it on a deep level, not just a surface emotional reaction.</p>
<p>Emotion screams out at first impression. It\u2019s irrational and unhesitant, but it\u2019s fast.\xA0Thought takes time. It\u2019s careful and logical, but it doesn\u2019t happen quickly.</p>
<p>And that\u2019s one reason why you shouldn\u2019t be writing scathing blog posts about new logo designs or remaking them to \u201Cfix\u201D them within the first hours of their existence. But there\u2019s another, more important one:</p>
<h2 id="${"the-message-youre-sending"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#the-message-youre-sending"}"><span class="${"icon icon-link"}"></span></a>The Message You\u2019re Sending</h2>
<p>Even\xA0if you were able to immediately and completely process a new design at first glance and be ready to write a comprehensive\xA0blog post about it on first impression\xA0(and just to reiterate, you can\u2019t. But even if you could), there\u2019s still a good reason why you shouldn\u2019t.</p>
<p>If you\u2019re a designer, you undoubtedly tell your clients the same thing you were told as a design student, namely: no matter how simple the end product, design is\xA0hard work, and aesthetics aren\u2019t\xA0the whole point. To come up with something that <em>looks</em> good, something somebody\xA0<em>likes</em>, is at best tangential to the main point. We\u2019ve all chanted the mantra a thousand times: design is about more than appearances. It\u2019s about problem solving and communication. And problem solving and communication generally require days, weeks or maybe even months of intensive research, ideation, brainstorming, creation and revision.</p>
<p>Whether the result of real problem-solving\xA0design\xA0work is something anybody\xA0<em>likes</em> is beside the point. The question is, does it succeed at meeting the project goals? Does it <em>solve</em> the problem?</p>
<p>And you don\u2019t know the answer to that question.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Whether the result of real problem-solving design work is something anybody likes is beside the point. The question is, does it succeed at meeting the project goals? Does it solve the problem?
`;
          }
        })}
<p>You didn\u2019t see the brief. You weren\u2019t there for the meetings. Odds are that you have only a casual\xA0knowledge of the client in question.\xA0You didn\u2019t see all the ideas that were pitched and you weren\u2019t part of the discussion on why some failed and others succeeded. You didn\u2019t weigh the advantages and disadvantages of this color or that font. You didn\u2019t present the final iterations, you didn\u2019t hear the client\u2019s feedback, and you didn\u2019t have to find a way to merge each and every last one of\xA0those\xA0requirements and limitations into a single, cohesive entity.</p>
<p>That gives you absolutely no right to critique anything except the subjective aesthetics of the design you\u2019re seeing.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Remake somebody else&#39;s\xA0logo design all you want, but\xA0know that it&#39;s utterly meaningless, because\xA0you get to do whatever you want and the original designer\xA0didn&#39;t.
`;
          }
        })}
<p>And I\u2019m willing to bet money that you\xA0<em>hate it</em> when somebody does that to your design.</p>
<p>\u201CWell, sure I wanted to change this, but the brief required\u2026\u201D</p>
<p>\u201CYeah, I would have liked to explore typefaces more, but the budget\u2026\u201D</p>
<p>\u201CThis color definitely wasn\u2019t my first choice, but according to our audience research\u2026\u201D</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `Remaking\xA0somebody else&#39;s logo without knowledge of\xA0the full\xA0process behind it isn&#39;t design; it&#39;s practice at best, and doodling at\xA0worst.
`;
          }
        })}
<p>These are all sentences you can\u2019t hear because\xA0you get the luxury of seeing the final product without any knowledge whatsoever of how it came into existence. Remake somebody else\u2019s\xA0logo design all you want, but\xA0know that it\u2019s utterly meaningless, because\xA0you get to do whatever you want and the original designer didn\u2019t. They had deadlines, budgets, parameters, meetings, goals, briefs, revisions, concerns and loads of client feedback. All you have\xA0is a starting point that somebody else already created for you and a social platform full of people willing to click the \u201Clike\u201D button.</p>
<p>Remaking\xA0somebody else\u2019s logo without knowledge of\xA0the full\xA0process behind it isn\u2019t design; it\u2019s practice at best, and doodling at worst.</p>
<h2 id="${"dont-cheapen-design"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#dont-cheapen-design"}"><span class="${"icon icon-link"}"></span></a>Don\u2019t Cheapen Design</h2>
<p>Taking somebody else\u2019s work and toying with it is\xA0a fine exercise for somebody who\u2019s learning. But it\u2019s little more than\xA0plagiarism if you\u2019re telling\xA0an audience that\xA0this, in terms of real design, has any substantial meaning or value whatsoever.</p>
<p>When you show the world that you can supposedly take something existing and make it better in a single day, the message you\u2019re sending is, \u201Cdesign is effortless. It takes very little time, thought or energy. It\u2019s cheap, petty, subjective and\xA0shallow.\u201D You strip design\u2014and every other designer out there\u2014of their\xA0value and the respect that they deserve.</p>
<p>Don\u2019t do that. Don\u2019t cheapen what we do. Don\u2019t give the world the message that what we provide\xA0is easy, quick\xA0and mindless.</p>
<p>Design, at its best and as it ought to be, is absolutely none of those things.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/wordpress-child-theme-explanation-ffa0277c.js
  var wordpress_child_theme_explanation_ffa0277c_exports = {};
  __export(wordpress_child_theme_explanation_ffa0277c_exports, {
    default: () => Wordpress_child_theme_explanation,
    metadata: () => metadata24
  });
  var metadata24, Wordpress_child_theme_explanation;
  var init_wordpress_child_theme_explanation_ffa0277c = __esm({
    ".svelte-kit/output/server/chunks/wordpress-child-theme-explanation-ffa0277c.js"() {
      init_index_2749e1b7();
      init_PullQuote_effacfdf();
      init_SideNote_5c625ecb();
      metadata24 = {
        "title": "WordPress Child Theme Explanation and Walkthrough",
        "date": "2015-12-31",
        "updated": "2020-06-16",
        "categories": ["web", "wordpress"],
        "coverImage": "wordpress-bg-medblue.png",
        "coverWidth": 40,
        "coverHeight": 21,
        "excerpt": "When you\u2019re just starting out with WordPress, it\u2019s easy to think that you can just open up the style.css file included with your theme and begin making alterations. And that will work\u2014at least for a while\u2014but it won\u2019t be a good idea\u2026"
      };
      Wordpress_child_theme_explanation = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<p>One lesson a lot of WordPress novices learn the hard way, just like I did, is that if you want to customize anything about your theme itself\u2014whether that\u2019s editing the CSS styles, adding functionality like a custom post type, changing the header code or creating a custom page template\u2014you <em>need</em> to be using a WordPress child theme.</p>
<p>(There are of course plugins to handle all of the above tasks, and if you want to go that route instead, that\u2019s fine. I personally prefer minimizing plugins since each one active is a slight drain on page load speed and one more thing to worry abut updating, but it\u2019s a matter of personal preference.)</p>
<p>When you\u2019re just starting out with WordPress, it\u2019s easy to think that you can just make edits by opening up the main theme\u2019s included files (like style.css or header.php) and making whatever alterations you see fit. And that will work\u2014at least for a while\u2014but it won\u2019t be a good idea.</p>
<p><strong>Why? Because themes update.</strong> As improvements are made, bugs are fixed and issues are patched, your theme will most likely be altered by its author, who will push an update. At that point, you\u2019ll log in to WordPress and receive a notification that your theme has an update available, and should you click it, any custom changes you may have made to your theme\u2019s code will be overwritten, replaced with the fresh new version.</p>
<p>This leaves you in the unfortunate predicament of choosing between redoing all of your file changes every time an update is issued (which, depending on the theme, could be many times a year) or making sure you (and your clients) never update the theme at all.</p>
<p><strong>Neither of those are good choices, obviously.</strong> You need efficiency, and you need to be updating your theme(s) for optimal security and performance. But fortunately, you have a third option: create a WordPress child theme. Then all your problems are solved and the above issues can be safely and easily sidestepped!</p>
<h3 id="${"so-what-is-a-wordpress-child-theme"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#so-what-is-a-wordpress-child-theme"}"><span class="${"icon icon-link"}"></span></a><strong>So what is a WordPress child theme?</strong></h3>
<p>A WordPress child theme is kind of like an add-on extension of the main theme. A child theme borrows everything it can from its parent theme, but exists independently apart from any files you want it to share. A WordPress child theme allows you to add files to supplement those of the parent theme, taking precedent over the parent\u2019s files without the risk of being overwritten.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `A WordPress child theme is kind of like an add-on extension of the main theme. A child theme borrows everything it can from its parent theme, but exists independently apart from any files you want it to\xA0share.
`;
          }
        })}
<p>To put it in simpler terms: any time WordPress needs a theme file (say, for example, header.php), it will look inside the child theme folder for the named file. If there <em>is</em> a file by that name in the child theme\u2019s folder, it will use that file. But if not, it will look for a file by that name in the <em>parent theme\u2019s</em> folder instead, and will borrow that file from its parent theme.</p>
<p>This works perfectly for any file in the <a href="${"https://developer.wordpress.org/themes/basics/template-hierarchy/"}" rel="${"nofollow"}">WordPress template hierarchy</a>, but you might be wondering: what about my CSS?</p>
<p>In the case of our stylesheets, we can set up a child theme to use all of the parent theme\u2019s styles (because we likely chose our main parent theme in part due to its appearance and don\u2019t want to be forced to start from scratch), but <em>then</em> to load a custom child theme stylesheet <em>afterward</em>, which we can use to override and replace certain existing styles as we choose.</p>
<p>The process of setting up a child theme can seem a little intimidating, particularly if you don\u2019t spend much time in FTP or WordPress\u2019s file structure, but it\u2019s actually pretty simple. Let\u2019s walk through the steps.</p>
${validate_component(SideNote, "SideNote").$$render($$result, {}, {}, {
          default: () => {
            return `There are plugins to create child themes for you, and that\u2019s generally simpler and easier than this process. But if you\u2019d like to do it manually for full control, or if you\u2019d just like to understand what goes into a child theme better, read on.
`;
          }
        })}
<h3 id="${"step-1-create-a-new-theme-folder"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#step-1-create-a-new-theme-folder"}"><span class="${"icon icon-link"}"></span></a>Step 1: Create a New Theme Folder</h3>
<p>If your site is already up on a live server, you\u2019ll need to connect to your site via FTP in order to do this. (If you\u2019re not sure how to do that, check with your host, and if you need an FTP client, I consider <a href="${"https://panic.com/transmit/"}" rel="${"nofollow"}">Transmit</a> to be well-worth the price, though there are free options available.) In any case, you\u2019ll head to the wp-content/themes/ folder.</p>
<p>Inside that folder, you\u2019ll see a list of themes on your site, probably similar to this:</p>
<p><a href="${"/images/post_images/Screenshot-2015-12-31-11.26.45.png"}"><img src="${"/images/post_images/Screenshot-2015-12-31-11.26.45.png"}" alt="${"A WordPress child theme will most likely look like the last folder in this screenshot."}"></a></p>
<p>Here, you\u2019ll simply create a new folder and name it whatever you want your child theme to be named. Usually, this is a hyphenated version of the parent theme name, such as with \u201Cenfold\u201D and \u201Cenfold-child\u201D in the screenshot above. This naming convention exists so that anybody looking at the list of themes can immediately tell which themes rely on others, but if you\u2019d rather, the name can be whatever you want.</p>
<h3 id="${"step-2-create-a-stylecss-file"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#step-2-create-a-stylecss-file"}"><span class="${"icon icon-link"}"></span></a>Step 2: Create a style.css File</h3>
<p>Open the child theme folder you just created. Inside it, make a new file and name it \u201Cstyle.css\u201D.</p>
<p><strong>It\u2019s important that you give the file this exact name.</strong> If you\u2019re not familiar with the inner workings of WordPress: it looks for files based on their name. WordPress expects to find a style.css file in the active theme\u2019s root folder; it\u2019s programmed to know that\u2019s where to find info about a theme. So it won\u2019t automatically find and load it if it\u2019s not specifically named \u201Cstyle.css\u201D and placed inside the theme folder. (You could load it other ways, but that\u2019s just making extra work for yourself.)</p>
<p>As far as the file itself, you can either create it in your FTP client and then open it in a text editor to make changes; or you can use a text editor to create and save a style.css file locally, and then upload it afterward. It\u2019s up to you; just as long as the style.css file gets in the child theme folder, you\u2019re good.</p>
<h3 id="${"step-3-add-the-following-to-stylecss"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#step-3-add-the-following-to-stylecss"}"><span class="${"icon icon-link"}"></span></a>Step 3: Add the Following to style.css</h3>
<p>If you look at the <a href="${"https://codex.wordpress.org/Child_Themes"}" rel="${"nofollow"}">Codex entry for child themes</a>, you\u2019ll find the following snippet of code to copy and paste into your child theme\u2019s style.css file. Don\u2019t copy and paste this just yet, though; I\u2019m only giving you the full list of things you might see at the top of a theme\u2019s style.css file:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token comment">/*
 Theme Name: Twenty Fifteen Child
 Theme URI: http://example.com/twenty-fifteen-child/
 Description: Twenty Fifteen Child Theme
 Author: John Doe
 Author URI: http://example.com
 Template: twentyfifteen
 Version: 1.0.0
 License: GNU General Public License v2 or later
 License URI: http://www.gnu.org/licenses/gpl-2.0.html
 Tags: light, dark, two-columns, right-sidebar, responsive-layout, accessibility-ready
 Text Domain: twenty-fifteen-child
*/</span></code>`}<!-- HTML_TAG_END --></pre>
<p>It looks scary, but I\u2019ll let you in on a little secret: almost none of the above is actually required for your child theme to work properly. In fact, most of it is there for people who intend build a new theme and distribute it.</p>
<p><strong>If you\u2019re creating a theme to distribute publicly, you\u2019ll want to fill out every line of the above snippet as accurately as possible.</strong> But if not\u2014if this is a child theme that\u2019s only going to be used by you or your client on your site alone\u2014you can safely skip most of the above (though you should still include some of it).</p>
<p>At this point you might be wondering: isn\u2019t this just a comment? Why do I need to include it? Aren\u2019t comments supposed to be read by humans and ignored by computers?</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `WordPress finds, reads, and understands what to do with a file based on its specific name and the comments at the top of the\xA0file.
`;
          }
        })}
<p>You\u2019d be mostly right, but actually, browsers and servers <em>do</em> read comments. (Otherwise, how would they know when the comment was over?)</p>
<p><strong>In the case of WordPress files, comments are frequently used to pass WordPress information about themes and plugins.</strong> Just like the file\u2019s name is important, having the above comment snippet at the top of your style.css file is also important; it\u2019s how we can pass certain important pieces of information on to WordPress about our theme! But from a purely functional standpoint, most of that info up there is actually not crucial at all for a WordPress child theme to function.</p>
<p>In fact, if you want to save yourself the hassle, here\u2019s all you\u2019ll really need to worry about:</p>
<pre class="${"language-css"}"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token comment">/*
 Theme Name: Your Theme Name
 Template: parent-theme-name
 Text Domain: your-theme-name
*/</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Even of the above three lines, the Template line is the only one that\u2019s strictly necessary for the child theme to function, but you\u2019ll want to fill out the others too. Here\u2019s what each one does:</p>
<ul><li><strong>Theme Name:</strong> <em>The human-readable version of your child theme\u2019s name. This is what will appear in your themes list within WordPress itself. Can be anything you want, and can include capital letters and spaces. Doesn\u2019t have to be named something relative to the parent theme, but probably should be just for clarity.</em></li>
<li><strong>Template:</strong> <em>As mentioned, the only mandatory line. This should be the name of the parent theme, written exactly as its folder name is written within the themes directory. This tells WordPress where to find the parent theme files when it needs to.</em></li>
<li><strong>Text Domain:</strong> <em>The \u201Csluggified\u201D version of your theme name (in other words, your theme name without capital letters or spaces). This is how WordPress refers to your theme in code. It has to do with localization.</em></li></ul>
<p>Though the above three are the main functional pieces of the puzzle, it\u2019s still good practice to include at least the <strong>Author</strong> and <strong>Author URI</strong> lines as well, so that anybody who might be working on the site after you\u2019ve done your work can figure out where this child theme came from and whom to contact if they have any questions. <strong>Description</strong> is always nice too\u2014it\u2019s the paragraph that shows up on the Theme Details page in WordPress, so it allows you to share some added info with any admin who might be using the site. But those are optional and not related to the actual functionality of the WordPress child theme. The rest of the lines we haven\u2019t talked about hold info that\u2019s shared by theme developers when they release their themes publicly.</p>
<p>All of that is a long way to say: it\u2019s just a simple process of copying and pasting the above snippet of code to the top of your WordPress child theme\u2019s style.css file, and replacing the pertinent details with your own (and optionally deleting anything you don\u2019t need). It looks a bit complex, particularly if you aren\u2019t familiar with WordPress file comments, but it\u2019s actually very simple: just replace the part after the colon on each line with your own info!</p>
<p><strong>Now that you have a properly commented style.css file in your WordPress child theme, you can add all your CSS to it, below the opening comment!</strong></p>
<p>You should know that the CSS won\u2019t actually take effect yet, however. Later, in step 3, we\u2019re going to tell WordPress to load the parent theme\u2019s stylesheet first and our child theme\u2019s stylesheet second. This way, because of the way that CSS works, any styles that you add to your child theme\u2019s style.css file will load last, and will therefore override the parent theme\u2019s CSS so that you won\u2019t need to delete or alter anything in the parent theme\u2019s stylesheet. Huzzah! (This is assuming, of course, that the child theme\u2019s styles are of equal or greater specificity. If you\u2019re not sure what that means or if you could use a refresher on CSS specificity, <a href="${"https://css-tricks.com/specifics-on-css-specificity/"}" rel="${"nofollow"}">check this article out</a>.)</p>
<p><strong>But until we do that, our CSS in this file won\u2019t actually work.</strong> WordPress assumes we\u2019ve put our theme info at the top of our style.css file, but it <em>won\u2019t</em> assume we want to actually use it as a file for our actual CSS styling. That will come shortly, when we use functions.php to enqueue our parent theme\u2019s stylesheet, and then our child theme\u2019s.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `\u2026any styles that you add to your child theme\u2019s style.css file will load last, and will therefore override the parent theme\u2019s CSS so that you won\u2019t need to delete or alter anything in the parent theme\u2019s\xA0stylesheet.
`;
          }
        })}
<p>This way, the parent theme is free to update all it wants, but your styles remain intact and unaffected. Your site stays up-to-date and secure, while your styles stay safe from unintended alterations.</p>
<p>(Side note: if you want to create and use other stylesheets, too, you can do that; you don\u2019t necessarily need to put <em>all</em> your styles in this style.css file. But since every stylesheet has to load separately, it\u2019s generally best to use just the one CSS file unless you have a good reason not to.)</p>
<h3 id="${"optional-step-add-a-screenshot"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#optional-step-add-a-screenshot"}"><span class="${"icon icon-link"}"></span></a>Optional Step: Add a Screenshot</h3>
<p>While this step is completely optional, it\u2019s fun, and it helps your child theme feel a little more professional.</p>
<p>To give your theme an image that will appear on the theme selection screen, just save a .png inside your child theme\u2019s folder (the same place you saved the style.css file above) and name it \u201Cscreenshot.png\u201D. WordPress will try to work with pretty much any size, but an image with a 4:3 ratio works best, with the recommended resolution being 880px by 660px.</p>
<p>While this feature exists so that you can show potential theme users what their site will look like if they activate this theme, if you\u2019re working on a child theme, you can add that extra little something special by making screenshot.png your logo or your client\u2019s logo.</p>
<p><img src="${"/images/post_images/Screenshot-2016-01-17-20.11.39.png"}" alt="${"Demonstration of how a screenshot.png will look in the theme selection screen"}"></p>
<h3 id="${"step-3-create-a-functionsphp-file"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#step-3-create-a-functionsphp-file"}"><span class="${"icon icon-link"}"></span></a>Step 3: Create a functions.php File</h3>
<p>In the last couple of steps we created the style.css file for our child theme, but we still need to tell WordPress to include (or \u201Cenqueue\u201D) the parent theme\u2019s stylesheet as well as our new child theme\u2019s stylesheet, in that order.</p>
<p>In just the same way that you created a new style.css file inside your child theme\u2019s folder, you\u2019ll now create a new file named \u201Cfunctions.php\u201D in the same place, i.e., your child theme\u2019s folder. (You can create it with your FTP client and then edit it, or make it on your local machine and then upload it. Up to you.)</p>
<p>Again, however, it\u2019s critical that this file is named \u201Cfunctions.php\u201D <em>exactly</em> (mind the plural); otherwise, WordPress won\u2019t know that it\u2019s the file containing our child theme\u2019s unique functionality and won\u2019t find and run it automatically.</p>
<h4 id="${"what-is-functionsphp"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-is-functionsphp"}"><span class="${"icon icon-link"}"></span></a><strong>What is functions.php?</strong></h4>
<p>When any given WordPress theme is active, any code in that theme\u2019s functions.php file will run every time a page on that site is loaded (as will its parent theme\u2019s). So our child theme\u2019s functions.php file (<em>and</em> its parent theme\u2019s functions.php file) will load and run every time a new page loads, as long as our child theme is the active theme.</p>
${validate_component(PullQuote, "PullQuote").$$render($$result, {}, {}, {
          default: () => {
            return `You can think of functions.php a little like a custom plugin specially made for your\xA0theme.
`;
          }
        })}
<p><strong>This is true in both the WordPress admin area and the front-facing portion of the site.</strong> That\u2019s why things like styles, custom post types, navigation menus, theme features, and other \u201Calways-on\u201D bits of functionality are generally added to functions.php. You can think of functions.php a little like a custom plugin specially made for your theme.</p>
<h3 id="${"step-4-copy-the-enqueuing-function-to-functionsphp"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#step-4-copy-the-enqueuing-function-to-functionsphp"}"><span class="${"icon icon-link"}"></span></a>Step 4: Copy the Enqueuing Function to functions.php</h3>
<pre class="${"language-php"}"><!-- HTML_TAG_START -->${`<code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">function</span> <span class="token function-definition function">theme_enqueue_styles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 
    <span class="token variable">$parent_style</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'parent-style'</span><span class="token punctuation">;</span>
 
    <span class="token function">wp_enqueue_style</span><span class="token punctuation">(</span> <span class="token variable">$parent_style</span><span class="token punctuation">,</span> <span class="token function">get_template_directory_uri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/style.css'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">wp_enqueue_style</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'child-style'</span><span class="token punctuation">,</span>
      <span class="token function">get_stylesheet_directory_uri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/style.css'</span><span class="token punctuation">,</span>
      <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token variable">$parent_style</span> <span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
 
  <span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'wp_enqueue_scripts'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'theme_enqueue_styles'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p><strong>If you\u2019re not familiar with (or intimidated by) PHP, don\u2019t worry\u2014you don\u2019t have to make any changes to the above code, or even understand it, really.</strong> You just need to copy and paste it into your WordPress child theme\u2019s new, blank functions.php file. (Technically, it would be best practice to change the two instances of \u201Ctheme_enqueue_styles\u201D to reflect your custom theme name in order to avoid any potential conflicts, but it\u2019s not strictly mandatory.)</p>
<p>There are other ways to code the enqueueing of parent and child stylesheets, but this way is straight from the <a href="${"https://codex.wordpress.org"}" rel="${"nofollow"}">Codex</a>, and ensures that the child theme\u2019s stylesheet loads <em>after</em> the parent theme\u2019s (which is what we want).</p>
<p>By the way: you\u2019ll want to be sure you have the opening php tag (the first line in the snippet above) at the beginning of your functions.php file, but the closing tag at the end isn\u2019t strictly necessary, especially if you plan on adding more code later on.</p>
<p>Just make sure your style.css and functions.php files are both saved inside your child theme\u2019s main folder, then there\u2019s only one more simple step!</p>
<h3 id="${"step-5-activate-the-child-theme"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#step-5-activate-the-child-theme"}"><span class="${"icon icon-link"}"></span></a>Step 5: Activate the Child Theme</h3>
<p>You\u2019re done with file editing now. All you need to do is sign into WordPress on your site and head to Appearance &gt; Themes from the admin sidebar. You should now see the child theme you created in the list of available themes for your WordPress site (with the screenshot image showing if you took on the optional step above). Just click the \u201CActivate\u201D button and you\u2019re good to go!</p>
<p>If you previously had the parent theme active, you probably won\u2019t see any visible changes on your site. You\u2019ll notice a difference, though, when you start populating your child theme\u2019s style.css file, adding to functions.php, and/or adding custom <a href="${"https://codex.wordpress.org/Templates"}" rel="${"nofollow"}">page templates</a> to your child theme (though that\u2019s a topic for another time).</p>
<h3 id="${"thats-it"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#thats-it"}"><span class="${"icon icon-link"}"></span></a>That\u2019s it!</h3>
<p>You\u2019re done! You\u2019ve created a WordPress child theme, and can make all the changes you want to your site\u2019s appearance and functionality\u2014through style.css and functions.php, respectively\u2014without any worry of your code being overwritten when the parent theme updates. Go, you!</p>
<p>Have anything to add? Did I miss anything? Feel free to let me know.</p>`;
      });
    }
  });

  // .svelte-kit/output/server/chunks/fetchPosts-bc4b2a22.js
  var fetchPosts;
  var init_fetchPosts_bc4b2a22 = __esm({
    ".svelte-kit/output/server/chunks/fetchPosts-bc4b2a22.js"() {
      fetchPosts = async ({ offset = 0, limit = 10, category = "" } = {}) => {
        let posts;
        {
          posts = await Promise.all(Object.entries({ "../../../../routes/blog/_posts/12-things.md": () => Promise.resolve().then(() => (init_things_949a7b41(), things_949a7b41_exports)), "../../../../routes/blog/_posts/8-student-portfolio-mistakes.md": () => Promise.resolve().then(() => (init_student_portfolio_mistakes_97ac2775(), student_portfolio_mistakes_97ac2775_exports)), "../../../../routes/blog/_posts/a-new-headless-site-with-gridsome.md": () => Promise.resolve().then(() => (init_a_new_headless_site_with_gridsome_c6997bd9(), a_new_headless_site_with_gridsome_c6997bd9_exports)), "../../../../routes/blog/_posts/add-blog-comments-static-site.md": () => Promise.resolve().then(() => (init_add_blog_comments_static_site_7efb9968(), add_blog_comments_static_site_7efb9968_exports)), "../../../../routes/blog/_posts/adding-gutenberg-full-and-wide-width-image-support-to-your-wordpress-theme.md": () => Promise.resolve().then(() => (init_adding_gutenberg_full_and_wide_width_image_support_to_your_wordpress_theme_5d471a4a(), adding_gutenberg_full_and_wide_width_image_support_to_your_wordpress_theme_5d471a4a_exports)), "../../../../routes/blog/_posts/announcing-quina-my-first-app.md": () => Promise.resolve().then(() => (init_announcing_quina_my_first_app_2ec1b56e(), announcing_quina_my_first_app_2ec1b56e_exports)), "../../../../routes/blog/_posts/build-static-sveltekit-markdown-blog.md": () => Promise.resolve().then(() => (init_build_static_sveltekit_markdown_blog_50359119(), build_static_sveltekit_markdown_blog_50359119_exports)), "../../../../routes/blog/_posts/confirm-all-ids-are-unique-in-an-array-of-javascript-objects-using-map-and-sets.md": () => Promise.resolve().then(() => (init_confirm_all_ids_are_unique_in_an_array_of_javascript_objects_using_map_and_sets_2947b46d(), confirm_all_ids_are_unique_in_an_array_of_javascript_objects_using_map_and_sets_2947b46d_exports)), "../../../../routes/blog/_posts/converting-from-gridsome-to-sveltekit.md": () => Promise.resolve().then(() => (init_converting_from_gridsome_to_sveltekit_87f9ea4f(), converting_from_gridsome_to_sveltekit_87f9ea4f_exports)), "../../../../routes/blog/_posts/creating-custom-gutenberg-blocks-with-the-block-lab-plugin.md": () => Promise.resolve().then(() => (init_creating_custom_gutenberg_blocks_with_the_block_lab_plugin_6d622b1c(), creating_custom_gutenberg_blocks_with_the_block_lab_plugin_6d622b1c_exports)), "../../../../routes/blog/_posts/essential-tools-wordpress-development.md": () => Promise.resolve().then(() => (init_essential_tools_wordpress_development_2b28f9a5(), essential_tools_wordpress_development_2b28f9a5_exports)), "../../../../routes/blog/_posts/filetypes.md": () => Promise.resolve().then(() => (init_filetypes_55ad3bb8(), filetypes_55ad3bb8_exports)), "../../../../routes/blog/_posts/five-ways-to-become-a-better-designer-that-arent-design.md": () => Promise.resolve().then(() => (init_five_ways_to_become_a_better_designer_that_arent_design_bb2117e3(), five_ways_to_become_a_better_designer_that_arent_design_bb2117e3_exports)), "../../../../routes/blog/_posts/goodbye-instagram.md": () => Promise.resolve().then(() => (init_goodbye_instagram_09f06d13(), goodbye_instagram_09f06d13_exports)), "../../../../routes/blog/_posts/goodbye-wordpress.md": () => Promise.resolve().then(() => (init_goodbye_wordpress_de96e921(), goodbye_wordpress_de96e921_exports)), "../../../../routes/blog/_posts/how-to-connect-local-with-codekit.md": () => Promise.resolve().then(() => (init_how_to_connect_local_with_codekit_cf46e021(), how_to_connect_local_with_codekit_cf46e021_exports)), "../../../../routes/blog/_posts/introducing-svelte-comparing-with-react-vue.md": () => Promise.resolve().then(() => (init_introducing_svelte_comparing_with_react_vue_f7387ef5(), introducing_svelte_comparing_with_react_vue_f7387ef5_exports)), "../../../../routes/blog/_posts/lets-learn-css-variables.md": () => Promise.resolve().then(() => (init_lets_learn_css_variables_7d1d9c23(), lets_learn_css_variables_7d1d9c23_exports)), "../../../../routes/blog/_posts/new-site-new-theme-for-2018.md": () => Promise.resolve().then(() => (init_new_site_new_theme_for_2018_dcc2dfe4(), new_site_new_theme_for_2018_dcc2dfe4_exports)), "../../../../routes/blog/_posts/pantone.md": () => Promise.resolve().then(() => (init_pantone_40caa47d(), pantone_40caa47d_exports)), "../../../../routes/blog/_posts/profit-is-not-a-value.md": () => Promise.resolve().then(() => (init_profit_is_not_a_value_97b16a49(), profit_is_not_a_value_97b16a49_exports)), "../../../../routes/blog/_posts/the-five-things-i-wish-somebody-had-told-me-as-a-design-student.md": () => Promise.resolve().then(() => (init_the_five_things_i_wish_somebody_had_told_me_as_a_design_student_e793bf01(), the_five_things_i_wish_somebody_had_told_me_as_a_design_student_e793bf01_exports)), "../../../../routes/blog/_posts/why-designers-shouldnt-remake-other-designers-logos.md": () => Promise.resolve().then(() => (init_why_designers_shouldnt_remake_other_designers_logos_9be49eae(), why_designers_shouldnt_remake_other_designers_logos_9be49eae_exports)), "../../../../routes/blog/_posts/wordpress-child-theme-explanation.md": () => Promise.resolve().then(() => (init_wordpress_child_theme_explanation_ffa0277c(), wordpress_child_theme_explanation_ffa0277c_exports)) }).map(async ([path, page]) => {
            const { metadata: metadata25 } = await page();
            const slug = path.split("/").pop().split(".").shift();
            return { ...metadata25, slug };
          }));
        }
        let sortedPosts = posts.sort((a, b) => Number(new Date(b.date)) - Number(new Date(a.date)));
        if (category) {
          sortedPosts = posts.filter((post) => post.categories.includes(category));
        }
        if (offset) {
          sortedPosts = sortedPosts.slice(offset);
        }
        if (limit && limit < sortedPosts.length) {
          sortedPosts = sortedPosts.slice(0, limit);
        }
        const finalPosts = sortedPosts.map((post) => ({
          title: post.title,
          slug: post.slug,
          excerpt: post.excerpt,
          coverImage: post.coverImage,
          date: post.date,
          categories: post.categories
        }));
        return finalPosts;
      };
    }
  });

  // .svelte-kit/output/server/entries/pages/blog/category/_category_.svelte.js
  var category_svelte_exports = {};
  __export(category_svelte_exports, {
    default: () => U5Bcategoryu5D,
    load: () => load13
  });
  var css38, load13, U5Bcategoryu5D;
  var init_category_svelte = __esm({
    ".svelte-kit/output/server/entries/pages/blog/category/_category_.svelte.js"() {
      init_index_2749e1b7();
      init_fetchPosts_bc4b2a22();
      init_Main_5d179e14();
      init_PostList_093c74fc();
      init_TagList_0e1f394c();
      init_ExternalLink_29dd7148();
      css38 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}h1.h2.svelte-pf9a7g{margin:0 0 var(--wholeNote)}',
        map: null
      };
      load13 = async ({ params }) => {
        const { category } = params;
        const posts = await fetchPosts({ category });
        return { props: { posts, category } };
      };
      U5Bcategoryu5D = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { posts } = $$props;
        let { category } = $$props;
        if ($$props.posts === void 0 && $$bindings.posts && posts !== void 0)
          $$bindings.posts(posts);
        if ($$props.category === void 0 && $$bindings.category && category !== void 0)
          $$bindings.category(category);
        $$result.css.add(css38);
        return `${$$result.head += `${$$result.title = `<title>Blog | Category: ${escape(category)}</title>`, ""}<meta property="${"og:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-q6kunv"><meta name="${"twitter:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-q6kunv">`, ""}


${validate_component(Main, "Main").$$render($$result, {}, {}, {
          default: () => {
            return `<div class="${"compressed-content double-wide"}"><h1 class="${"h2 svelte-pf9a7g"}">Category: <b>${escape(category)}</b></h1>
    
    ${validate_component(PostList, "PostList").$$render($$result, { posts }, {}, {})}</div>`;
          }
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/16.js
  var __exports17 = {};
  __export(__exports17, {
    css: () => css39,
    entry: () => entry17,
    js: () => js17,
    module: () => category_svelte_exports
  });
  var entry17, js17, css39;
  var init__17 = __esm({
    ".svelte-kit/output/server/nodes/16.js"() {
      init_category_svelte();
      entry17 = "pages/blog/category/_category_.svelte-0f3d6efb.js";
      js17 = ["pages/blog/category/_category_.svelte-0f3d6efb.js", "chunks/vendor-b62d7b9b.js", "chunks/fetchPosts-731fe962.js", "chunks/preload-helper-e4860ae8.js", "chunks/Main-f748586d.js", "chunks/PostList-5ba61222.js", "chunks/TagList-bde82414.js", "chunks/ExternalLink-10e1f92c.js"];
      css39 = ["assets/pages/blog/category/_category_.svelte-540fb1e8.css", "assets/PostList-7831d634.css", "assets/TagList-413d58d5.css", "assets/ExternalLink-0287f125.css"];
    }
  });

  // .svelte-kit/output/server/chunks/RenderedPost-f392cafd.js
  var months, readableDate, css$15, Bio, Comments, css40, RenderedPost;
  var init_RenderedPost_f392cafd = __esm({
    ".svelte-kit/output/server/chunks/RenderedPost-f392cafd.js"() {
      init_index_2749e1b7();
      init_TagList_0e1f394c();
      init_store_6b7e9707();
      init_Main_5d179e14();
      months = [
        null,
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
      ];
      readableDate = (date) => {
        if (!date)
          return date;
        const splitDate = date.split("-");
        const month = months[parseInt(splitDate[1])];
        const day = parseInt(splitDate[2]);
        const year = splitDate[0];
        return `${month} ${day}, ${year}`;
      };
      css$15 = {
        code: '@charset "UTF-8";:root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.post-bio-hr.svelte-14cxfmg.svelte-14cxfmg{background:linear-gradient(to left, var(--blueToYellow))}.bio.svelte-14cxfmg.svelte-14cxfmg{font-size:0.85rem;overflow:auto;display:flex;align-items:center;align-content:center;flex-wrap:wrap}@media(min-width: 600px){.bio.svelte-14cxfmg.svelte-14cxfmg{flex-wrap:nowrap}}.bio.svelte-14cxfmg .about.svelte-14cxfmg{font-style:italic;font-family:var(--bodyFont)}.bio.svelte-14cxfmg .link-list.svelte-14cxfmg{font-family:var(--headingFont);margin:var(--quarterNote) 0 0;padding-left:1.1rem}.bio.svelte-14cxfmg .link-list li.svelte-14cxfmg{margin:0 0 0.25rem}.bio.svelte-14cxfmg .link-list li a.svelte-14cxfmg{-webkit-text-decoration-color:var(--lightGray);text-decoration-color:var(--lightGray)}.bio.svelte-14cxfmg .link-list__kofi.svelte-14cxfmg::marker{content:"\u2615 "}.bio.svelte-14cxfmg .link-list__contact.svelte-14cxfmg::marker{content:"\u{1F4E9} "}.bio.svelte-14cxfmg .link-list__more.svelte-14cxfmg::marker{content:"\u{1F481}\u{1F3FC}\u200D\u2642\uFE0F "}.bio.svelte-14cxfmg .thumbnail.svelte-14cxfmg{width:6rem;border-radius:3rem;margin:0 auto var(--quarterNote)}@media(min-width: 600px){.bio.svelte-14cxfmg .thumbnail.svelte-14cxfmg{margin:0 var(--quarterNote) 0 0}}.bio.svelte-14cxfmg p.svelte-14cxfmg{margin:0}',
        map: null
      };
      Bio = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { currentPage } = $$props;
        if ($$props.currentPage === void 0 && $$bindings.currentPage && currentPage !== void 0)
          $$bindings.currentPage(currentPage);
        $$result.css.add(css$15);
        return `<div class="${"bio-wrapper"}"><hr>
  <div class="${"bio svelte-14cxfmg"}"><img src="${"/images/bio-photo.jpg"}" alt="${""}" class="${"thumbnail svelte-14cxfmg"}" width="${"1"}" height="${"1"}">
    <div><p class="${"about svelte-14cxfmg"}">I&#39;m Ricky Januari, a frontend developer, designer, teacher, and writer. I currently live in Omaha, Nebraska, and work for Shopify as a senior frontend developer. 
      </p>
      <ul class="${"link-list svelte-14cxfmg"}"><li class="${"link-list__kofi svelte-14cxfmg"}"><a href="${"https://ko-fi.com/collinsworth"}" rel="${"external"}" class="${"svelte-14cxfmg"}">Buy me a coffee
          </a></li>
        <li class="${"link-list__contact svelte-14cxfmg"}"><a href="${"/contact?from_page=" + escape(currentPage)}" class="${"svelte-14cxfmg"}">Send me a note about this post
          </a></li>
        <li class="${"link-list__more svelte-14cxfmg"}"><a href="${"/"}" class="${"svelte-14cxfmg"}">More about me</a></li></ul></div></div>
  <hr class="${"post-bio-hr svelte-14cxfmg"}">
</div>`;
      });
      Comments = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let $theme, $$unsubscribe_theme;
        $$unsubscribe_theme = subscribe(theme, (value) => $theme = value);
        $theme === Themes.Dark ? "github-dark" : "github-light";
        $$unsubscribe_theme();
        return `<noscript>JavaScript must be enabled to leave comments.</noscript>
<div id="${"utterances-comments"}"></div>`;
      });
      css40 = {
        code: '@charset "UTF-8";:root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.post .cover-image{margin:0;border:1px solid hsla(var(--darkGrayHSL), 1)}.post .meta+p::first-letter,.post .toc-wrap+p::first-letter,.post .meta+.side-note+p::first-letter,.post .toc-wrap+.side-note+p::first-letter{font-size:3.6em;float:left;line-height:0.7em;margin:0.45rem 0.4rem 0 0;color:inherit;font-weight:bold}.post .meta{font-size:0.8rem;line-height:1.6;margin:var(--halfNote) 0 var(--wholeNote);width:-webkit-max-content;width:-moz-max-content;width:max-content;padding:0.5em 0;font-family:var(--headingFont);border-top:2px solid var(--lightGray)}.post .meta b{text-transform:uppercase;font-style:normal;font-size:0.7rem}.post .post-footer{margin:0 0 var(--halfNote)}.post .post-footer .h4{margin:0 0 calc(var(--quarterNote) / 2)}.post .post-footer .h4::before{display:none}.post .post-links{margin:var(--halfNote) 0;font-family:var(--headingFont)}.post .post-links a{margin-left:1ch}.post .post-links__contact::marker{content:"\u{1F4E9}"}.post .post-links__blog::marker{content:"\u{1F519}"}.post .section-heading-image{margin-top:var(--dottedWholeNote)}.post .section-heading-image+*{margin-top:var(--quarterNote)}.post .cp_embed_wrapper{width:calc(100% + var(--margin) + var(--margin));max-width:unset;margin-left:calc(var(--margin) * -1)}@media(max-width: 1680px) and (min-width: 1440px){.post .cp_embed_wrapper{margin-left:0}}@media(min-width: 1440px){.post h1{width:calc(100% + 15vw);max-width:unset;font-size:calc(1.8rem + 1.5vw)}}.sidebar{margin-inline:auto !important}',
        map: null
      };
      RenderedPost = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { PostContent } = $$props;
        let { meta } = $$props;
        let imagePath;
        if ($$props.PostContent === void 0 && $$bindings.PostContent && PostContent !== void 0)
          $$bindings.PostContent(PostContent);
        if ($$props.meta === void 0 && $$bindings.meta && meta !== void 0)
          $$bindings.meta(meta);
        $$result.css.add(css40);
        imagePath = `/images/post_images/${meta.coverImage}`;
        return `${$$result.head += `${$$result.title = `<title>${escape(meta.title)} - Ricky Januari blog</title>`, ""}<meta data-key="${"description"}" name="${"description"}"${add_attribute("content", meta.excerpt, 0)} data-svelte="svelte-a11lak"><meta property="${"og:type"}" content="${"article"}" data-svelte="svelte-a11lak"><meta property="${"og:title"}"${add_attribute("content", meta.title, 0)} data-svelte="svelte-a11lak"><meta name="${"twitter:title"}"${add_attribute("content", meta.title, 0)} data-svelte="svelte-a11lak"><meta property="${"og:description"}"${add_attribute("content", meta.excerpt, 0)} data-svelte="svelte-a11lak"><meta name="${"twitter:description"}"${add_attribute("content", meta.excerpt, 0)} data-svelte="svelte-a11lak"><meta property="${"og:image"}" content="${"https://rickyjanuari.com" + escape(imagePath)}" data-svelte="svelte-a11lak"><meta property="${"og:image:width"}"${add_attribute("content", meta.coverWidth, 0)} data-svelte="svelte-a11lak"><meta property="${"og:image:height"}"${add_attribute("content", meta.coverHeight, 0)} data-svelte="svelte-a11lak"><meta name="${"twitter:image"}" content="${"https://rickyjanuari.com" + escape(imagePath)}" data-svelte="svelte-a11lak"><meta property="${"og:url"}" content="${"https://rickyjanuari.com/blog/" + escape(meta.slug) + "/"}" data-svelte="svelte-a11lak">`, ""}


${validate_component(Main, "Main").$$render($$result, {}, {}, {
          default: () => {
            return `<article class="${"post compressed-content"}"><img class="${"cover-image"}"${add_attribute("src", imagePath, 0)} alt="${""}" style="${"aspect-ratio: " + escape(meta.coverWidth) + " / " + escape(meta.coverHeight)}"${add_attribute("width", meta.coverWidth, 0)}${add_attribute("height", meta.coverHeight, 0)}>

    <h1>${escape(meta.title)}</h1>

    
    <div class="${"meta"}"><b>Published:</b> ${escape(readableDate(meta.date))}
      <br>
      <b>Updated:</b> ${escape(readableDate(meta.updated))}</div>
    
    ${validate_component(PostContent || missing_component, "svelte:component").$$render($$result, {}, {}, {})}

    <aside class="${"post-footer"}">${validate_component(Bio, "Bio").$$render($$result, { currentPage: meta.slug }, {}, {})}

      ${meta.categories ? `<h2 class="${"h4"}">Posted in: </h2>
        ${validate_component(TagList, "TagList").$$render($$result, {}, {}, {
              default: () => {
                return `${each(meta.categories, (category) => {
                  return `${validate_component(Tag, "Tag").$$render($$result, { to: "/blog/category/" + category + "/" }, {}, {
                    default: () => {
                      return `${escape(category)}
            `;
                    }
                  })}`;
                })}`;
              }
            })}` : ``}</aside>

    ${validate_component(Comments, "Comments").$$render($$result, {}, {}, {})}</article>`;
          }
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/entries/pages/blog/preview/_slug_.svelte.js
  var slug_svelte_exports3 = {};
  __export(slug_svelte_exports3, {
    default: () => U5Bslugu5D3,
    load: () => load14
  });
  function __variableDynamicImportRuntime0__(path) {
    switch (path) {
      default:
        return new Promise(function(resolve2, reject) {
          (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(reject.bind(null, new Error("Unknown variable dynamic import: " + path)));
        });
    }
  }
  var dev, load14, U5Bslugu5D3;
  var init_slug_svelte3 = __esm({
    ".svelte-kit/output/server/entries/pages/blog/preview/_slug_.svelte.js"() {
      init_index_2749e1b7();
      init_RenderedPost_f392cafd();
      init_TagList_0e1f394c();
      init_store_6b7e9707();
      init_Main_5d179e14();
      dev = false;
      load14 = async ({ params }) => {
        try {
          if (!dev) {
            return {
              status: 404,
              error: "No posts to preview."
            };
          }
          const { slug } = params;
          const post = await __variableDynamicImportRuntime0__(`../_posts/drafts/${slug}.md`);
          return {
            props: {
              PostContent: post.default,
              meta: { ...post.metadata, slug: params.post }
            }
          };
        } catch (error2) {
          return { status: 404, error: error2.message };
        }
      };
      U5Bslugu5D3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { PostContent } = $$props;
        let { meta } = $$props;
        if ($$props.PostContent === void 0 && $$bindings.PostContent && PostContent !== void 0)
          $$bindings.PostContent(PostContent);
        if ($$props.meta === void 0 && $$bindings.meta && meta !== void 0)
          $$bindings.meta(meta);
        return `${validate_component(RenderedPost, "RenderedPost").$$render($$result, { PostContent, meta }, {}, {})}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/17.js
  var __exports18 = {};
  __export(__exports18, {
    css: () => css41,
    entry: () => entry18,
    js: () => js18,
    module: () => slug_svelte_exports3
  });
  var entry18, js18, css41;
  var init__18 = __esm({
    ".svelte-kit/output/server/nodes/17.js"() {
      init_slug_svelte3();
      entry18 = "pages/blog/preview/_slug_.svelte-d4d73d80.js";
      js18 = ["pages/blog/preview/_slug_.svelte-d4d73d80.js", "chunks/vendor-b62d7b9b.js", "chunks/RenderedPost-ce30fcea.js", "chunks/TagList-bde82414.js", "chunks/store-17e8b0ad.js", "chunks/Main-f748586d.js"];
      css41 = ["assets/RenderedPost-6370ab12.css", "assets/TagList-413d58d5.css"];
    }
  });

  // .svelte-kit/output/server/entries/pages/blog/page/_page_.svelte.js
  var page_svelte_exports = {};
  __export(page_svelte_exports, {
    default: () => U5Bpageu5D,
    load: () => load15
  });
  var css42, load15, U5Bpageu5D;
  var init_page_svelte = __esm({
    ".svelte-kit/output/server/entries/pages/blog/page/_page_.svelte.js"() {
      init_index_2749e1b7();
      init_fetchPosts_bc4b2a22();
      init_PostList_093c74fc();
      init_Main_5d179e14();
      init_Pagination_3adfb506();
      init_TagList_0e1f394c();
      init_ExternalLink_29dd7148();
      css42 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}h1.h2.svelte-1vo22i3{font-size:1.3rem;padding:0;margin:0 0 var(--halfNote)}h1.h2.svelte-1vo22i3::before{display:none}',
        map: null
      };
      load15 = async ({ fetch: fetch2, params }) => {
        try {
          const page = params.page ? params.page : 1;
          if (page <= 1) {
            return { status: 301, redirect: "/blog" };
          }
          let offset = page * 10 - 10;
          const posts = await fetchPosts({ offset, limit: 10 });
          const count = await fetch2(`/api/posts/count.json`);
          const { total } = await count.json();
          return {
            status: 200,
            props: { posts, page, totalPosts: total }
          };
        } catch (error2) {
          return { status: 404, error: error2.message };
        }
      };
      U5Bpageu5D = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let lowerBound;
        let upperBound;
        let { posts } = $$props;
        let { page = 1 } = $$props;
        let { totalPosts } = $$props;
        if ($$props.posts === void 0 && $$bindings.posts && posts !== void 0)
          $$bindings.posts(posts);
        if ($$props.page === void 0 && $$bindings.page && page !== void 0)
          $$bindings.page(page);
        if ($$props.totalPosts === void 0 && $$bindings.totalPosts && totalPosts !== void 0)
          $$bindings.totalPosts(totalPosts);
        $$result.css.add(css42);
        lowerBound = page * 10 - 9 || 1;
        upperBound = Math.min(page * 10, totalPosts);
        return `${$$result.head += `${$$result.title = `<title>Ricky Januari | Blog page ${escape(page)}</title>`, ""}<meta data-key="${"description"}" name="${"description"}" content="${"Past posts on the web, development, and design."}" data-svelte="svelte-cm5k0v"><meta property="${"og:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-cm5k0v"><meta name="${"twitter:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-cm5k0v">`, ""}


${validate_component(Main, "Main").$$render($$result, {}, {}, {
          default: () => {
            return `<h1 class="${"h2 svelte-1vo22i3"}">Posts ${escape(lowerBound)}\u2013${escape(upperBound)} of ${escape(totalPosts)}</h1>
  ${validate_component(Pagination, "Pagination").$$render($$result, { currentPage: page, totalPosts }, {}, {})}
  ${validate_component(PostList, "PostList").$$render($$result, { posts }, {}, {})}
  ${validate_component(Pagination, "Pagination").$$render($$result, { currentPage: page, totalPosts }, {}, {})}`;
          }
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/18.js
  var __exports19 = {};
  __export(__exports19, {
    css: () => css43,
    entry: () => entry19,
    js: () => js19,
    module: () => page_svelte_exports
  });
  var entry19, js19, css43;
  var init__19 = __esm({
    ".svelte-kit/output/server/nodes/18.js"() {
      init_page_svelte();
      entry19 = "pages/blog/page/_page_.svelte-22a0ac76.js";
      js19 = ["pages/blog/page/_page_.svelte-22a0ac76.js", "chunks/vendor-b62d7b9b.js", "chunks/fetchPosts-731fe962.js", "chunks/preload-helper-e4860ae8.js", "chunks/PostList-5ba61222.js", "chunks/TagList-bde82414.js", "chunks/ExternalLink-10e1f92c.js", "chunks/Main-f748586d.js", "chunks/Pagination-4f56842f.js"];
      css43 = ["assets/pages/blog/page/_page_.svelte-6f01ac72.css", "assets/PostList-7831d634.css", "assets/TagList-413d58d5.css", "assets/ExternalLink-0287f125.css", "assets/Pagination-7586d39d.css"];
    }
  });

  // .svelte-kit/output/server/entries/pages/blog/_post_.svelte.js
  var post_svelte_exports = {};
  __export(post_svelte_exports, {
    default: () => U5Bpostu5D,
    load: () => load16
  });
  function __variableDynamicImportRuntime0__2(path) {
    switch (path) {
      case "./_posts/12-things.md":
        return Promise.resolve().then(() => (init_things_949a7b41(), things_949a7b41_exports));
      case "./_posts/8-student-portfolio-mistakes.md":
        return Promise.resolve().then(() => (init_student_portfolio_mistakes_97ac2775(), student_portfolio_mistakes_97ac2775_exports));
      case "./_posts/a-new-headless-site-with-gridsome.md":
        return Promise.resolve().then(() => (init_a_new_headless_site_with_gridsome_c6997bd9(), a_new_headless_site_with_gridsome_c6997bd9_exports));
      case "./_posts/add-blog-comments-static-site.md":
        return Promise.resolve().then(() => (init_add_blog_comments_static_site_7efb9968(), add_blog_comments_static_site_7efb9968_exports));
      case "./_posts/adding-gutenberg-full-and-wide-width-image-support-to-your-wordpress-theme.md":
        return Promise.resolve().then(() => (init_adding_gutenberg_full_and_wide_width_image_support_to_your_wordpress_theme_5d471a4a(), adding_gutenberg_full_and_wide_width_image_support_to_your_wordpress_theme_5d471a4a_exports));
      case "./_posts/announcing-quina-my-first-app.md":
        return Promise.resolve().then(() => (init_announcing_quina_my_first_app_2ec1b56e(), announcing_quina_my_first_app_2ec1b56e_exports));
      case "./_posts/build-static-sveltekit-markdown-blog.md":
        return Promise.resolve().then(() => (init_build_static_sveltekit_markdown_blog_50359119(), build_static_sveltekit_markdown_blog_50359119_exports));
      case "./_posts/confirm-all-ids-are-unique-in-an-array-of-javascript-objects-using-map-and-sets.md":
        return Promise.resolve().then(() => (init_confirm_all_ids_are_unique_in_an_array_of_javascript_objects_using_map_and_sets_2947b46d(), confirm_all_ids_are_unique_in_an_array_of_javascript_objects_using_map_and_sets_2947b46d_exports));
      case "./_posts/converting-from-gridsome-to-sveltekit.md":
        return Promise.resolve().then(() => (init_converting_from_gridsome_to_sveltekit_87f9ea4f(), converting_from_gridsome_to_sveltekit_87f9ea4f_exports));
      case "./_posts/creating-custom-gutenberg-blocks-with-the-block-lab-plugin.md":
        return Promise.resolve().then(() => (init_creating_custom_gutenberg_blocks_with_the_block_lab_plugin_6d622b1c(), creating_custom_gutenberg_blocks_with_the_block_lab_plugin_6d622b1c_exports));
      case "./_posts/essential-tools-wordpress-development.md":
        return Promise.resolve().then(() => (init_essential_tools_wordpress_development_2b28f9a5(), essential_tools_wordpress_development_2b28f9a5_exports));
      case "./_posts/filetypes.md":
        return Promise.resolve().then(() => (init_filetypes_55ad3bb8(), filetypes_55ad3bb8_exports));
      case "./_posts/five-ways-to-become-a-better-designer-that-arent-design.md":
        return Promise.resolve().then(() => (init_five_ways_to_become_a_better_designer_that_arent_design_bb2117e3(), five_ways_to_become_a_better_designer_that_arent_design_bb2117e3_exports));
      case "./_posts/goodbye-instagram.md":
        return Promise.resolve().then(() => (init_goodbye_instagram_09f06d13(), goodbye_instagram_09f06d13_exports));
      case "./_posts/goodbye-wordpress.md":
        return Promise.resolve().then(() => (init_goodbye_wordpress_de96e921(), goodbye_wordpress_de96e921_exports));
      case "./_posts/how-to-connect-local-with-codekit.md":
        return Promise.resolve().then(() => (init_how_to_connect_local_with_codekit_cf46e021(), how_to_connect_local_with_codekit_cf46e021_exports));
      case "./_posts/introducing-svelte-comparing-with-react-vue.md":
        return Promise.resolve().then(() => (init_introducing_svelte_comparing_with_react_vue_f7387ef5(), introducing_svelte_comparing_with_react_vue_f7387ef5_exports));
      case "./_posts/lets-learn-css-variables.md":
        return Promise.resolve().then(() => (init_lets_learn_css_variables_7d1d9c23(), lets_learn_css_variables_7d1d9c23_exports));
      case "./_posts/new-site-new-theme-for-2018.md":
        return Promise.resolve().then(() => (init_new_site_new_theme_for_2018_dcc2dfe4(), new_site_new_theme_for_2018_dcc2dfe4_exports));
      case "./_posts/pantone.md":
        return Promise.resolve().then(() => (init_pantone_40caa47d(), pantone_40caa47d_exports));
      case "./_posts/profit-is-not-a-value.md":
        return Promise.resolve().then(() => (init_profit_is_not_a_value_97b16a49(), profit_is_not_a_value_97b16a49_exports));
      case "./_posts/the-five-things-i-wish-somebody-had-told-me-as-a-design-student.md":
        return Promise.resolve().then(() => (init_the_five_things_i_wish_somebody_had_told_me_as_a_design_student_e793bf01(), the_five_things_i_wish_somebody_had_told_me_as_a_design_student_e793bf01_exports));
      case "./_posts/why-designers-shouldnt-remake-other-designers-logos.md":
        return Promise.resolve().then(() => (init_why_designers_shouldnt_remake_other_designers_logos_9be49eae(), why_designers_shouldnt_remake_other_designers_logos_9be49eae_exports));
      case "./_posts/wordpress-child-theme-explanation.md":
        return Promise.resolve().then(() => (init_wordpress_child_theme_explanation_ffa0277c(), wordpress_child_theme_explanation_ffa0277c_exports));
      default:
        return new Promise(function(resolve2, reject) {
          (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(reject.bind(null, new Error("Unknown variable dynamic import: " + path)));
        });
    }
  }
  var load16, U5Bpostu5D;
  var init_post_svelte = __esm({
    ".svelte-kit/output/server/entries/pages/blog/_post_.svelte.js"() {
      init_index_2749e1b7();
      init_RenderedPost_f392cafd();
      init_TagList_0e1f394c();
      init_store_6b7e9707();
      init_Main_5d179e14();
      load16 = async ({ params }) => {
        if (params.post == "page") {
          return { status: 301, redirect: "/blog" };
        }
        try {
          const post = await __variableDynamicImportRuntime0__2(`./_posts/${params.post}.md`);
          return {
            props: {
              PostContent: post.default,
              meta: { ...post.metadata, slug: params.post }
            }
          };
        } catch (error2) {
          return { status: 404, error: error2.message };
        }
      };
      U5Bpostu5D = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { PostContent } = $$props;
        let { meta } = $$props;
        if ($$props.PostContent === void 0 && $$bindings.PostContent && PostContent !== void 0)
          $$bindings.PostContent(PostContent);
        if ($$props.meta === void 0 && $$bindings.meta && meta !== void 0)
          $$bindings.meta(meta);
        return `${validate_component(RenderedPost, "RenderedPost").$$render($$result, { PostContent, meta }, {}, {})}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/19.js
  var __exports20 = {};
  __export(__exports20, {
    css: () => css44,
    entry: () => entry20,
    js: () => js20,
    module: () => post_svelte_exports
  });
  var entry20, js20, css44;
  var init__20 = __esm({
    ".svelte-kit/output/server/nodes/19.js"() {
      init_post_svelte();
      entry20 = "pages/blog/_post_.svelte-771a1fc7.js";
      js20 = ["pages/blog/_post_.svelte-771a1fc7.js", "chunks/preload-helper-e4860ae8.js", "chunks/vendor-b62d7b9b.js", "chunks/RenderedPost-ce30fcea.js", "chunks/TagList-bde82414.js", "chunks/store-17e8b0ad.js", "chunks/Main-f748586d.js"];
      css44 = ["assets/RenderedPost-6370ab12.css", "assets/TagList-413d58d5.css"];
    }
  });

  // .svelte-kit/output/server/chunks/uses-02d1fd96.js
  var uses_02d1fd96_exports = {};
  __export(uses_02d1fd96_exports, {
    default: () => Uses
  });
  var css$16, FontTester, css45, SiteColors, Uses;
  var init_uses_02d1fd96 = __esm({
    ".svelte-kit/output/server/chunks/uses-02d1fd96.js"() {
      init_index_2749e1b7();
      init_ExternalLink_29dd7148();
      css$16 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.tester-form.svelte-l7gktv.svelte-l7gktv{overflow:visible;margin:4rem 0 0;position:relative;font-family:var(--headingFont)}.tester-form.svelte-l7gktv label.svelte-l7gktv{font-size:0.8rem;flex:1 1 14em;margin-top:0.5rem}.tester-form.svelte-l7gktv input[type=range].svelte-l7gktv{flex:1 1 70%;padding:0;margin:0.5rem 0 0;max-width:12rem;outline:none;border:none}.tester-form.svelte-l7gktv input[type=text].svelte-l7gktv{border:none;margin:0;padding:0.6em 0;width:100vw;max-width:calc(100vw - (var(--margin) + 1rem));line-height:1em;height:1em;overflow:visible;position:absolute}.tester-form.svelte-l7gktv input[type=text].svelte-l7gktv:hover{cursor:text}.tester-form.svelte-l7gktv .flex-container.svelte-l7gktv{padding-top:var(--halfNote);display:flex;align-items:flex-end;align-content:flex-end;position:relative}.tester-form.svelte-l7gktv .details.svelte-l7gktv{margin-top:1rem;font-style:normal}',
        map: null
      };
      FontTester = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { font } = $$props;
        let { label = "" } = $$props;
        let { fontStyle = "normal" } = $$props;
        let { fontWeight = "normal" } = $$props;
        let { placeholder = "" } = $$props;
        let { link = "" } = $$props;
        let { bold = false } = $$props;
        let { italic = false } = $$props;
        let size = 42;
        let text = "";
        let displayBold = false;
        let displayItalic = false;
        let sizeInPx;
        let fontName;
        let computedFontWeight;
        let computedFontStyle;
        if ($$props.font === void 0 && $$bindings.font && font !== void 0)
          $$bindings.font(font);
        if ($$props.label === void 0 && $$bindings.label && label !== void 0)
          $$bindings.label(label);
        if ($$props.fontStyle === void 0 && $$bindings.fontStyle && fontStyle !== void 0)
          $$bindings.fontStyle(fontStyle);
        if ($$props.fontWeight === void 0 && $$bindings.fontWeight && fontWeight !== void 0)
          $$bindings.fontWeight(fontWeight);
        if ($$props.placeholder === void 0 && $$bindings.placeholder && placeholder !== void 0)
          $$bindings.placeholder(placeholder);
        if ($$props.link === void 0 && $$bindings.link && link !== void 0)
          $$bindings.link(link);
        if ($$props.bold === void 0 && $$bindings.bold && bold !== void 0)
          $$bindings.bold(bold);
        if ($$props.italic === void 0 && $$bindings.italic && italic !== void 0)
          $$bindings.italic(italic);
        $$result.css.add(css$16);
        sizeInPx = size + "px";
        fontName = label || font;
        computedFontWeight = fontWeight || "normal";
        computedFontStyle = fontStyle || "normal";
        return `<form class="${"tester-form svelte-l7gktv"}"><div class="${"flex-container svelte-l7gktv"}"><label${add_attribute("for", fontName, 0)} class="${"sr svelte-l7gktv"}">${escape(fontName)}</label>
			<input${add_attribute("id", fontName, 0)} type="${"text"}"${add_attribute("placeholder", placeholder, 0)} style="${"font-family: " + escape(font) + "; font-size: " + escape(sizeInPx) + "; font-style: " + escape(computedFontStyle) + "; font-weight: " + escape(computedFontWeight) + ";"}" class="${"svelte-l7gktv"}"${add_attribute("value", text, 0)}></div>

		<div><label for="${escape(fontName) + "-size"}" class="${"sr svelte-l7gktv"}">Font size:</label>
			<input id="${escape(fontName) + "-size"}" type="${"range"}" min="${"8"}" max="${"127"}" class="${"svelte-l7gktv"}"${add_attribute("value", size, 0)}></div>

		${bold ? `<input id="${escape(fontName) + "-bold"}" type="${"checkbox"}"${add_attribute("checked", displayBold, 1)}>
      <label for="${escape(fontName) + "-bold"}" class="${"svelte-l7gktv"}">Bold</label>` : ``}

		${italic ? `<input id="${escape(fontName) + "-italic"}" type="${"checkbox"}"${add_attribute("checked", displayItalic, 1)}>
      <label for="${escape(fontName) + "-italic"}" class="${"svelte-l7gktv"}">Italic</label>` : ``}

		${link ? `<p class="${"details svelte-l7gktv"}"><a rel="${"external"}"${add_attribute("href", link, 0)}>${escape(fontName)} family${validate_component(ExternalLink, "ExternalLink").$$render($$result, {}, {}, {})}</a></p>` : ``}
	</form>`;
      });
      css45 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.brand-colors.svelte-12pid1j.svelte-12pid1j{display:grid;grid-template-columns:repeat(auto-fit, minmax(8.5rem, 1fr));padding:0}.brand-colors.svelte-12pid1j .color.svelte-12pid1j{list-style-type:none;display:flex;align-items:center;font-size:0.9rem;font-family:var(--codeFont);text-shadow:0 0 1px var(--trueWhite)}.brand-colors.svelte-12pid1j .color .swatch.svelte-12pid1j{width:3.5em;height:3.5em;margin-right:0.5rem}',
        map: null
      };
      SiteColors = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        const colors = [
          "#ffd100",
          "#34657f",
          "#7ba7bc",
          "#ff6a13",
          "#e4002b",
          "#a7a8aa",
          "#888b8d",
          "#53565a",
          "#341F23",
          "#101820"
        ];
        $$result.css.add(css45);
        return `<ul class="${"brand-colors no-bullets svelte-12pid1j"}">${each(colors, (color) => {
          return `<li class="${"color svelte-12pid1j"}"><div class="${"swatch svelte-12pid1j"}" style="${"background-color: " + escape(color)}"></div>
      <span>${escape(color)}</span>
    </li>`;
        })}
</ul>`;
      });
      Uses = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        return `<h2 id="${"development"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#development"}"><span class="${"icon icon-link"}"></span></a>Development</h2>
<h3 id="${"languages-and-frameworks"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#languages-and-frameworks"}"><span class="${"icon icon-link"}"></span></a>Languages and frameworks</h3>
<ul><li><p>ES6+ JavaScript is my main language these days. I\u2019ve spent the last few years building in
<a href="${"https://vuejs.org/"}" rel="${"nofollow"}">Vue</a> (I\u2019m unsurprisingly, therefore, a huge fan of
<a href="${"https://nuxtjs.org"}" rel="${"nofollow"}">Nuxt</a> and
<a href="${"https://gridsome.org/"}" rel="${"nofollow"}">Gridsome</a>).</p></li>
<li><p>Recently, however, I\u2019ve been moving most new projects over to
<a href="${"https://kit.svelte.dev/"}" rel="${"nofollow"}">SvelteKit</a>
(including this website!), and loving both the dev experience and reduced bundle size.
I\u2019ve also been working on implmenting <a href="${"https://www.typescriptlang.org/"}" rel="${"nofollow"}">TypeScript</a> in all new projects.
Professionally, I work in <a href="${"https://reactjs.org/"}" rel="${"nofollow"}">React</a>,
and have built several personal projects with it as well.
I\u2019ve also got working experience with jQuery and Knockout.</p></li>
<li><p>I love CSS passionately, but I don\u2019t use any libraries or frameworks; all my CSS is from-scratch, responsive, and custom (usually written in
<a href="${"https://sass-lang.com/"}" rel="${"nofollow"}">SCSS</a>). I love authoring smooth, fluid transitions and animations.</p></li>
<li><p>I\u2019m a strong proponent of well-architected, accessible, and semantic <b>HTML</b>. (I create and use SVG often.)</p></li>
<li><p>I\u2019m a <a href="${"https://wordpress.org/"}" rel="${"nofollow"}">WordPress</a> expert and generally prefer to build themes from scratch. I\u2019m capable with PHP and MySQL.</p></li>
<li><p>I wouldn\u2019t call myself a full-stack developer, but I know my way around Ruby on Rails and have dabbled in some Node and Laravel.</p></li></ul>
<h3 id="${"code-tools"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#code-tools"}"><span class="${"icon icon-link"}"></span></a>Code tools</h3>
<ul><li><p><a href="${"https://code.visualstudio.com/"}" rel="${"nofollow"}">Visual Studio Code</a>: my favorite editor ever. I was a reluctant Sublime Text convert, but the switch was more than worth it.</p>
<ul><li><p><strong>Theme</strong>: I love <a href="${"https://draculatheme.com/pro"}" rel="${"nofollow"}">Dracula Pro</a>; it strikes the perfect balance of contrast and color to my eye. I also appreciate that it comes with identical themes for other apps, like Slack, iTerm, and others. It <em>is</em> expensive, however, so for a free option, I\u2019d go with go with good ol\u2019 <a href="${"https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula"}" rel="${"nofollow"}">Dracula Official</a>.</p></li>
<li><p><strong>Font</strong>: <a href="${"https://www.monolisa.dev/"}" rel="${"nofollow"}">MonoLisa</a>.
I\u2019m a code nerd and a font nerd, so I don\u2019t take this choice lightly, but this is my favorite dev font. I love its combination of legibility and subtle personality, and plus, the code ligatures are great. (If you\u2019re not willing to spend the money, though\u2014and I definitely understand if that\u2019s the case\u2014
<a href="${"https://github.com/tonsky/FiraCode"}" rel="${"nofollow"}">Fira Code</a> is my runner-up.)</p></li>
<li><p><strong>Extensions</strong>: I don\u2019t have too many global recommendations here (it depends a lot on what you\u2019re working with), but I\u2019ll mention:</p>
<ul><li><p><a href="${"https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html"}" rel="${"nofollow"}">es6-string-html</a>:
treats HTML inside template literal strings like actual HTML code, for the purposes of highlighting, code completion, Emmett, etc.</p></li>
<li><p><a href="${"https://marketplace.visualstudio.com/items?itemName=pnp.polacode"}" rel="${"nofollow"}">Polacode</a>:
a nifty, pretty way to take code screenshots</p></li>
<li><p><a href="${"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"}" rel="${"nofollow"}">GitLens</a>:
less indispensable now that VS Code has the <a href="${"https://scotch.io/bar-talk/vs-code-v144-adds-a-git-timeline-view"}" rel="${"nofollow"}">Timeline view</a>, but still amazingly handy for viewing git status and history in projects.</p></li>
<li><p><a href="${"https://marketplace.visualstudio.com/items?itemName=Compulim.compulim-vscode-closetag"}" rel="${"nofollow"}">Close HTML/XML Tag</a>:
the only keyboard shortcut I miss from Sublime Text is easily replicated with this extension. Gives you a key command to auto-close whatever HTML tag your cursor is inside of.</p></li></ul></li></ul></li></ul>
<ul><li><p><a href="${"https://www.mozilla.org/en-US/firefox/new/"}" rel="${"nofollow"}">Firefox</a>:
took some getting used to, but it\u2019s a great browser with some awesome tools. It may not be as performant as Chromium browsers in some regards, but I personally view that as feature, not a bug; if I can make a transition or animation smooth in Firefox, I know it\u2019s buttery everywhere else, too.</p></li>
<li><p><a href="${"https://localwp.com/"}" rel="${"nofollow"}">Local</a>:
hands-down the best way to develop WordPress sites. Fast and easy (especially if you host with Flywheel or WP Engine; you can push and pull sites directly).</p></li>
<li><p><a href="${"https://codekitapp.com/"}" rel="${"nofollow"}">CodeKit</a>:
there\u2019s nothing CodeKit does that I couldn\u2019t accomplish by fiddling with NPM scripts, but why bother? It\u2019s smooth and easy to use, and as a bonus, it works great with Local.</p></li>
<li><p><a href="${"https://www.iterm2.com/"}" rel="${"nofollow"}">iTerm2</a>:
I\u2019ve tried other terminals, but none seem to run as well, and with the recent update, arguably, none look better, either.</p></li>
<li><p><a href="${"https://www.netlify.com/"}" rel="${"nofollow"}">Netlify</a>:
I\u2019m also a fan of
<a href="${"https://vercel.com/home"}" rel="${"nofollow"}">Now</a>, but Netlify has taken over my Jamstack hosting #1 spot. It\u2019s free to start and unbelievably easy. Netlify makes the painfully difficult effortlessly simple.</p></li></ul>
<h2 id="${"hardware"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#hardware"}"><span class="${"icon icon-link"}"></span></a>Hardware</h2>
<ul><li><p><a href="${"https://www.anker.com/products/variant/xanker-24g-wireless-vertical-ergonomic-optical-mouse/xa7852011"}" rel="${"nofollow"}">Anker 2.4G Wireless Vertical Ergonomic Optical Mouse</a>:
I could feel my wrist straining using both a magic mouse and a touchpad. I switched to this mouse years ago. It took some adjustment, but I don\u2019t ever want to use another mouse again, and I don\u2019t even use the extra buttons.</p></li>
<li><p><a href="${"https://kinesis-ergo.com/shop/freestyle2-mac/"}" rel="${"nofollow"}">Kinesis Freestyle2 for Mac</a> keyboard:
I paid for months of sitting-on-the-couch laptop time with a repetitive stress injury on my right wrist. This keyboard is a bit of an adjustment, but it has helped a lot with the wrist pain by keeping my wrists from going to outward angles.</p></li>
<li><p><a href="${"https://www.hermanmiller.com/products/seating/office-chairs/sayl-chairs/"}" rel="${"nofollow"}">Herman Miller Sayl Chair</a>:
I made it about two months as a full-time work-from-home employee before I went and bought one of these chairs. It\u2019s the most comfortable and easily adjustable office chair I\u2019ve ever sat in (and it looks really nice, too).</p></li>
<li><p><a href="${"https://www.upliftdesk.com/uplift-v2-standing-desk-frame/"}" rel="${"nofollow"}">Uplift V2 C-Frame</a> standing desk:
Not a lot of purchases I\u2019ve been happier with than this one. It works incredibly well and is surprisingly sturdy, even without springing for the commercial version. (I have the 27.5\u201D feet for my larger Ikea desktop, and the Advanced Digital Memory Keypad.)</p></li></ul>
<h2 id="${"productivity--utility"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#productivity--utility"}"><span class="${"icon icon-link"}"></span></a>Productivity &amp; Utility</h2>
<ul><li><p><a href="${"https://1password.com"}" rel="${"nofollow"}">1Password</a>:
The first thing I instal on every new device. I\u2019ve tried and liked other password software, but 1Password is just the most reliable cross-platform and -device in my experience.</p></li>
<li><p><a href="${"https://http://xalfredapp.com"}" rel="${"nofollow"}">Alfred</a>:
the <em>second</em> thing I install on every new Mac. (I use the <a href="${"https://www.alfredapp.com/powerpack/"}" rel="${"nofollow"}">powerpack</a> for added features, which is worth every penny.) The main features I love are clipboard history, snippet expansion, global search (never touch Finder again!), and workflows to automate repetitive or tedious tasks. Wouldn\u2019t ever want to work without it.</p></li>
<li><p><a href="${"https://www.getcloudapp.com/"}" rel="${"nofollow"}">CloudApp</a>:
taking screenshots and videos is a many-times-daily activity for me, and CloudApp makes it as seamless as possible.</p></li>
<li><p><a href="${"https://rightfontapp.com/"}" rel="${"nofollow"}">RightFont</a>:
a simple, minimalist app for managing your computer\u2019s fonts that looks and works better than Mac\u2019s built-in FontBook.</p></li>
<li><p><a href="${"https://rectangleapp.com/"}" rel="${"nofollow"}">Rectangle</a>:
never drag or resize another window again. Keyboard shortcuts to put everything right where you need it.</p></li>
<li><p><a href="${"https://www.macbartender.com/"}" rel="${"nofollow"}">Bartender</a>:
helps wrangle all those app icons in your taskbar if you\u2019re a minimalist like me.</p></li>
<li><p><a href="${"https://matthewpalmer.net/rocket/"}" rel="${"nofollow"}">Rocket</a>:
lends you Slack-like ability to use emoji anywhere. Way better than the OSX default emoji picker.</p></li>
<li><p><a href="${"https://notion.so"}" rel="${"nofollow"}">Notion</a>:
my current favorite notes app. Can grow and get as complex as you need it to be, but for simple notes, the markdown and code highlight support is fantastic.</p></li></ul>
<h2 id="${"design-and-illustration"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#design-and-illustration"}"><span class="${"icon icon-link"}"></span></a>Design and Illustration</h2>
<ul><li><p><a href="${"https://xaffinity.serif.com"}" rel="${"nofollow"}">Affinity Photo, Designer and Publisher</a>:
you can have software mostly as good as Photoshop, Illustrator and InDesign <em>forever</em> for the cost of three months of Creative Cloud.</p></li>
<li><p><a href="${"https://www.wacom.com/en-us/products/pen-tablets/intuos-pro-small"}" rel="${"nofollow"}">Wacom Intuos Pro PTH-451</a> (small):
I don\u2019t often illustrate these days, but when I do, I\u2019m always glad I have this fantastic pad. Wireless is a big plus.</p></li></ul>
<h2 id="${"this-site"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#this-site"}"><span class="${"icon icon-link"}"></span></a>This site</h2>
<p class="${"details"}">This is about the fifth iteration of my personal brand. The colors haven&#39;t changed, but I rotate fonts and layout once every year or two.</p>
<h3 id="${"colors"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#colors"}"><span class="${"icon icon-link"}"></span></a>Colors</h3>
${validate_component(SiteColors, "SiteColors").$$render($$result, {}, {}, {})}
<h3 id="${"fonts"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#fonts"}"><span class="${"icon icon-link"}"></span></a>Fonts</h3>
${validate_component(FontTester, "FontTester").$$render($$result, {
          font: "Alkes",
          label: "Alkes",
          link: "https://www.myfonts.com/fonts/font-fabric/alkes/",
          italic: true,
          bold: true
        }, {}, {})}
${validate_component(FontTester, "FontTester").$$render($$result, {
          font: "Averta-Std",
          label: "Averta Std",
          link: "https://www.myfonts.com/fonts/intelligent-foundry/averta-standard/",
          bold: true
        }, {}, {})}
${validate_component(FontTester, "FontTester").$$render($$result, {
          font: "MonoLisa",
          label: "MonoLisa\n  Regular",
          link: "https://www.monolisa.dev/"
        }, {}, {})}
<p class="${"details"}">Other fonts I&#39;ve used previously:
  <a href="${"https://www.myfonts.com/fonts/jcfonts/korb/"}" rel="${"external"}">Korb</a>
  (both on its own and paired with <a href="${"https://fonts.google.com/specimen/Bitter/"}" rel="${"external"}">Bitter</a>);
  <a href="${"https://www.myfonts.com/fonts/bitstream/clarendon/"}" rel="${"external"}">Clarendon BT Pro</a> +
  <a href="${"https://www.myfonts.com/fonts/latinotype/texta/"}" rel="${"external"}">Texta</a>; and
  <a href="${"https://www.myfonts.com/fonts/stawix/amsi-pro/"}" rel="${"external"}">Amsi Pro</a> +
  <a href="${"https://www.myfonts.com/search/sagona/"}" rel="${"external"}">Sagona</a>;
  <a href="${"https://www.myfonts.com/fonts/typemates/pensum-display/"}" rel="${"external"}">Pensum Display.</a>
  (I know you do not care, but this is here mostly just for my own memory.)
</p>`;
      });
    }
  });

  // .svelte-kit/output/server/entries/pages/uses.svelte.js
  var uses_svelte_exports = {};
  __export(uses_svelte_exports, {
    default: () => Uses_1,
    load: () => load17
  });
  var css46, load17, Uses_1;
  var init_uses_svelte = __esm({
    ".svelte-kit/output/server/entries/pages/uses.svelte.js"() {
      init_index_2749e1b7();
      init_Main_5d179e14();
      css46 = {
        code: ':root{--lightBlueHS:199, 33%;--yellowHS:49, 100%;--redHS:349, 100%;--yellowHSL:49, 100%, 50%;--lightGrayHSL:220, 2%, 66%;--lightBlueHSL:199, 33%, 61%;--darkBlueHSL:201, 42%, 35%;--orangeHSL:22, 100%, 54%;--redHSL:349, 100%, 45%;--midGrayHSL:204, 2%, 54%;--darkGrayHSL:210, 4%, 27%;--darkerGrayHSL:349, 25%, 16%;--whiteHSL:0, 0%, 99%;--trueWhiteHSL:0, 0%, 100%;--blackHSL:210, 33%, 9%;--trueBlackHSL:0, 0%, 0%;--white:hsl(var(--whiteHSL));--trueWhite:hsl(var(--trueWhiteHSL));--black:hsl(var(--blackHSL));--trueBlack:hsl(var(--trueBlackHSL));--headingFont:"Averta-Std", -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,\n  "Helvetica Neue", Arial, sans-serif;--bodyFont:"Alkes", Georgia, serif;--codeFont:"MonoLisa", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;--bodyFontWeight:normal;--bodyLineHeight:1.6;--bodyFontSize:1.125rem;--yellow:hsl(var(--yellowHSL));--orange:hsl(var(--orangeHSL));--red:hsl(var(--redHSL));--lightGray:hsl(var(--lightGrayHSL));--midGray:hsl(var(--midGrayHSL));--darkGray:hsl(var(--darkGrayHSL));--darkerGray:hsl(var(--darkerGrayHSL));--lightBlue:hsl(var(--lightBlueHSL));--lighterBlue:hsl(var(--lightBlueHS), 90%);--lightestBlue:hsl(var(--lightBlueHS), 95%);--darkBlue:hsl(var(--darkBlueHSL));--darkerBlue:hsl(var(--darkBlueHSL), 20%);--blueToYellow:#7ba7bc, #75b1bf, #66c6b6, #4fd27b, #56e035, #acef1b, #faf008, #ffd100;--ink:var(--darkGray);--paper:var(--white);--paperHSL:var(--whiteHSL);--headingColor:var(--darkerGray);--accentColor:var(--darkBlue);--linkColor:var(--darkBlue);--highlightColor:var(--darkGray);--maxWidth:34rem;--sidebarWidth:15rem;--margin:var(--quarterNote);--eighthNote:calc(var(--quarterNote) / 2);--quarterNote:1.25rem;--halfNote:calc(var(--quarterNote) * 2);--dottedHalfNote:calc(var(--quarterNote) * 3);--wholeNote:calc(var(--quarterNote) * 4);--dottedWholeNote:calc(var(--quarterNote) * 6);--buttonSize:2.2rem;--buttonBackground:var(--paper);font-size:var(--bodyFontSize)}@media(min-width: 768px){:root{--bodyFontSize:1.1875rem}}@media(min-width: 1440px){:root{--bodyFontSize:1.25rem}}@media(min-width: 768px){:root{--margin:var(--halfNote)}}@media(min-width: 1024px){:root{--margin:var(--dottedHalfNote)}}@media(min-width: 1960px){:root{--margin:var(--wholeNote)}}@media(min-width: 2200px){:root{--margin:var(--dottedWholeNote)}}:root.dark{--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}@media(prefers-color-scheme: dark){:root:not(.light){--paper:var(--black);--paperHSL:var(--blackHSL);--ink:var(--white);--headingColor:var(--white);--accentColor:var(--lightBlue);--linkColor:var(--lightBlue);--highlightColor:var(--darkerGray)}}.uses li a,.uses p a{font-weight:bold}',
        map: null
      };
      load17 = async () => {
        const Uses2 = await Promise.resolve().then(() => (init_uses_02d1fd96(), uses_02d1fd96_exports));
        return { props: { Uses: Uses2.default } };
      };
      Uses_1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { Uses: Uses2 } = $$props;
        if ($$props.Uses === void 0 && $$bindings.Uses && Uses2 !== void 0)
          $$bindings.Uses(Uses2);
        $$result.css.add(css46);
        return `${$$result.head += `${$$result.title = `<title>Ricky Januari Uses</title>`, ""}<meta data-key="${"description"}" name="${"description"}" content="${"Things I use and like"}" data-svelte="svelte-hnfvn0"><meta property="${"og:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-hnfvn0"><meta name="${"twitter:image"}" content="${"https://rickyjanuari.com/images/site-image.png"}" data-svelte="svelte-hnfvn0">`, ""}


${validate_component(Main, "Main").$$render($$result, {}, {}, {
          default: () => {
            return `<div class="${"uses compressed-content"}">${validate_component(Uses2 || missing_component, "svelte:component").$$render($$result, {}, {}, {})}</div>`;
          }
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/20.js
  var __exports21 = {};
  __export(__exports21, {
    css: () => css47,
    entry: () => entry21,
    js: () => js21,
    module: () => uses_svelte_exports
  });
  var entry21, js21, css47;
  var init__21 = __esm({
    ".svelte-kit/output/server/nodes/20.js"() {
      init_uses_svelte();
      entry21 = "pages/uses.svelte-f4df1d10.js";
      js21 = ["pages/uses.svelte-f4df1d10.js", "chunks/preload-helper-e4860ae8.js", "chunks/vendor-b62d7b9b.js", "chunks/Main-f748586d.js"];
      css47 = ["assets/pages/uses.svelte-89e6f538.css"];
    }
  });

  // .svelte-kit/output/server/entries/pages/ukm/index.svelte.js
  var index_svelte_exports6 = {};
  __export(index_svelte_exports6, {
    default: () => Ukm,
    load: () => load18
  });
  var load18, Ukm;
  var init_index_svelte6 = __esm({
    ".svelte-kit/output/server/entries/pages/ukm/index.svelte.js"() {
      init_index_2749e1b7();
      load18 = async ({ fetch: fetch2 }) => {
        const res = await fetch2("/api/ukm/ukm.json");
        const ukms = await res.json();
        return { props: { ukms } };
      };
      Ukm = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { ukms } = $$props;
        if ($$props.ukms === void 0 && $$bindings.ukms && ukms !== void 0)
          $$bindings.ukms(ukms);
        return `${each(ukms, (ukm) => {
          return `<h2><!-- HTML_TAG_START -->${ukm.title.rendered}<!-- HTML_TAG_END --></h2>
    ${ukm.content.rendered ? `<p><!-- HTML_TAG_START -->${ukm.content.rendered}<!-- HTML_TAG_END --></p>` : ``}
    <a${add_attribute("href", `/ukm/${ukm.slug}`, 0)}>Readmore</a>`;
        })}`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/21.js
  var __exports22 = {};
  __export(__exports22, {
    css: () => css48,
    entry: () => entry22,
    js: () => js22,
    module: () => index_svelte_exports6
  });
  var entry22, js22, css48;
  var init__22 = __esm({
    ".svelte-kit/output/server/nodes/21.js"() {
      init_index_svelte6();
      entry22 = "pages/ukm/index.svelte-0ebb1dbc.js";
      js22 = ["pages/ukm/index.svelte-0ebb1dbc.js", "chunks/vendor-b62d7b9b.js"];
      css48 = [];
    }
  });

  // .svelte-kit/output/server/entries/pages/ukm/_slug_.svelte.js
  var slug_svelte_exports4 = {};
  __export(slug_svelte_exports4, {
    default: () => U5Bslugu5D4,
    load: () => load19
  });
  var load19, U5Bslugu5D4;
  var init_slug_svelte4 = __esm({
    ".svelte-kit/output/server/entries/pages/ukm/_slug_.svelte.js"() {
      init_index_2749e1b7();
      load19 = async ({ params, fetch: fetch2 }) => {
        const slug = params.slug;
        const res = await fetch2(`/api/ukm/${slug}.json`);
        const ukm = await res.json();
        return { props: { ukm } };
      };
      U5Bslugu5D4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
        let { ukm } = $$props;
        if ($$props.ukm === void 0 && $$bindings.ukm && ukm !== void 0)
          $$bindings.ukm(ukm);
        return `<h1><!-- HTML_TAG_START -->${ukm.title.rendered}<!-- HTML_TAG_END --></h1>
${ukm.image ? `<img${add_attribute("src", ukm.image, 0)} alt="${""}">` : ``}
<p><!-- HTML_TAG_START -->${ukm.content.rendered}<!-- HTML_TAG_END --></p>`;
      });
    }
  });

  // .svelte-kit/output/server/nodes/22.js
  var __exports23 = {};
  __export(__exports23, {
    css: () => css49,
    entry: () => entry23,
    js: () => js23,
    module: () => slug_svelte_exports4
  });
  var entry23, js23, css49;
  var init__23 = __esm({
    ".svelte-kit/output/server/nodes/22.js"() {
      init_slug_svelte4();
      entry23 = "pages/ukm/_slug_.svelte-f11fcc75.js";
      js23 = ["pages/ukm/_slug_.svelte-f11fcc75.js", "chunks/vendor-b62d7b9b.js"];
      css49 = [];
    }
  });

  // .svelte-kit/output/server/chunks/variables-cfcab96a.js
  var BASE_URL, POSTS_API_URL, UKM_API_URL, PRODUCTS_API_URL;
  var init_variables_cfcab96a = __esm({
    ".svelte-kit/output/server/chunks/variables-cfcab96a.js"() {
      BASE_URL = "https://citapen.com";
      POSTS_API_URL = "/wp-json/wp/v2/posts/";
      UKM_API_URL = "/wp-json/wp/v2/ukm/";
      PRODUCTS_API_URL = "/wp-json/wp/v2/product/";
    }
  });

  // .svelte-kit/output/server/entries/endpoints/berita.json.js
  var berita_json_exports = {};
  __export(berita_json_exports, {
    get: () => get
  });
  var get;
  var init_berita_json = __esm({
    ".svelte-kit/output/server/entries/endpoints/berita.json.js"() {
      init_variables_cfcab96a();
      get = async () => {
        const res = await fetch(`${BASE_URL}${POSTS_API_URL}?_embed`);
        const posts = await res.json();
        posts.map((post) => {
          post.image = post._embedded["wp:featuredmedia"][0].source_url;
        });
        return {
          status: 200,
          body: posts
        };
      };
    }
  });

  // .svelte-kit/output/server/entries/endpoints/api/products/products.json.js
  var products_json_exports = {};
  __export(products_json_exports, {
    get: () => get2
  });
  var get2;
  var init_products_json = __esm({
    ".svelte-kit/output/server/entries/endpoints/api/products/products.json.js"() {
      init_variables_cfcab96a();
      get2 = async () => {
        const res = await fetch(`${BASE_URL}${PRODUCTS_API_URL}?_embed`);
        const posts = await res.json();
        return {
          status: 200,
          body: posts
        };
      };
    }
  });

  // .svelte-kit/output/server/entries/endpoints/api/products/_slug_.json.js
  var slug_json_exports = {};
  __export(slug_json_exports, {
    get: () => get3
  });
  var get3;
  var init_slug_json = __esm({
    ".svelte-kit/output/server/entries/endpoints/api/products/_slug_.json.js"() {
      init_variables_cfcab96a();
      get3 = async (request) => {
        const slug = request.params.slug;
        const res = await fetch(`${BASE_URL}${PRODUCTS_API_URL}?slug=${slug}&_embed`);
        const posts = await res.json();
        const post = posts[0];
        post.image = post._embedded["wp:featuredmedia"][0].source_url;
        return {
          status: 200,
          body: post
        };
      };
    }
  });

  // .svelte-kit/output/server/entries/endpoints/api/rss.xml.ts.js
  var rss_xml_ts_exports = {};
  __export(rss_xml_ts_exports, {
    get: () => get4
  });
  var get4, render;
  var init_rss_xml_ts = __esm({
    ".svelte-kit/output/server/entries/endpoints/api/rss.xml.ts.js"() {
      init_fetchPosts_bc4b2a22();
      get4 = async () => {
        const data = await fetchPosts();
        const body = render(data);
        const headers = {
          "Cache-Control": `max-age=0, s-maxage=3600`,
          "Content-Type": "application/xml"
        };
        return {
          status: 200,
          body,
          headers
        };
      };
      render = (posts) => `<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Ricky Januari</title>
<description>Ricky Januari</description>
<link>https://rickyjanuari.com</link>
<atom:link href="https://rickyjanuari.com/rss.xml" rel="self" type="application/rss+xml"/>
${posts.map((post) => `<item>
<guid isPermaLink="true">https://rickyjanuari.com/blog/${post.slug}</guid>
<title>${post.title}</title>
<link>https://rickyjanuari.com/blog/${post.slug}</link>
<description>${post.excerpt}</description>
<pubDate>${new Date(post.date).toUTCString()}</pubDate>
</item>`).join("")}
</channel>
</rss>
`;
    }
  });

  // .svelte-kit/output/server/entries/endpoints/api/berita/berita.json.js
  var berita_json_exports2 = {};
  __export(berita_json_exports2, {
    get: () => get5
  });
  var get5;
  var init_berita_json2 = __esm({
    ".svelte-kit/output/server/entries/endpoints/api/berita/berita.json.js"() {
      init_variables_cfcab96a();
      get5 = async () => {
        const res = await fetch(`${BASE_URL}${POSTS_API_URL}?_embed`);
        const posts = await res.json();
        return {
          status: 200,
          body: posts
        };
      };
    }
  });

  // .svelte-kit/output/server/entries/endpoints/api/berita/_slug_.json.js
  var slug_json_exports2 = {};
  __export(slug_json_exports2, {
    get: () => get6
  });
  var get6;
  var init_slug_json2 = __esm({
    ".svelte-kit/output/server/entries/endpoints/api/berita/_slug_.json.js"() {
      init_variables_cfcab96a();
      get6 = async (request) => {
        const slug = request.params.slug;
        const res = await fetch(`${BASE_URL}${POSTS_API_URL}?slug=${slug}&_embed`);
        const posts = await res.json();
        const post = posts[0];
        post.image = post._embedded["wp:featuredmedia"][0].source_url;
        return {
          status: 200,
          body: post
        };
      };
    }
  });

  // .svelte-kit/output/server/entries/endpoints/api/posts/index.json.ts.js
  var index_json_ts_exports = {};
  __export(index_json_ts_exports, {
    get: () => get7
  });
  var get7;
  var init_index_json_ts = __esm({
    ".svelte-kit/output/server/entries/endpoints/api/posts/index.json.ts.js"() {
      init_fetchPosts_bc4b2a22();
      get7 = async ({ url }) => {
        const params = new URLSearchParams(url.search);
        const options = {
          offset: parseInt(params.get("offset")) || null,
          limit: parseInt(params.get("limit")) || 10
        };
        try {
          const posts = await fetchPosts({ ...options });
          return {
            status: 200,
            body: {
              posts
            }
          };
        } catch {
          return {
            status: 500,
            body: {
              error: "Could not fetch posts."
            }
          };
        }
      };
    }
  });

  // .svelte-kit/output/server/entries/endpoints/api/posts/count.json.ts.js
  var count_json_ts_exports = {};
  __export(count_json_ts_exports, {
    get: () => get8
  });
  var get8;
  var init_count_json_ts = __esm({
    ".svelte-kit/output/server/entries/endpoints/api/posts/count.json.ts.js"() {
      get8 = async () => {
        let posts;
        {
          posts = { "../../blog/_posts/12-things.md": () => Promise.resolve().then(() => (init_things_949a7b41(), things_949a7b41_exports)), "../../blog/_posts/8-student-portfolio-mistakes.md": () => Promise.resolve().then(() => (init_student_portfolio_mistakes_97ac2775(), student_portfolio_mistakes_97ac2775_exports)), "../../blog/_posts/a-new-headless-site-with-gridsome.md": () => Promise.resolve().then(() => (init_a_new_headless_site_with_gridsome_c6997bd9(), a_new_headless_site_with_gridsome_c6997bd9_exports)), "../../blog/_posts/add-blog-comments-static-site.md": () => Promise.resolve().then(() => (init_add_blog_comments_static_site_7efb9968(), add_blog_comments_static_site_7efb9968_exports)), "../../blog/_posts/adding-gutenberg-full-and-wide-width-image-support-to-your-wordpress-theme.md": () => Promise.resolve().then(() => (init_adding_gutenberg_full_and_wide_width_image_support_to_your_wordpress_theme_5d471a4a(), adding_gutenberg_full_and_wide_width_image_support_to_your_wordpress_theme_5d471a4a_exports)), "../../blog/_posts/announcing-quina-my-first-app.md": () => Promise.resolve().then(() => (init_announcing_quina_my_first_app_2ec1b56e(), announcing_quina_my_first_app_2ec1b56e_exports)), "../../blog/_posts/build-static-sveltekit-markdown-blog.md": () => Promise.resolve().then(() => (init_build_static_sveltekit_markdown_blog_50359119(), build_static_sveltekit_markdown_blog_50359119_exports)), "../../blog/_posts/confirm-all-ids-are-unique-in-an-array-of-javascript-objects-using-map-and-sets.md": () => Promise.resolve().then(() => (init_confirm_all_ids_are_unique_in_an_array_of_javascript_objects_using_map_and_sets_2947b46d(), confirm_all_ids_are_unique_in_an_array_of_javascript_objects_using_map_and_sets_2947b46d_exports)), "../../blog/_posts/converting-from-gridsome-to-sveltekit.md": () => Promise.resolve().then(() => (init_converting_from_gridsome_to_sveltekit_87f9ea4f(), converting_from_gridsome_to_sveltekit_87f9ea4f_exports)), "../../blog/_posts/creating-custom-gutenberg-blocks-with-the-block-lab-plugin.md": () => Promise.resolve().then(() => (init_creating_custom_gutenberg_blocks_with_the_block_lab_plugin_6d622b1c(), creating_custom_gutenberg_blocks_with_the_block_lab_plugin_6d622b1c_exports)), "../../blog/_posts/essential-tools-wordpress-development.md": () => Promise.resolve().then(() => (init_essential_tools_wordpress_development_2b28f9a5(), essential_tools_wordpress_development_2b28f9a5_exports)), "../../blog/_posts/filetypes.md": () => Promise.resolve().then(() => (init_filetypes_55ad3bb8(), filetypes_55ad3bb8_exports)), "../../blog/_posts/five-ways-to-become-a-better-designer-that-arent-design.md": () => Promise.resolve().then(() => (init_five_ways_to_become_a_better_designer_that_arent_design_bb2117e3(), five_ways_to_become_a_better_designer_that_arent_design_bb2117e3_exports)), "../../blog/_posts/goodbye-instagram.md": () => Promise.resolve().then(() => (init_goodbye_instagram_09f06d13(), goodbye_instagram_09f06d13_exports)), "../../blog/_posts/goodbye-wordpress.md": () => Promise.resolve().then(() => (init_goodbye_wordpress_de96e921(), goodbye_wordpress_de96e921_exports)), "../../blog/_posts/how-to-connect-local-with-codekit.md": () => Promise.resolve().then(() => (init_how_to_connect_local_with_codekit_cf46e021(), how_to_connect_local_with_codekit_cf46e021_exports)), "../../blog/_posts/introducing-svelte-comparing-with-react-vue.md": () => Promise.resolve().then(() => (init_introducing_svelte_comparing_with_react_vue_f7387ef5(), introducing_svelte_comparing_with_react_vue_f7387ef5_exports)), "../../blog/_posts/lets-learn-css-variables.md": () => Promise.resolve().then(() => (init_lets_learn_css_variables_7d1d9c23(), lets_learn_css_variables_7d1d9c23_exports)), "../../blog/_posts/new-site-new-theme-for-2018.md": () => Promise.resolve().then(() => (init_new_site_new_theme_for_2018_dcc2dfe4(), new_site_new_theme_for_2018_dcc2dfe4_exports)), "../../blog/_posts/pantone.md": () => Promise.resolve().then(() => (init_pantone_40caa47d(), pantone_40caa47d_exports)), "../../blog/_posts/profit-is-not-a-value.md": () => Promise.resolve().then(() => (init_profit_is_not_a_value_97b16a49(), profit_is_not_a_value_97b16a49_exports)), "../../blog/_posts/the-five-things-i-wish-somebody-had-told-me-as-a-design-student.md": () => Promise.resolve().then(() => (init_the_five_things_i_wish_somebody_had_told_me_as_a_design_student_e793bf01(), the_five_things_i_wish_somebody_had_told_me_as_a_design_student_e793bf01_exports)), "../../blog/_posts/why-designers-shouldnt-remake-other-designers-logos.md": () => Promise.resolve().then(() => (init_why_designers_shouldnt_remake_other_designers_logos_9be49eae(), why_designers_shouldnt_remake_other_designers_logos_9be49eae_exports)), "../../blog/_posts/wordpress-child-theme-explanation.md": () => Promise.resolve().then(() => (init_wordpress_child_theme_explanation_ffa0277c(), wordpress_child_theme_explanation_ffa0277c_exports)) };
        }
        try {
          return {
            status: 200,
            body: {
              total: Object.keys(posts).length
            }
          };
        } catch {
          return {
            status: 500,
            body: {
              error: "Could not retrieve total number of posts."
            }
          };
        }
      };
    }
  });

  // .svelte-kit/output/server/entries/endpoints/api/ukm/ukm.json.js
  var ukm_json_exports = {};
  __export(ukm_json_exports, {
    get: () => get9
  });
  var get9;
  var init_ukm_json = __esm({
    ".svelte-kit/output/server/entries/endpoints/api/ukm/ukm.json.js"() {
      init_variables_cfcab96a();
      get9 = async () => {
        const res = await fetch(`${BASE_URL}${UKM_API_URL}?_embed`);
        const ukms = await res.json();
        return {
          status: 200,
          body: ukms
        };
      };
    }
  });

  // .svelte-kit/output/server/entries/endpoints/api/ukm/_slug_.json.js
  var slug_json_exports3 = {};
  __export(slug_json_exports3, {
    get: () => get10
  });
  var get10;
  var init_slug_json3 = __esm({
    ".svelte-kit/output/server/entries/endpoints/api/ukm/_slug_.json.js"() {
      init_variables_cfcab96a();
      get10 = async (request) => {
        const slug = request.params.slug;
        const res = await fetch(`${BASE_URL}${UKM_API_URL}?slug=${slug}&_embed`);
        const ukms = await res.json();
        const ukm = ukms[0];
        ukm.image = ukm._embedded["wp:featuredmedia"][0].source_url;
        return {
          status: 200,
          body: ukm
        };
      };
    }
  });

  // .svelte-kit/cloudflare-workers-tmp/node_modules/mime/Mime.js
  var require_Mime = __commonJS({
    ".svelte-kit/cloudflare-workers-tmp/node_modules/mime/Mime.js"(exports, module) {
      "use strict";
      function Mime() {
        this._types = /* @__PURE__ */ Object.create(null);
        this._extensions = /* @__PURE__ */ Object.create(null);
        for (let i = 0; i < arguments.length; i++) {
          this.define(arguments[i]);
        }
        this.define = this.define.bind(this);
        this.getType = this.getType.bind(this);
        this.getExtension = this.getExtension.bind(this);
      }
      Mime.prototype.define = function(typeMap, force) {
        for (let type in typeMap) {
          let extensions = typeMap[type].map(function(t) {
            return t.toLowerCase();
          });
          type = type.toLowerCase();
          for (let i = 0; i < extensions.length; i++) {
            const ext = extensions[i];
            if (ext[0] === "*") {
              continue;
            }
            if (!force && ext in this._types) {
              throw new Error('Attempt to change mapping for "' + ext + '" extension from "' + this._types[ext] + '" to "' + type + '". Pass `force=true` to allow this, otherwise remove "' + ext + '" from the list of extensions for "' + type + '".');
            }
            this._types[ext] = type;
          }
          if (force || !this._extensions[type]) {
            const ext = extensions[0];
            this._extensions[type] = ext[0] !== "*" ? ext : ext.substr(1);
          }
        }
      };
      Mime.prototype.getType = function(path) {
        path = String(path);
        let last = path.replace(/^.*[/\\]/, "").toLowerCase();
        let ext = last.replace(/^.*\./, "").toLowerCase();
        let hasPath = last.length < path.length;
        let hasDot = ext.length < last.length - 1;
        return (hasDot || !hasPath) && this._types[ext] || null;
      };
      Mime.prototype.getExtension = function(type) {
        type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
        return type && this._extensions[type.toLowerCase()] || null;
      };
      module.exports = Mime;
    }
  });

  // .svelte-kit/cloudflare-workers-tmp/node_modules/mime/types/standard.js
  var require_standard = __commonJS({
    ".svelte-kit/cloudflare-workers-tmp/node_modules/mime/types/standard.js"(exports, module) {
      module.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["es", "ecma"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/express": ["exp"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/trig": ["trig"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/step+xml": ["stpx"], "model/step+zip": ["stpz"], "model/step-xml+zip": ["stpxz"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] };
    }
  });

  // .svelte-kit/cloudflare-workers-tmp/node_modules/mime/types/other.js
  var require_other = __commonJS({
    ".svelte-kit/cloudflare-workers-tmp/node_modules/mime/types/other.js"(exports, module) {
      module.exports = { "application/prs.cww": ["cww"], "application/vnd.1000minds.decision-model+xml": ["1km"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.keynote": ["key"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.numbers": ["numbers"], "application/vnd.apple.pages": ["pages"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.balsamiq.bmml+xml": ["bmml"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.citationstyles.style+xml": ["csl"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dbf": ["dbf"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mapbox-vector-tile": ["mvt"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["*stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.ac+xml": ["*ac"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openblox.game+xml": ["obgx"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openstreetmap.data+xml": ["osm"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.rar": ["rar"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.software602.filler.form+xml": ["fo"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.syncml.dmddf+xml": ["ddf"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": ["*dmg"], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": ["*bdoc"], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["*deb", "udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": ["*iso"], "application/x-iwork-keynote-sffkey": ["*key"], "application/x-iwork-numbers-sffnumbers": ["*numbers"], "application/x-iwork-pages-sffpages": ["*pages"], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-keepass2": ["kdbx"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": ["*exe"], "application/x-msdownload": ["*exe", "*dll", "com", "bat", "*msi"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["*wmf", "*wmz", "*emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": ["*prc", "*pdb"], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["*rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["*obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["*xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": ["*m4a"], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": ["*ra"], "audio/x-wav": ["*wav"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "image/prs.btif": ["btif"], "image/prs.pti": ["pti"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.airzip.accelerator.azv": ["azv"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": ["*sub"], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.microsoft.icon": ["ico"], "image/vnd.ms-dds": ["dds"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.pco.b16": ["b16"], "image/vnd.tencent.tap": ["tap"], "image/vnd.valve.source.texture": ["vtf"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/vnd.zbrush.pcx": ["pcx"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["*ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": ["*bmp"], "image/x-pcx": ["*pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/vnd.wfa.wsc": ["wsc"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.opengex": ["ogex"], "model/vnd.parasolid.transmit.binary": ["x_b"], "model/vnd.parasolid.transmit.text": ["x_t"], "model/vnd.sap.vds": ["vds"], "model/vnd.usdz+zip": ["usdz"], "model/vnd.valve.source.compiled-map": ["bsp"], "model/vnd.vtu": ["vtu"], "text/prs.lines.tag": ["dsc"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": ["*org"], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
    }
  });

  // .svelte-kit/cloudflare-workers-tmp/node_modules/mime/index.js
  var require_mime = __commonJS({
    ".svelte-kit/cloudflare-workers-tmp/node_modules/mime/index.js"(exports, module) {
      "use strict";
      var Mime = require_Mime();
      module.exports = new Mime(require_standard(), require_other());
    }
  });

  // .svelte-kit/cloudflare-workers-tmp/node_modules/@cloudflare/kv-asset-handler/dist/types.js
  var require_types = __commonJS({
    ".svelte-kit/cloudflare-workers-tmp/node_modules/@cloudflare/kv-asset-handler/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InternalError = exports.NotFoundError = exports.MethodNotAllowedError = exports.KVError = void 0;
      var KVError = class extends Error {
        constructor(message, status = 500) {
          super(message);
          Object.setPrototypeOf(this, new.target.prototype);
          this.name = KVError.name;
          this.status = status;
        }
      };
      exports.KVError = KVError;
      var MethodNotAllowedError = class extends KVError {
        constructor(message = `Not a valid request method`, status = 405) {
          super(message, status);
        }
      };
      exports.MethodNotAllowedError = MethodNotAllowedError;
      var NotFoundError = class extends KVError {
        constructor(message = `Not Found`, status = 404) {
          super(message, status);
        }
      };
      exports.NotFoundError = NotFoundError;
      var InternalError = class extends KVError {
        constructor(message = `Internal Error in KV Asset Handler`, status = 500) {
          super(message, status);
        }
      };
      exports.InternalError = InternalError;
    }
  });

  // .svelte-kit/cloudflare-workers-tmp/node_modules/@cloudflare/kv-asset-handler/dist/index.js
  var require_dist = __commonJS({
    ".svelte-kit/cloudflare-workers-tmp/node_modules/@cloudflare/kv-asset-handler/dist/index.js"(exports) {
      "use strict";
      var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          });
        }
        return new (P || (P = Promise))(function(resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InternalError = exports.NotFoundError = exports.MethodNotAllowedError = exports.serveSinglePageApp = exports.mapRequestToAsset = exports.getAssetFromKV = void 0;
      var mime = require_mime();
      var types_1 = require_types();
      Object.defineProperty(exports, "MethodNotAllowedError", { enumerable: true, get: function() {
        return types_1.MethodNotAllowedError;
      } });
      Object.defineProperty(exports, "NotFoundError", { enumerable: true, get: function() {
        return types_1.NotFoundError;
      } });
      Object.defineProperty(exports, "InternalError", { enumerable: true, get: function() {
        return types_1.InternalError;
      } });
      var defaultCacheControl = {
        browserTTL: null,
        edgeTTL: 2 * 60 * 60 * 24,
        bypassCache: false
      };
      var parseStringAsObject = (maybeString) => typeof maybeString === "string" ? JSON.parse(maybeString) : maybeString;
      var getAssetFromKVDefaultOptions = {
        ASSET_NAMESPACE: typeof __STATIC_CONTENT !== "undefined" ? __STATIC_CONTENT : void 0,
        ASSET_MANIFEST: typeof __STATIC_CONTENT_MANIFEST !== "undefined" ? parseStringAsObject(__STATIC_CONTENT_MANIFEST) : void 0,
        cacheControl: defaultCacheControl,
        defaultMimeType: "text/plain",
        defaultDocument: "index.html"
      };
      function assignOptions(options) {
        return Object.assign({}, getAssetFromKVDefaultOptions, options);
      }
      var mapRequestToAsset = (request, options) => {
        options = assignOptions(options);
        const parsedUrl = new URL(request.url);
        let pathname = parsedUrl.pathname;
        if (pathname.endsWith("/")) {
          pathname = pathname.concat(options.defaultDocument);
        } else if (!mime.getType(pathname)) {
          pathname = pathname.concat("/" + options.defaultDocument);
        }
        parsedUrl.pathname = pathname;
        return new Request(parsedUrl.toString(), request);
      };
      exports.mapRequestToAsset = mapRequestToAsset;
      function serveSinglePageApp(request, options) {
        options = assignOptions(options);
        request = mapRequestToAsset(request, options);
        const parsedUrl = new URL(request.url);
        if (parsedUrl.pathname.endsWith(".html")) {
          return new Request(`${parsedUrl.origin}/${options.defaultDocument}`, request);
        } else {
          return request;
        }
      }
      exports.serveSinglePageApp = serveSinglePageApp;
      var getAssetFromKV2 = (event, options) => __awaiter(void 0, void 0, void 0, function* () {
        options = assignOptions(options);
        const request = event.request;
        const ASSET_NAMESPACE = options.ASSET_NAMESPACE;
        const ASSET_MANIFEST = parseStringAsObject(options.ASSET_MANIFEST);
        if (typeof ASSET_NAMESPACE === "undefined") {
          throw new types_1.InternalError(`there is no KV namespace bound to the script`);
        }
        const rawPathKey = new URL(request.url).pathname.replace(/^\/+/, "");
        let pathIsEncoded = false;
        let requestKey;
        if (options.mapRequestToAsset) {
          requestKey = options.mapRequestToAsset(request);
        } else if (ASSET_MANIFEST[rawPathKey]) {
          requestKey = request;
        } else if (ASSET_MANIFEST[decodeURIComponent(rawPathKey)]) {
          pathIsEncoded = true;
          requestKey = request;
        } else {
          const mappedRequest = mapRequestToAsset(request);
          const mappedRawPathKey = new URL(mappedRequest.url).pathname.replace(/^\/+/, "");
          if (ASSET_MANIFEST[decodeURIComponent(mappedRawPathKey)]) {
            pathIsEncoded = true;
            requestKey = mappedRequest;
          } else {
            requestKey = mapRequestToAsset(request, options);
          }
        }
        const SUPPORTED_METHODS = ["GET", "HEAD"];
        if (!SUPPORTED_METHODS.includes(requestKey.method)) {
          throw new types_1.MethodNotAllowedError(`${requestKey.method} is not a valid request method`);
        }
        const parsedUrl = new URL(requestKey.url);
        const pathname = pathIsEncoded ? decodeURIComponent(parsedUrl.pathname) : parsedUrl.pathname;
        let pathKey = pathname.replace(/^\/+/, "");
        const cache = caches.default;
        let mimeType = mime.getType(pathKey) || options.defaultMimeType;
        if (mimeType.startsWith("text") || mimeType === "application/javascript") {
          mimeType += "; charset=utf-8";
        }
        let shouldEdgeCache = false;
        if (typeof ASSET_MANIFEST !== "undefined") {
          if (ASSET_MANIFEST[pathKey]) {
            pathKey = ASSET_MANIFEST[pathKey];
            shouldEdgeCache = true;
          }
        }
        let cacheKey = new Request(`${parsedUrl.origin}/${pathKey}`, request);
        const evalCacheOpts = (() => {
          switch (typeof options.cacheControl) {
            case "function":
              return options.cacheControl(request);
            case "object":
              return options.cacheControl;
            default:
              return defaultCacheControl;
          }
        })();
        const formatETag = (entityId = pathKey, validatorType = "strong") => {
          if (!entityId) {
            return "";
          }
          switch (validatorType) {
            case "weak":
              if (!entityId.startsWith("W/")) {
                return `W/${entityId}`;
              }
              return entityId;
            case "strong":
              if (entityId.startsWith(`W/"`)) {
                entityId = entityId.replace("W/", "");
              }
              if (!entityId.endsWith(`"`)) {
                entityId = `"${entityId}"`;
              }
              return entityId;
            default:
              return "";
          }
        };
        options.cacheControl = Object.assign({}, defaultCacheControl, evalCacheOpts);
        if (options.cacheControl.bypassCache || options.cacheControl.edgeTTL === null || request.method == "HEAD") {
          shouldEdgeCache = false;
        }
        const shouldSetBrowserCache = typeof options.cacheControl.browserTTL === "number";
        let response = null;
        if (shouldEdgeCache) {
          response = yield cache.match(cacheKey);
        }
        if (response) {
          if (response.status > 300 && response.status < 400) {
            if (response.body && "cancel" in Object.getPrototypeOf(response.body)) {
              response.body.cancel();
              console.log("Body exists and environment supports readable streams. Body cancelled");
            } else {
              console.log("Environment doesnt support readable streams");
            }
            response = new Response(null, response);
          } else {
            let opts = {
              headers: new Headers(response.headers),
              status: 0,
              statusText: ""
            };
            opts.headers.set("cf-cache-status", "HIT");
            if (response.status) {
              opts.status = response.status;
              opts.statusText = response.statusText;
            } else if (opts.headers.has("Content-Range")) {
              opts.status = 206;
              opts.statusText = "Partial Content";
            } else {
              opts.status = 200;
              opts.statusText = "OK";
            }
            response = new Response(response.body, opts);
          }
        } else {
          const body = yield ASSET_NAMESPACE.get(pathKey, "arrayBuffer");
          if (body === null) {
            throw new types_1.NotFoundError(`could not find ${pathKey} in your content namespace`);
          }
          response = new Response(body);
          if (shouldEdgeCache) {
            response.headers.set("Accept-Ranges", "bytes");
            response.headers.set("Content-Length", body.length);
            if (!response.headers.has("etag")) {
              response.headers.set("etag", formatETag(pathKey, "strong"));
            }
            response.headers.set("Cache-Control", `max-age=${options.cacheControl.edgeTTL}`);
            event.waitUntil(cache.put(cacheKey, response.clone()));
            response.headers.set("CF-Cache-Status", "MISS");
          }
        }
        response.headers.set("Content-Type", mimeType);
        if (response.status === 304) {
          let etag = formatETag(response.headers.get("etag"), "strong");
          let ifNoneMatch = cacheKey.headers.get("if-none-match");
          let proxyCacheStatus = response.headers.get("CF-Cache-Status");
          if (etag) {
            if (ifNoneMatch && ifNoneMatch === etag && proxyCacheStatus === "MISS") {
              response.headers.set("CF-Cache-Status", "EXPIRED");
            } else {
              response.headers.set("CF-Cache-Status", "REVALIDATED");
            }
            response.headers.set("etag", formatETag(etag, "weak"));
          }
        }
        if (shouldSetBrowserCache) {
          response.headers.set("Cache-Control", `max-age=${options.cacheControl.browserTTL}`);
        } else {
          response.headers.delete("Cache-Control");
        }
        return response;
      });
      exports.getAssetFromKV = getAssetFromKV2;
    }
  });

  // .svelte-kit/output/server/index.js
  init_index_2749e1b7();
  var __accessCheck = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet = (obj, member, getter) => {
    __accessCheck(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet = (obj, member, value, setter) => {
    __accessCheck(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _use_hashes;
  var _dev;
  var _script_needs_csp;
  var _style_needs_csp;
  var _directives;
  var _script_src;
  var _style_src;
  function afterUpdate() {
  }
  var Root = create_ssr_component(($$result, $$props, $$bindings, slots) => {
    let { stores } = $$props;
    let { page } = $$props;
    let { components } = $$props;
    let { props_0 = null } = $$props;
    let { props_1 = null } = $$props;
    let { props_2 = null } = $$props;
    let { props_3 = null } = $$props;
    setContext("__svelte__", stores);
    afterUpdate(stores.page.notify);
    if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0)
      $$bindings.stores(stores);
    if ($$props.page === void 0 && $$bindings.page && page !== void 0)
      $$bindings.page(page);
    if ($$props.components === void 0 && $$bindings.components && components !== void 0)
      $$bindings.components(components);
    if ($$props.props_0 === void 0 && $$bindings.props_0 && props_0 !== void 0)
      $$bindings.props_0(props_0);
    if ($$props.props_1 === void 0 && $$bindings.props_1 && props_1 !== void 0)
      $$bindings.props_1(props_1);
    if ($$props.props_2 === void 0 && $$bindings.props_2 && props_2 !== void 0)
      $$bindings.props_2(props_2);
    if ($$props.props_3 === void 0 && $$bindings.props_3 && props_3 !== void 0)
      $$bindings.props_3(props_3);
    {
      stores.page.set(page);
    }
    return `


${components[1] ? `${validate_component(components[0] || missing_component, "svelte:component").$$render($$result, Object.assign(props_0 || {}), {}, {
      default: () => {
        return `${components[2] ? `${validate_component(components[1] || missing_component, "svelte:component").$$render($$result, Object.assign(props_1 || {}), {}, {
          default: () => {
            return `${components[3] ? `${validate_component(components[2] || missing_component, "svelte:component").$$render($$result, Object.assign(props_2 || {}), {}, {
              default: () => {
                return `${validate_component(components[3] || missing_component, "svelte:component").$$render($$result, Object.assign(props_3 || {}), {}, {})}`;
              }
            })}` : `${validate_component(components[2] || missing_component, "svelte:component").$$render($$result, Object.assign(props_2 || {}), {}, {})}`}`;
          }
        })}` : `${validate_component(components[1] || missing_component, "svelte:component").$$render($$result, Object.assign(props_1 || {}), {}, {})}`}`;
      }
    })}` : `${validate_component(components[0] || missing_component, "svelte:component").$$render($$result, Object.assign(props_0 || {}), {}, {})}`}

${``}`;
  });
  function to_headers(object) {
    const headers = new Headers();
    if (object) {
      for (const key2 in object) {
        const value = object[key2];
        if (!value)
          continue;
        if (Array.isArray(value)) {
          value.forEach((value2) => {
            headers.append(key2, value2);
          });
        } else {
          headers.set(key2, value);
        }
      }
    }
    return headers;
  }
  function hash(value) {
    let hash2 = 5381;
    let i = value.length;
    if (typeof value === "string") {
      while (i)
        hash2 = hash2 * 33 ^ value.charCodeAt(--i);
    } else {
      while (i)
        hash2 = hash2 * 33 ^ value[--i];
    }
    return (hash2 >>> 0).toString(36);
  }
  function lowercase_keys(obj) {
    const clone = {};
    for (const key2 in obj) {
      clone[key2.toLowerCase()] = obj[key2];
    }
    return clone;
  }
  function decode_params(params) {
    for (const key2 in params) {
      params[key2] = params[key2].replace(/%23/g, "#").replace(/%3[Bb]/g, ";").replace(/%2[Cc]/g, ",").replace(/%2[Ff]/g, "/").replace(/%3[Ff]/g, "?").replace(/%3[Aa]/g, ":").replace(/%40/g, "@").replace(/%26/g, "&").replace(/%3[Dd]/g, "=").replace(/%2[Bb]/g, "+").replace(/%24/g, "$");
    }
    return params;
  }
  function is_pojo(body) {
    if (typeof body !== "object")
      return false;
    if (body) {
      if (body instanceof Uint8Array)
        return false;
      if (body._readableState && typeof body.pipe === "function")
        return false;
      if (typeof ReadableStream !== "undefined" && body instanceof ReadableStream)
        return false;
    }
    return true;
  }
  function normalize_request_method(event) {
    const method = event.request.method.toLowerCase();
    return method === "delete" ? "del" : method;
  }
  function error(body) {
    return new Response(body, {
      status: 500
    });
  }
  function is_string(s2) {
    return typeof s2 === "string" || s2 instanceof String;
  }
  var text_types = /* @__PURE__ */ new Set([
    "application/xml",
    "application/json",
    "application/x-www-form-urlencoded",
    "multipart/form-data"
  ]);
  function is_text(content_type) {
    if (!content_type)
      return true;
    const type = content_type.split(";")[0].toLowerCase();
    return type.startsWith("text/") || type.endsWith("+xml") || text_types.has(type);
  }
  async function render_endpoint(event, mod) {
    const method = normalize_request_method(event);
    let handler = mod[method];
    if (!handler && method === "head") {
      handler = mod.get;
    }
    if (!handler) {
      return event.request.headers.get("x-sveltekit-load") ? new Response(void 0, {
        status: 204
      }) : new Response("Method not allowed", {
        status: 405
      });
    }
    const response = await handler(event);
    const preface = `Invalid response from route ${event.url.pathname}`;
    if (typeof response !== "object") {
      return error(`${preface}: expected an object, got ${typeof response}`);
    }
    if (response.fallthrough) {
      throw new Error("fallthrough is no longer supported. Use matchers instead: https://kit.svelte.dev/docs/routing#advanced-routing-matching");
    }
    const { status = 200, body = {} } = response;
    const headers = response.headers instanceof Headers ? new Headers(response.headers) : to_headers(response.headers);
    const type = headers.get("content-type");
    if (!is_text(type) && !(body instanceof Uint8Array || is_string(body))) {
      return error(`${preface}: body must be an instance of string or Uint8Array if content-type is not a supported textual content-type`);
    }
    let normalized_body;
    if (is_pojo(body) && (!type || type.startsWith("application/json"))) {
      headers.set("content-type", "application/json; charset=utf-8");
      normalized_body = JSON.stringify(body);
    } else {
      normalized_body = body;
    }
    if ((typeof normalized_body === "string" || normalized_body instanceof Uint8Array) && !headers.has("etag")) {
      const cache_control = headers.get("cache-control");
      if (!cache_control || !/(no-store|immutable)/.test(cache_control)) {
        headers.set("etag", `"${hash(normalized_body)}"`);
      }
    }
    return new Response(method !== "head" ? normalized_body : void 0, {
      status,
      headers
    });
  }
  var chars$1 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$";
  var unsafeChars = /[<>\b\f\n\r\t\0\u2028\u2029]/g;
  var reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
  var escaped2 = {
    "<": "\\u003C",
    ">": "\\u003E",
    "/": "\\u002F",
    "\\": "\\\\",
    "\b": "\\b",
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "	": "\\t",
    "\0": "\\0",
    "\u2028": "\\u2028",
    "\u2029": "\\u2029"
  };
  var objectProtoOwnPropertyNames = Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
  function devalue(value) {
    var counts = /* @__PURE__ */ new Map();
    function walk(thing) {
      if (typeof thing === "function") {
        throw new Error("Cannot stringify a function");
      }
      if (counts.has(thing)) {
        counts.set(thing, counts.get(thing) + 1);
        return;
      }
      counts.set(thing, 1);
      if (!isPrimitive(thing)) {
        var type = getType(thing);
        switch (type) {
          case "Number":
          case "String":
          case "Boolean":
          case "Date":
          case "RegExp":
            return;
          case "Array":
            thing.forEach(walk);
            break;
          case "Set":
          case "Map":
            Array.from(thing).forEach(walk);
            break;
          default:
            var proto = Object.getPrototypeOf(thing);
            if (proto !== Object.prototype && proto !== null && Object.getOwnPropertyNames(proto).sort().join("\0") !== objectProtoOwnPropertyNames) {
              throw new Error("Cannot stringify arbitrary non-POJOs");
            }
            if (Object.getOwnPropertySymbols(thing).length > 0) {
              throw new Error("Cannot stringify POJOs with symbolic keys");
            }
            Object.keys(thing).forEach(function(key2) {
              return walk(thing[key2]);
            });
        }
      }
    }
    walk(value);
    var names = /* @__PURE__ */ new Map();
    Array.from(counts).filter(function(entry24) {
      return entry24[1] > 1;
    }).sort(function(a, b) {
      return b[1] - a[1];
    }).forEach(function(entry24, i) {
      names.set(entry24[0], getName(i));
    });
    function stringify(thing) {
      if (names.has(thing)) {
        return names.get(thing);
      }
      if (isPrimitive(thing)) {
        return stringifyPrimitive(thing);
      }
      var type = getType(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
          return "Object(" + stringify(thing.valueOf()) + ")";
        case "RegExp":
          return "new RegExp(" + stringifyString(thing.source) + ', "' + thing.flags + '")';
        case "Date":
          return "new Date(" + thing.getTime() + ")";
        case "Array":
          var members = thing.map(function(v, i) {
            return i in thing ? stringify(v) : "";
          });
          var tail = thing.length === 0 || thing.length - 1 in thing ? "" : ",";
          return "[" + members.join(",") + tail + "]";
        case "Set":
        case "Map":
          return "new " + type + "([" + Array.from(thing).map(stringify).join(",") + "])";
        default:
          var obj = "{" + Object.keys(thing).map(function(key2) {
            return safeKey(key2) + ":" + stringify(thing[key2]);
          }).join(",") + "}";
          var proto = Object.getPrototypeOf(thing);
          if (proto === null) {
            return Object.keys(thing).length > 0 ? "Object.assign(Object.create(null)," + obj + ")" : "Object.create(null)";
          }
          return obj;
      }
    }
    var str = stringify(value);
    if (names.size) {
      var params_1 = [];
      var statements_1 = [];
      var values_1 = [];
      names.forEach(function(name, thing) {
        params_1.push(name);
        if (isPrimitive(thing)) {
          values_1.push(stringifyPrimitive(thing));
          return;
        }
        var type = getType(thing);
        switch (type) {
          case "Number":
          case "String":
          case "Boolean":
            values_1.push("Object(" + stringify(thing.valueOf()) + ")");
            break;
          case "RegExp":
            values_1.push(thing.toString());
            break;
          case "Date":
            values_1.push("new Date(" + thing.getTime() + ")");
            break;
          case "Array":
            values_1.push("Array(" + thing.length + ")");
            thing.forEach(function(v, i) {
              statements_1.push(name + "[" + i + "]=" + stringify(v));
            });
            break;
          case "Set":
            values_1.push("new Set");
            statements_1.push(name + "." + Array.from(thing).map(function(v) {
              return "add(" + stringify(v) + ")";
            }).join("."));
            break;
          case "Map":
            values_1.push("new Map");
            statements_1.push(name + "." + Array.from(thing).map(function(_a) {
              var k = _a[0], v = _a[1];
              return "set(" + stringify(k) + ", " + stringify(v) + ")";
            }).join("."));
            break;
          default:
            values_1.push(Object.getPrototypeOf(thing) === null ? "Object.create(null)" : "{}");
            Object.keys(thing).forEach(function(key2) {
              statements_1.push("" + name + safeProp(key2) + "=" + stringify(thing[key2]));
            });
        }
      });
      statements_1.push("return " + str);
      return "(function(" + params_1.join(",") + "){" + statements_1.join(";") + "}(" + values_1.join(",") + "))";
    } else {
      return str;
    }
  }
  function getName(num) {
    var name = "";
    do {
      name = chars$1[num % chars$1.length] + name;
      num = ~~(num / chars$1.length) - 1;
    } while (num >= 0);
    return reserved.test(name) ? name + "_" : name;
  }
  function isPrimitive(thing) {
    return Object(thing) !== thing;
  }
  function stringifyPrimitive(thing) {
    if (typeof thing === "string")
      return stringifyString(thing);
    if (thing === void 0)
      return "void 0";
    if (thing === 0 && 1 / thing < 0)
      return "-0";
    var str = String(thing);
    if (typeof thing === "number")
      return str.replace(/^(-)?0\./, "$1.");
    return str;
  }
  function getType(thing) {
    return Object.prototype.toString.call(thing).slice(8, -1);
  }
  function escapeUnsafeChar(c) {
    return escaped2[c] || c;
  }
  function escapeUnsafeChars(str) {
    return str.replace(unsafeChars, escapeUnsafeChar);
  }
  function safeKey(key2) {
    return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key2) ? key2 : escapeUnsafeChars(JSON.stringify(key2));
  }
  function safeProp(key2) {
    return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key2) ? "." + key2 : "[" + escapeUnsafeChars(JSON.stringify(key2)) + "]";
  }
  function stringifyString(str) {
    var result = '"';
    for (var i = 0; i < str.length; i += 1) {
      var char = str.charAt(i);
      var code = char.charCodeAt(0);
      if (char === '"') {
        result += '\\"';
      } else if (char in escaped2) {
        result += escaped2[char];
      } else if (code >= 55296 && code <= 57343) {
        var next = str.charCodeAt(i + 1);
        if (code <= 56319 && (next >= 56320 && next <= 57343)) {
          result += char + str[++i];
        } else {
          result += "\\u" + code.toString(16).toUpperCase();
        }
      } else {
        result += char;
      }
    }
    result += '"';
    return result;
  }
  function noop2() {
  }
  function safe_not_equal2(a, b) {
    return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
  }
  Promise.resolve();
  var subscriber_queue = [];
  function readable(value, start) {
    return {
      subscribe: writable(value, start).subscribe
    };
  }
  function writable(value, start = noop2) {
    let stop;
    const subscribers = /* @__PURE__ */ new Set();
    function set(new_value) {
      if (safe_not_equal2(value, new_value)) {
        value = new_value;
        if (stop) {
          const run_queue = !subscriber_queue.length;
          for (const subscriber of subscribers) {
            subscriber[1]();
            subscriber_queue.push(subscriber, value);
          }
          if (run_queue) {
            for (let i = 0; i < subscriber_queue.length; i += 2) {
              subscriber_queue[i][0](subscriber_queue[i + 1]);
            }
            subscriber_queue.length = 0;
          }
        }
      }
    }
    function update(fn) {
      set(fn(value));
    }
    function subscribe2(run2, invalidate = noop2) {
      const subscriber = [run2, invalidate];
      subscribers.add(subscriber);
      if (subscribers.size === 1) {
        stop = start(set) || noop2;
      }
      run2(value);
      return () => {
        subscribers.delete(subscriber);
        if (subscribers.size === 0) {
          stop();
          stop = null;
        }
      };
    }
    return { set, update, subscribe: subscribe2 };
  }
  function coalesce_to_error(err) {
    return err instanceof Error || err && err.name && err.message ? err : new Error(JSON.stringify(err));
  }
  var render_json_payload_script_dict = {
    "<": "\\u003C",
    "\u2028": "\\u2028",
    "\u2029": "\\u2029"
  };
  var render_json_payload_script_regex = new RegExp(`[${Object.keys(render_json_payload_script_dict).join("")}]`, "g");
  function render_json_payload_script(attrs, payload) {
    const safe_payload = JSON.stringify(payload).replace(render_json_payload_script_regex, (match) => render_json_payload_script_dict[match]);
    let safe_attrs = "";
    for (const [key2, value] of Object.entries(attrs)) {
      if (value === void 0)
        continue;
      safe_attrs += ` sveltekit:data-${key2}=${escape_html_attr(value)}`;
    }
    return `<script type="application/json"${safe_attrs}>${safe_payload}<\/script>`;
  }
  var escape_html_attr_dict = {
    "&": "&amp;",
    '"': "&quot;"
  };
  var escape_html_attr_regex = new RegExp(`[${Object.keys(escape_html_attr_dict).join("")}]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\udc00-\\udfff]`, "g");
  function escape_html_attr(str) {
    const escaped_str = str.replace(escape_html_attr_regex, (match) => {
      if (match.length === 2) {
        return match;
      }
      return escape_html_attr_dict[match] ?? `&#${match.charCodeAt(0)};`;
    });
    return `"${escaped_str}"`;
  }
  var s = JSON.stringify;
  function create_prerendering_url_proxy(url) {
    return new Proxy(url, {
      get: (target, prop, receiver) => {
        if (prop === "search" || prop === "searchParams") {
          throw new Error(`Cannot access url.${prop} on a page with prerendering enabled`);
        }
        return Reflect.get(target, prop, receiver);
      }
    });
  }
  var encoder = new TextEncoder();
  function sha256(data) {
    if (!key[0])
      precompute();
    const out = init.slice(0);
    const array = encode(data);
    for (let i = 0; i < array.length; i += 16) {
      const w = array.subarray(i, i + 16);
      let tmp;
      let a;
      let b;
      let out0 = out[0];
      let out1 = out[1];
      let out2 = out[2];
      let out3 = out[3];
      let out4 = out[4];
      let out5 = out[5];
      let out6 = out[6];
      let out7 = out[7];
      for (let i2 = 0; i2 < 64; i2++) {
        if (i2 < 16) {
          tmp = w[i2];
        } else {
          a = w[i2 + 1 & 15];
          b = w[i2 + 14 & 15];
          tmp = w[i2 & 15] = (a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i2 & 15] + w[i2 + 9 & 15] | 0;
        }
        tmp = tmp + out7 + (out4 >>> 6 ^ out4 >>> 11 ^ out4 >>> 25 ^ out4 << 26 ^ out4 << 21 ^ out4 << 7) + (out6 ^ out4 & (out5 ^ out6)) + key[i2];
        out7 = out6;
        out6 = out5;
        out5 = out4;
        out4 = out3 + tmp | 0;
        out3 = out2;
        out2 = out1;
        out1 = out0;
        out0 = tmp + (out1 & out2 ^ out3 & (out1 ^ out2)) + (out1 >>> 2 ^ out1 >>> 13 ^ out1 >>> 22 ^ out1 << 30 ^ out1 << 19 ^ out1 << 10) | 0;
      }
      out[0] = out[0] + out0 | 0;
      out[1] = out[1] + out1 | 0;
      out[2] = out[2] + out2 | 0;
      out[3] = out[3] + out3 | 0;
      out[4] = out[4] + out4 | 0;
      out[5] = out[5] + out5 | 0;
      out[6] = out[6] + out6 | 0;
      out[7] = out[7] + out7 | 0;
    }
    const bytes = new Uint8Array(out.buffer);
    reverse_endianness(bytes);
    return base64(bytes);
  }
  var init = new Uint32Array(8);
  var key = new Uint32Array(64);
  function precompute() {
    function frac(x) {
      return (x - Math.floor(x)) * 4294967296;
    }
    let prime = 2;
    for (let i = 0; i < 64; prime++) {
      let is_prime = true;
      for (let factor = 2; factor * factor <= prime; factor++) {
        if (prime % factor === 0) {
          is_prime = false;
          break;
        }
      }
      if (is_prime) {
        if (i < 8) {
          init[i] = frac(prime ** (1 / 2));
        }
        key[i] = frac(prime ** (1 / 3));
        i++;
      }
    }
  }
  function reverse_endianness(bytes) {
    for (let i = 0; i < bytes.length; i += 4) {
      const a = bytes[i + 0];
      const b = bytes[i + 1];
      const c = bytes[i + 2];
      const d = bytes[i + 3];
      bytes[i + 0] = d;
      bytes[i + 1] = c;
      bytes[i + 2] = b;
      bytes[i + 3] = a;
    }
  }
  function encode(str) {
    const encoded = encoder.encode(str);
    const length = encoded.length * 8;
    const size = 512 * Math.ceil((length + 65) / 512);
    const bytes = new Uint8Array(size / 8);
    bytes.set(encoded);
    bytes[encoded.length] = 128;
    reverse_endianness(bytes);
    const words = new Uint32Array(bytes.buffer);
    words[words.length - 2] = Math.floor(length / 4294967296);
    words[words.length - 1] = length;
    return words;
  }
  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
  function base64(bytes) {
    const l = bytes.length;
    let result = "";
    let i;
    for (i = 2; i < l; i += 3) {
      result += chars[bytes[i - 2] >> 2];
      result += chars[(bytes[i - 2] & 3) << 4 | bytes[i - 1] >> 4];
      result += chars[(bytes[i - 1] & 15) << 2 | bytes[i] >> 6];
      result += chars[bytes[i] & 63];
    }
    if (i === l + 1) {
      result += chars[bytes[i - 2] >> 2];
      result += chars[(bytes[i - 2] & 3) << 4];
      result += "==";
    }
    if (i === l) {
      result += chars[bytes[i - 2] >> 2];
      result += chars[(bytes[i - 2] & 3) << 4 | bytes[i - 1] >> 4];
      result += chars[(bytes[i - 1] & 15) << 2];
      result += "=";
    }
    return result;
  }
  var csp_ready;
  var generate_nonce;
  var generate_hash;
  if (typeof crypto !== "undefined") {
    const array = new Uint8Array(16);
    generate_nonce = () => {
      crypto.getRandomValues(array);
      return base64(array);
    };
    generate_hash = sha256;
  } else {
    const name = "crypto";
    csp_ready = import(name).then((crypto2) => {
      generate_nonce = () => {
        return crypto2.randomBytes(16).toString("base64");
      };
      generate_hash = (input) => {
        return crypto2.createHash("sha256").update(input, "utf-8").digest().toString("base64");
      };
    });
  }
  var quoted = /* @__PURE__ */ new Set([
    "self",
    "unsafe-eval",
    "unsafe-hashes",
    "unsafe-inline",
    "none",
    "strict-dynamic",
    "report-sample"
  ]);
  var crypto_pattern = /^(nonce|sha\d\d\d)-/;
  var Csp = class {
    constructor({ mode, directives }, { dev: dev2, prerender, needs_nonce }) {
      __privateAdd(this, _use_hashes, void 0);
      __privateAdd(this, _dev, void 0);
      __privateAdd(this, _script_needs_csp, void 0);
      __privateAdd(this, _style_needs_csp, void 0);
      __privateAdd(this, _directives, void 0);
      __privateAdd(this, _script_src, void 0);
      __privateAdd(this, _style_src, void 0);
      __privateSet(this, _use_hashes, mode === "hash" || mode === "auto" && prerender);
      __privateSet(this, _directives, dev2 ? { ...directives } : directives);
      __privateSet(this, _dev, dev2);
      const d = __privateGet(this, _directives);
      if (dev2) {
        const effective_style_src2 = d["style-src"] || d["default-src"];
        if (effective_style_src2 && !effective_style_src2.includes("unsafe-inline")) {
          d["style-src"] = [...effective_style_src2, "unsafe-inline"];
        }
      }
      __privateSet(this, _script_src, []);
      __privateSet(this, _style_src, []);
      const effective_script_src = d["script-src"] || d["default-src"];
      const effective_style_src = d["style-src"] || d["default-src"];
      __privateSet(this, _script_needs_csp, !!effective_script_src && effective_script_src.filter((value) => value !== "unsafe-inline").length > 0);
      __privateSet(this, _style_needs_csp, !dev2 && !!effective_style_src && effective_style_src.filter((value) => value !== "unsafe-inline").length > 0);
      this.script_needs_nonce = __privateGet(this, _script_needs_csp) && !__privateGet(this, _use_hashes);
      this.style_needs_nonce = __privateGet(this, _style_needs_csp) && !__privateGet(this, _use_hashes);
      if (this.script_needs_nonce || this.style_needs_nonce || needs_nonce) {
        this.nonce = generate_nonce();
      }
    }
    add_script(content) {
      if (__privateGet(this, _script_needs_csp)) {
        if (__privateGet(this, _use_hashes)) {
          __privateGet(this, _script_src).push(`sha256-${generate_hash(content)}`);
        } else if (__privateGet(this, _script_src).length === 0) {
          __privateGet(this, _script_src).push(`nonce-${this.nonce}`);
        }
      }
    }
    add_style(content) {
      if (__privateGet(this, _style_needs_csp)) {
        if (__privateGet(this, _use_hashes)) {
          __privateGet(this, _style_src).push(`sha256-${generate_hash(content)}`);
        } else if (__privateGet(this, _style_src).length === 0) {
          __privateGet(this, _style_src).push(`nonce-${this.nonce}`);
        }
      }
    }
    get_header(is_meta = false) {
      const header = [];
      const directives = { ...__privateGet(this, _directives) };
      if (__privateGet(this, _style_src).length > 0) {
        directives["style-src"] = [
          ...directives["style-src"] || directives["default-src"] || [],
          ...__privateGet(this, _style_src)
        ];
      }
      if (__privateGet(this, _script_src).length > 0) {
        directives["script-src"] = [
          ...directives["script-src"] || directives["default-src"] || [],
          ...__privateGet(this, _script_src)
        ];
      }
      for (const key2 in directives) {
        if (is_meta && (key2 === "frame-ancestors" || key2 === "report-uri" || key2 === "sandbox")) {
          continue;
        }
        const value = directives[key2];
        if (!value)
          continue;
        const directive = [key2];
        if (Array.isArray(value)) {
          value.forEach((value2) => {
            if (quoted.has(value2) || crypto_pattern.test(value2)) {
              directive.push(`'${value2}'`);
            } else {
              directive.push(value2);
            }
          });
        }
        header.push(directive.join(" "));
      }
      return header.join("; ");
    }
    get_meta() {
      const content = escape_html_attr(this.get_header(true));
      return `<meta http-equiv="content-security-policy" content=${content}>`;
    }
  };
  _use_hashes = /* @__PURE__ */ new WeakMap();
  _dev = /* @__PURE__ */ new WeakMap();
  _script_needs_csp = /* @__PURE__ */ new WeakMap();
  _style_needs_csp = /* @__PURE__ */ new WeakMap();
  _directives = /* @__PURE__ */ new WeakMap();
  _script_src = /* @__PURE__ */ new WeakMap();
  _style_src = /* @__PURE__ */ new WeakMap();
  var updated = {
    ...readable(false),
    check: () => false
  };
  async function render_response({
    branch,
    options,
    state,
    $session,
    page_config,
    status,
    error: error2 = null,
    event,
    resolve_opts,
    stuff
  }) {
    if (state.prerender) {
      if (options.csp.mode === "nonce") {
        throw new Error('Cannot use prerendering if config.kit.csp.mode === "nonce"');
      }
      if (options.template_contains_nonce) {
        throw new Error("Cannot use prerendering if page template contains %svelte.nonce%");
      }
    }
    const stylesheets = new Set(options.manifest._.entry.css);
    const modulepreloads = new Set(options.manifest._.entry.js);
    const styles = /* @__PURE__ */ new Map();
    const serialized_data = [];
    let shadow_props;
    let rendered;
    let is_private = false;
    let maxage;
    if (error2) {
      error2.stack = options.get_stack(error2);
    }
    if (resolve_opts.ssr) {
      branch.forEach(({ node, props: props2, loaded, fetched, uses_credentials }) => {
        if (node.css)
          node.css.forEach((url) => stylesheets.add(url));
        if (node.js)
          node.js.forEach((url) => modulepreloads.add(url));
        if (node.styles)
          Object.entries(node.styles).forEach(([k, v]) => styles.set(k, v));
        if (fetched && page_config.hydrate)
          serialized_data.push(...fetched);
        if (props2)
          shadow_props = props2;
        if (uses_credentials)
          is_private = true;
        maxage = loaded.maxage;
      });
      const session = writable($session);
      const props = {
        stores: {
          page: writable(null),
          navigating: writable(null),
          session,
          updated
        },
        page: {
          error: error2,
          params: event.params,
          routeId: event.routeId,
          status,
          stuff,
          url: state.prerender ? create_prerendering_url_proxy(event.url) : event.url
        },
        components: branch.map(({ node }) => node.module.default)
      };
      const print_error = (property, replacement) => {
        Object.defineProperty(props.page, property, {
          get: () => {
            throw new Error(`$page.${property} has been replaced by $page.url.${replacement}`);
          }
        });
      };
      print_error("origin", "origin");
      print_error("path", "pathname");
      print_error("query", "searchParams");
      for (let i = 0; i < branch.length; i += 1) {
        props[`props_${i}`] = await branch[i].loaded.props;
      }
      let session_tracking_active = false;
      const unsubscribe = session.subscribe(() => {
        if (session_tracking_active)
          is_private = true;
      });
      session_tracking_active = true;
      try {
        rendered = options.root.render(props);
      } finally {
        unsubscribe();
      }
    } else {
      rendered = { head: "", html: "", css: { code: "", map: null } };
    }
    let { head, html: body } = rendered;
    const inlined_style = Array.from(styles.values()).join("\n");
    await csp_ready;
    const csp = new Csp(options.csp, {
      dev: options.dev,
      prerender: !!state.prerender,
      needs_nonce: options.template_contains_nonce
    });
    const target = hash(body);
    const init_app = `
		import { start } from ${s(options.prefix + options.manifest._.entry.file)};
		start({
			target: document.querySelector('[data-hydrate="${target}"]').parentNode,
			paths: ${s(options.paths)},
			session: ${try_serialize($session, (error3) => {
      throw new Error(`Failed to serialize session data: ${error3.message}`);
    })},
			route: ${!!page_config.router},
			spa: ${!resolve_opts.ssr},
			trailing_slash: ${s(options.trailing_slash)},
			hydrate: ${resolve_opts.ssr && page_config.hydrate ? `{
				status: ${status},
				error: ${serialize_error(error2)},
				nodes: [
					${(branch || []).map(({ node }) => `import(${s(options.prefix + node.entry)})`).join(",\n						")}
				],
				params: ${devalue(event.params)},
				routeId: ${s(event.routeId)}
			}` : "null"}
		});
	`;
    const init_service_worker = `
		if ('serviceWorker' in navigator) {
			navigator.serviceWorker.register('${options.service_worker}');
		}
	`;
    if (options.amp) {
      const styles2 = `${inlined_style}
${rendered.css.code}`;
      head += `
		<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style>
		<noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>
		<script async src="https://cdn.ampproject.org/v0.js"><\/script>

		<style amp-custom>${styles2}</style>`;
      if (options.service_worker) {
        head += '<script async custom-element="amp-install-serviceworker" src="https://cdn.ampproject.org/v0/amp-install-serviceworker-0.1.js"><\/script>';
        body += `<amp-install-serviceworker src="${options.service_worker}" layout="nodisplay"></amp-install-serviceworker>`;
      }
    } else {
      if (inlined_style) {
        const attributes = [];
        if (options.dev)
          attributes.push(" data-svelte");
        if (csp.style_needs_nonce)
          attributes.push(` nonce="${csp.nonce}"`);
        csp.add_style(inlined_style);
        head += `
	<style${attributes.join("")}>${inlined_style}</style>`;
      }
      head += Array.from(stylesheets).map((dep) => {
        const attributes = [
          'rel="stylesheet"',
          `href="${options.prefix + dep}"`
        ];
        if (csp.style_needs_nonce) {
          attributes.push(`nonce="${csp.nonce}"`);
        }
        if (styles.has(dep)) {
          attributes.push("disabled", 'media="(max-width: 0)"');
        }
        return `
	<link ${attributes.join(" ")}>`;
      }).join("");
      if (page_config.router || page_config.hydrate) {
        head += Array.from(modulepreloads).map((dep) => `
	<link rel="modulepreload" href="${options.prefix + dep}">`).join("");
        const attributes = ['type="module"', `data-hydrate="${target}"`];
        csp.add_script(init_app);
        if (csp.script_needs_nonce) {
          attributes.push(`nonce="${csp.nonce}"`);
        }
        body += `
		<script ${attributes.join(" ")}>${init_app}<\/script>`;
        body += serialized_data.map(({ url, body: body2, response }) => render_json_payload_script({ type: "data", url, body: typeof body2 === "string" ? hash(body2) : void 0 }, response)).join("\n	");
        if (shadow_props) {
          body += render_json_payload_script({ type: "props" }, shadow_props);
        }
      }
      if (options.service_worker) {
        csp.add_script(init_service_worker);
        head += `
				<script${csp.script_needs_nonce ? ` nonce="${csp.nonce}"` : ""}>${init_service_worker}<\/script>`;
      }
    }
    if (state.prerender && !options.amp) {
      const http_equiv = [];
      const csp_headers = csp.get_meta();
      if (csp_headers) {
        http_equiv.push(csp_headers);
      }
      if (maxage) {
        http_equiv.push(`<meta http-equiv="cache-control" content="max-age=${maxage}">`);
      }
      if (http_equiv.length > 0) {
        head = http_equiv.join("\n") + head;
      }
    }
    const segments = event.url.pathname.slice(options.paths.base.length).split("/").slice(2);
    const assets2 = options.paths.assets || (segments.length > 0 ? segments.map(() => "..").join("/") : ".");
    const html = await resolve_opts.transformPage({
      html: options.template({ head, body, assets: assets2, nonce: csp.nonce })
    });
    const headers = new Headers({
      "content-type": "text/html",
      etag: `"${hash(html)}"`
    });
    if (maxage) {
      headers.set("cache-control", `${is_private ? "private" : "public"}, max-age=${maxage}`);
    }
    if (!options.floc) {
      headers.set("permissions-policy", "interest-cohort=()");
    }
    if (!state.prerender) {
      const csp_header = csp.get_header();
      if (csp_header) {
        headers.set("content-security-policy", csp_header);
      }
    }
    return new Response(html, {
      status,
      headers
    });
  }
  function try_serialize(data, fail) {
    try {
      return devalue(data);
    } catch (err) {
      if (fail)
        fail(coalesce_to_error(err));
      return null;
    }
  }
  function serialize_error(error2) {
    if (!error2)
      return null;
    let serialized = try_serialize(error2);
    if (!serialized) {
      const { name, message, stack } = error2;
      serialized = try_serialize({ ...error2, name, message, stack });
    }
    if (!serialized) {
      serialized = "{}";
    }
    return serialized;
  }
  function normalize(loaded) {
    const has_error_status = loaded.status && loaded.status >= 400 && loaded.status <= 599 && !loaded.redirect;
    if (loaded.error || has_error_status) {
      const status = loaded.status;
      if (!loaded.error && has_error_status) {
        return {
          status: status || 500,
          error: new Error()
        };
      }
      const error2 = typeof loaded.error === "string" ? new Error(loaded.error) : loaded.error;
      if (!(error2 instanceof Error)) {
        return {
          status: 500,
          error: new Error(`"error" property returned from load() must be a string or instance of Error, received type "${typeof error2}"`)
        };
      }
      if (!status || status < 400 || status > 599) {
        console.warn('"error" returned from load() without a valid status code \u2014 defaulting to 500');
        return { status: 500, error: error2 };
      }
      return { status, error: error2 };
    }
    if (loaded.redirect) {
      if (!loaded.status || Math.floor(loaded.status / 100) !== 3) {
        return {
          status: 500,
          error: new Error('"redirect" property returned from load() must be accompanied by a 3xx status code')
        };
      }
      if (typeof loaded.redirect !== "string") {
        return {
          status: 500,
          error: new Error('"redirect" property returned from load() must be a string')
        };
      }
    }
    if (loaded.context) {
      throw new Error('You are returning "context" from a load function. "context" was renamed to "stuff", please adjust your code accordingly.');
    }
    return loaded;
  }
  var absolute = /^([a-z]+:)?\/?\//;
  var scheme = /^[a-z]+:/;
  function resolve(base2, path) {
    if (scheme.test(path))
      return path;
    const base_match = absolute.exec(base2);
    const path_match = absolute.exec(path);
    if (!base_match) {
      throw new Error(`bad base path: "${base2}"`);
    }
    const baseparts = path_match ? [] : base2.slice(base_match[0].length).split("/");
    const pathparts = path_match ? path.slice(path_match[0].length).split("/") : path.split("/");
    baseparts.pop();
    for (let i = 0; i < pathparts.length; i += 1) {
      const part = pathparts[i];
      if (part === ".")
        continue;
      else if (part === "..")
        baseparts.pop();
      else
        baseparts.push(part);
    }
    const prefix2 = path_match && path_match[0] || base_match && base_match[0] || "";
    return `${prefix2}${baseparts.join("/")}`;
  }
  function is_root_relative(path) {
    return path[0] === "/" && path[1] !== "/";
  }
  function normalize_path(path, trailing_slash) {
    if (path === "/" || trailing_slash === "ignore")
      return path;
    if (trailing_slash === "never") {
      return path.endsWith("/") ? path.slice(0, -1) : path;
    } else if (trailing_slash === "always" && /\/[^./]+$/.test(path)) {
      return path + "/";
    }
    return path;
  }
  async function load_node({
    event,
    options,
    state,
    route,
    node,
    $session,
    stuff,
    is_error,
    is_leaf,
    status,
    error: error2
  }) {
    const { module } = node;
    let uses_credentials = false;
    const fetched = [];
    let set_cookie_headers = [];
    let loaded;
    const shadow = is_leaf ? await load_shadow_data(route, event, options, !!state.prerender) : {};
    if (shadow.cookies) {
      set_cookie_headers.push(...shadow.cookies);
    }
    if (shadow.error) {
      loaded = {
        status: shadow.status,
        error: shadow.error
      };
    } else if (shadow.redirect) {
      loaded = {
        status: shadow.status,
        redirect: shadow.redirect
      };
    } else if (module.load) {
      const load_input = {
        url: state.prerender ? create_prerendering_url_proxy(event.url) : event.url,
        params: event.params,
        props: shadow.body || {},
        routeId: event.routeId,
        get session() {
          uses_credentials = true;
          return $session;
        },
        fetch: async (resource, opts = {}) => {
          let requested;
          if (typeof resource === "string") {
            requested = resource;
          } else {
            requested = resource.url;
            opts = {
              method: resource.method,
              headers: resource.headers,
              body: resource.body,
              mode: resource.mode,
              credentials: resource.credentials,
              cache: resource.cache,
              redirect: resource.redirect,
              referrer: resource.referrer,
              integrity: resource.integrity,
              ...opts
            };
          }
          opts.headers = new Headers(opts.headers);
          for (const [key2, value] of event.request.headers) {
            if (key2 !== "authorization" && key2 !== "cookie" && key2 !== "host" && key2 !== "if-none-match" && !opts.headers.has(key2)) {
              opts.headers.set(key2, value);
            }
          }
          const resolved = resolve(event.url.pathname, requested.split("?")[0]);
          let response;
          let dependency;
          const prefix2 = options.paths.assets || options.paths.base;
          const filename = decodeURIComponent(resolved.startsWith(prefix2) ? resolved.slice(prefix2.length) : resolved).slice(1);
          const filename_html = `${filename}/index.html`;
          const is_asset = options.manifest.assets.has(filename);
          const is_asset_html = options.manifest.assets.has(filename_html);
          if (is_asset || is_asset_html) {
            const file = is_asset ? filename : filename_html;
            if (options.read) {
              const type = is_asset ? options.manifest.mimeTypes[filename.slice(filename.lastIndexOf("."))] : "text/html";
              response = new Response(options.read(file), {
                headers: type ? { "content-type": type } : {}
              });
            } else {
              response = await fetch(`${event.url.origin}/${file}`, opts);
            }
          } else if (is_root_relative(resolved)) {
            if (opts.credentials !== "omit") {
              uses_credentials = true;
              const cookie = event.request.headers.get("cookie");
              const authorization = event.request.headers.get("authorization");
              if (cookie) {
                opts.headers.set("cookie", cookie);
              }
              if (authorization && !opts.headers.has("authorization")) {
                opts.headers.set("authorization", authorization);
              }
            }
            if (opts.body && typeof opts.body !== "string") {
              throw new Error("Request body must be a string");
            }
            response = await respond(new Request(new URL(requested, event.url).href, opts), options, {
              getClientAddress: state.getClientAddress,
              initiator: route,
              prerender: state.prerender
            });
            if (state.prerender) {
              dependency = { response, body: null };
              state.prerender.dependencies.set(resolved, dependency);
            }
          } else {
            if (resolved.startsWith("//")) {
              requested = event.url.protocol + requested;
            }
            if (`.${new URL(requested).hostname}`.endsWith(`.${event.url.hostname}`) && opts.credentials !== "omit") {
              uses_credentials = true;
              const cookie = event.request.headers.get("cookie");
              if (cookie)
                opts.headers.set("cookie", cookie);
            }
            const external_request = new Request(requested, opts);
            response = await options.hooks.externalFetch.call(null, external_request);
          }
          const proxy = new Proxy(response, {
            get(response2, key2, _receiver) {
              async function text() {
                const body = await response2.text();
                const headers = {};
                for (const [key3, value] of response2.headers) {
                  if (key3 === "set-cookie") {
                    set_cookie_headers = set_cookie_headers.concat(value);
                  } else if (key3 !== "etag") {
                    headers[key3] = value;
                  }
                }
                if (!opts.body || typeof opts.body === "string") {
                  const status_number = Number(response2.status);
                  if (isNaN(status_number)) {
                    throw new Error(`response.status is not a number. value: "${response2.status}" type: ${typeof response2.status}`);
                  }
                  fetched.push({
                    url: requested,
                    body: opts.body,
                    response: {
                      status: status_number,
                      statusText: response2.statusText,
                      headers,
                      body
                    }
                  });
                }
                if (dependency) {
                  dependency.body = body;
                }
                return body;
              }
              if (key2 === "arrayBuffer") {
                return async () => {
                  const buffer = await response2.arrayBuffer();
                  if (dependency) {
                    dependency.body = new Uint8Array(buffer);
                  }
                  return buffer;
                };
              }
              if (key2 === "text") {
                return text;
              }
              if (key2 === "json") {
                return async () => {
                  return JSON.parse(await text());
                };
              }
              return Reflect.get(response2, key2, response2);
            }
          });
          return proxy;
        },
        stuff: { ...stuff }
      };
      if (options.dev) {
        Object.defineProperty(load_input, "page", {
          get: () => {
            throw new Error("`page` in `load` functions has been replaced by `url` and `params`");
          }
        });
      }
      if (is_error) {
        load_input.status = status;
        load_input.error = error2;
      }
      loaded = await module.load.call(null, load_input);
      if (!loaded) {
        throw new Error(`load function must return a value${options.dev ? ` (${node.entry})` : ""}`);
      }
      if (loaded.fallthrough) {
        throw new Error("fallthrough is no longer supported. Use matchers instead: https://kit.svelte.dev/docs/routing#advanced-routing-matching");
      }
    } else if (shadow.body) {
      loaded = {
        props: shadow.body
      };
    } else {
      loaded = {};
    }
    if (shadow.body && state.prerender) {
      const pathname = `${event.url.pathname.replace(/\/$/, "")}/__data.json`;
      const dependency = {
        response: new Response(void 0),
        body: JSON.stringify(shadow.body)
      };
      state.prerender.dependencies.set(pathname, dependency);
    }
    return {
      node,
      props: shadow.body,
      loaded: normalize(loaded),
      stuff: loaded.stuff || stuff,
      fetched,
      set_cookie_headers,
      uses_credentials
    };
  }
  async function load_shadow_data(route, event, options, prerender) {
    if (!route.shadow)
      return {};
    try {
      const mod = await route.shadow();
      if (prerender && (mod.post || mod.put || mod.del || mod.patch)) {
        throw new Error("Cannot prerender pages that have endpoints with mutative methods");
      }
      const method = normalize_request_method(event);
      const is_get = method === "head" || method === "get";
      const handler = method === "head" ? mod.head || mod.get : mod[method];
      if (!handler && !is_get) {
        return {
          status: 405,
          error: new Error(`${method} method not allowed`)
        };
      }
      const data = {
        status: 200,
        cookies: [],
        body: {}
      };
      if (!is_get) {
        const result = await handler(event);
        if (result.fallthrough) {
          throw new Error("fallthrough is no longer supported. Use matchers instead: https://kit.svelte.dev/docs/routing#advanced-routing-matching");
        }
        const { status, headers, body } = validate_shadow_output(result);
        data.status = status;
        add_cookies(data.cookies, headers);
        if (status >= 300 && status < 400) {
          data.redirect = headers instanceof Headers ? headers.get("location") : headers.location;
          return data;
        }
        data.body = body;
      }
      const get11 = method === "head" && mod.head || mod.get;
      if (get11) {
        const result = await get11(event);
        if (result.fallthrough) {
          throw new Error("fallthrough is no longer supported. Use matchers instead: https://kit.svelte.dev/docs/routing#advanced-routing-matching");
        }
        const { status, headers, body } = validate_shadow_output(result);
        add_cookies(data.cookies, headers);
        data.status = status;
        if (status >= 400) {
          data.error = new Error("Failed to load data");
          return data;
        }
        if (status >= 300) {
          data.redirect = headers instanceof Headers ? headers.get("location") : headers.location;
          return data;
        }
        data.body = { ...body, ...data.body };
      }
      return data;
    } catch (e) {
      const error2 = coalesce_to_error(e);
      options.handle_error(error2, event);
      return {
        status: 500,
        error: error2
      };
    }
  }
  function add_cookies(target, headers) {
    const cookies = headers["set-cookie"];
    if (cookies) {
      if (Array.isArray(cookies)) {
        target.push(...cookies);
      } else {
        target.push(cookies);
      }
    }
  }
  function validate_shadow_output(result) {
    const { status = 200, body = {} } = result;
    let headers = result.headers || {};
    if (headers instanceof Headers) {
      if (headers.has("set-cookie")) {
        throw new Error("Endpoint request handler cannot use Headers interface with Set-Cookie headers");
      }
    } else {
      headers = lowercase_keys(headers);
    }
    if (!is_pojo(body)) {
      throw new Error("Body returned from endpoint request handler must be a plain object");
    }
    return { status, headers, body };
  }
  async function respond_with_error({
    event,
    options,
    state,
    $session,
    status,
    error: error2,
    resolve_opts
  }) {
    try {
      const default_layout = await options.manifest._.nodes[0]();
      const default_error = await options.manifest._.nodes[1]();
      const layout_loaded = await load_node({
        event,
        options,
        state,
        route: null,
        node: default_layout,
        $session,
        stuff: {},
        is_error: false,
        is_leaf: false
      });
      const error_loaded = await load_node({
        event,
        options,
        state,
        route: null,
        node: default_error,
        $session,
        stuff: layout_loaded ? layout_loaded.stuff : {},
        is_error: true,
        is_leaf: false,
        status,
        error: error2
      });
      return await render_response({
        options,
        state,
        $session,
        page_config: {
          hydrate: options.hydrate,
          router: options.router
        },
        stuff: error_loaded.stuff,
        status,
        error: error2,
        branch: [layout_loaded, error_loaded],
        event,
        resolve_opts
      });
    } catch (err) {
      const error3 = coalesce_to_error(err);
      options.handle_error(error3, event);
      return new Response(error3.stack, {
        status: 500
      });
    }
  }
  async function respond$1(opts) {
    const { event, options, state, $session, route, resolve_opts } = opts;
    let nodes;
    if (!resolve_opts.ssr) {
      return await render_response({
        ...opts,
        branch: [],
        page_config: {
          hydrate: true,
          router: true
        },
        status: 200,
        error: null,
        event,
        stuff: {}
      });
    }
    try {
      nodes = await Promise.all(route.a.map((n) => options.manifest._.nodes[n] && options.manifest._.nodes[n]()));
    } catch (err) {
      const error3 = coalesce_to_error(err);
      options.handle_error(error3, event);
      return await respond_with_error({
        event,
        options,
        state,
        $session,
        status: 500,
        error: error3,
        resolve_opts
      });
    }
    const leaf = nodes[nodes.length - 1].module;
    let page_config = get_page_config(leaf, options);
    if (state.prerender) {
      const should_prerender = leaf.prerender ?? state.prerender.default;
      if (!should_prerender) {
        return new Response(void 0, {
          status: 204
        });
      }
    }
    let branch = [];
    let status = 200;
    let error2 = null;
    let set_cookie_headers = [];
    let stuff = {};
    ssr:
      if (resolve_opts.ssr) {
        for (let i = 0; i < nodes.length; i += 1) {
          const node = nodes[i];
          let loaded;
          if (node) {
            try {
              loaded = await load_node({
                ...opts,
                node,
                stuff,
                is_error: false,
                is_leaf: i === nodes.length - 1
              });
              set_cookie_headers = set_cookie_headers.concat(loaded.set_cookie_headers);
              if (loaded.loaded.redirect) {
                return with_cookies(new Response(void 0, {
                  status: loaded.loaded.status,
                  headers: {
                    location: loaded.loaded.redirect
                  }
                }), set_cookie_headers);
              }
              if (loaded.loaded.error) {
                ({ status, error: error2 } = loaded.loaded);
              }
            } catch (err) {
              const e = coalesce_to_error(err);
              options.handle_error(e, event);
              status = 500;
              error2 = e;
            }
            if (loaded && !error2) {
              branch.push(loaded);
            }
            if (error2) {
              while (i--) {
                if (route.b[i]) {
                  const error_node = await options.manifest._.nodes[route.b[i]]();
                  let node_loaded;
                  let j = i;
                  while (!(node_loaded = branch[j])) {
                    j -= 1;
                  }
                  try {
                    const error_loaded = await load_node({
                      ...opts,
                      node: error_node,
                      stuff: node_loaded.stuff,
                      is_error: true,
                      is_leaf: false,
                      status,
                      error: error2
                    });
                    if (error_loaded.loaded.error) {
                      continue;
                    }
                    page_config = get_page_config(error_node.module, options);
                    branch = branch.slice(0, j + 1).concat(error_loaded);
                    stuff = { ...node_loaded.stuff, ...error_loaded.stuff };
                    break ssr;
                  } catch (err) {
                    const e = coalesce_to_error(err);
                    options.handle_error(e, event);
                    continue;
                  }
                }
              }
              return with_cookies(await respond_with_error({
                event,
                options,
                state,
                $session,
                status,
                error: error2,
                resolve_opts
              }), set_cookie_headers);
            }
          }
          if (loaded && loaded.loaded.stuff) {
            stuff = {
              ...stuff,
              ...loaded.loaded.stuff
            };
          }
        }
      }
    try {
      return with_cookies(await render_response({
        ...opts,
        stuff,
        event,
        page_config,
        status,
        error: error2,
        branch: branch.filter(Boolean)
      }), set_cookie_headers);
    } catch (err) {
      const error3 = coalesce_to_error(err);
      options.handle_error(error3, event);
      return with_cookies(await respond_with_error({
        ...opts,
        status: 500,
        error: error3
      }), set_cookie_headers);
    }
  }
  function get_page_config(leaf, options) {
    if ("ssr" in leaf) {
      throw new Error("`export const ssr` has been removed \u2014 use the handle hook instead: https://kit.svelte.dev/docs/hooks#handle");
    }
    return {
      router: "router" in leaf ? !!leaf.router : options.router,
      hydrate: "hydrate" in leaf ? !!leaf.hydrate : options.hydrate
    };
  }
  function with_cookies(response, set_cookie_headers) {
    if (set_cookie_headers.length) {
      set_cookie_headers.forEach((value) => {
        response.headers.append("set-cookie", value);
      });
    }
    return response;
  }
  async function render_page(event, route, options, state, resolve_opts) {
    if (state.initiator === route) {
      return new Response(`Not found: ${event.url.pathname}`, {
        status: 404
      });
    }
    if (route.shadow) {
      const type = negotiate(event.request.headers.get("accept") || "text/html", [
        "text/html",
        "application/json"
      ]);
      if (type === "application/json") {
        return render_endpoint(event, await route.shadow());
      }
    }
    const $session = await options.hooks.getSession(event);
    return respond$1({
      event,
      options,
      state,
      $session,
      resolve_opts,
      route
    });
  }
  function negotiate(accept, types) {
    const parts = accept.split(",").map((str, i) => {
      const match = /([^/]+)\/([^;]+)(?:;q=([0-9.]+))?/.exec(str);
      if (match) {
        const [, type, subtype, q = "1"] = match;
        return { type, subtype, q: +q, i };
      }
      throw new Error(`Invalid Accept header: ${accept}`);
    }).sort((a, b) => {
      if (a.q !== b.q) {
        return b.q - a.q;
      }
      if (a.subtype === "*" !== (b.subtype === "*")) {
        return a.subtype === "*" ? 1 : -1;
      }
      if (a.type === "*" !== (b.type === "*")) {
        return a.type === "*" ? 1 : -1;
      }
      return a.i - b.i;
    });
    let accepted;
    let min_priority = Infinity;
    for (const mimetype of types) {
      const [type, subtype] = mimetype.split("/");
      const priority = parts.findIndex((part) => (part.type === type || part.type === "*") && (part.subtype === subtype || part.subtype === "*"));
      if (priority !== -1 && priority < min_priority) {
        accepted = mimetype;
        min_priority = priority;
      }
    }
    return accepted;
  }
  function exec(match, names, types, matchers) {
    const params = {};
    for (let i = 0; i < names.length; i += 1) {
      const name = names[i];
      const type = types[i];
      const value = match[i + 1] || "";
      if (type) {
        const matcher = matchers[type];
        if (!matcher)
          throw new Error(`Missing "${type}" param matcher`);
        if (!matcher(value))
          return;
      }
      params[name] = value;
    }
    return params;
  }
  var DATA_SUFFIX = "/__data.json";
  var default_transform = ({ html }) => html;
  async function respond(request, options, state) {
    let url = new URL(request.url);
    const normalized = normalize_path(url.pathname, options.trailing_slash);
    if (normalized !== url.pathname && !state.prerender?.fallback) {
      return new Response(void 0, {
        status: 301,
        headers: {
          location: normalized + (url.search === "?" ? "" : url.search)
        }
      });
    }
    const { parameter, allowed } = options.method_override;
    const method_override = url.searchParams.get(parameter)?.toUpperCase();
    if (method_override) {
      if (request.method === "POST") {
        if (allowed.includes(method_override)) {
          request = new Proxy(request, {
            get: (target, property, _receiver) => {
              if (property === "method")
                return method_override;
              return Reflect.get(target, property, target);
            }
          });
        } else {
          const verb = allowed.length === 0 ? "enabled" : "allowed";
          const body = `${parameter}=${method_override} is not ${verb}. See https://kit.svelte.dev/docs/configuration#methodoverride`;
          return new Response(body, {
            status: 400
          });
        }
      } else {
        throw new Error(`${parameter}=${method_override} is only allowed with POST requests`);
      }
    }
    let decoded = decodeURI(url.pathname);
    let route = null;
    let params = {};
    if (options.paths.base && !state.prerender?.fallback) {
      if (!decoded.startsWith(options.paths.base)) {
        return new Response(void 0, { status: 404 });
      }
      decoded = decoded.slice(options.paths.base.length) || "/";
    }
    const is_data_request = decoded.endsWith(DATA_SUFFIX);
    if (is_data_request) {
      decoded = decoded.slice(0, -DATA_SUFFIX.length) || "/";
      const normalized2 = normalize_path(url.pathname.slice(0, -DATA_SUFFIX.length), options.trailing_slash);
      url = new URL(url.origin + normalized2 + url.search);
    }
    if (!state.prerender || !state.prerender.fallback) {
      const matchers = await options.manifest._.matchers();
      for (const candidate of options.manifest._.routes) {
        const match = candidate.pattern.exec(decoded);
        if (!match)
          continue;
        const matched = exec(match, candidate.names, candidate.types, matchers);
        if (matched) {
          route = candidate;
          params = decode_params(matched);
          break;
        }
      }
    }
    const event = {
      get clientAddress() {
        if (!state.getClientAddress) {
          throw new Error(`${"@sveltejs/adapter-cloudflare-workers"} does not specify getClientAddress. Please raise an issue`);
        }
        Object.defineProperty(event, "clientAddress", {
          value: state.getClientAddress()
        });
        return event.clientAddress;
      },
      locals: {},
      params,
      platform: state.platform,
      request,
      routeId: route && route.id,
      url
    };
    const removed = (property, replacement, suffix = "") => ({
      get: () => {
        throw new Error(`event.${property} has been replaced by event.${replacement}` + suffix);
      }
    });
    const details = ". See https://github.com/sveltejs/kit/pull/3384 for details";
    const body_getter = {
      get: () => {
        throw new Error("To access the request body use the text/json/arrayBuffer/formData methods, e.g. `body = await request.json()`" + details);
      }
    };
    Object.defineProperties(event, {
      method: removed("method", "request.method", details),
      headers: removed("headers", "request.headers", details),
      origin: removed("origin", "url.origin"),
      path: removed("path", "url.pathname"),
      query: removed("query", "url.searchParams"),
      body: body_getter,
      rawBody: body_getter
    });
    let resolve_opts = {
      ssr: true,
      transformPage: default_transform
    };
    try {
      const response = await options.hooks.handle({
        event,
        resolve: async (event2, opts) => {
          if (opts) {
            resolve_opts = {
              ssr: opts.ssr !== false,
              transformPage: opts.transformPage || default_transform
            };
          }
          if (state.prerender && state.prerender.fallback) {
            return await render_response({
              event: event2,
              options,
              state,
              $session: await options.hooks.getSession(event2),
              page_config: { router: true, hydrate: true },
              stuff: {},
              status: 200,
              error: null,
              branch: [],
              resolve_opts: {
                ...resolve_opts,
                ssr: false
              }
            });
          }
          if (route) {
            let response2;
            if (is_data_request && route.type === "page" && route.shadow) {
              response2 = await render_endpoint(event2, await route.shadow());
              if (request.headers.has("x-sveltekit-load")) {
                if (response2.status >= 300 && response2.status < 400) {
                  const location = response2.headers.get("location");
                  if (location) {
                    const headers = new Headers(response2.headers);
                    headers.set("x-sveltekit-location", location);
                    response2 = new Response(void 0, {
                      status: 204,
                      headers
                    });
                  }
                }
              }
            } else {
              response2 = route.type === "endpoint" ? await render_endpoint(event2, await route.load()) : await render_page(event2, route, options, state, resolve_opts);
            }
            if (response2) {
              if (response2.status === 200 && response2.headers.has("etag")) {
                let if_none_match_value = request.headers.get("if-none-match");
                if (if_none_match_value?.startsWith('W/"')) {
                  if_none_match_value = if_none_match_value.substring(2);
                }
                const etag = response2.headers.get("etag");
                if (if_none_match_value === etag) {
                  const headers = new Headers({ etag });
                  for (const key2 of [
                    "cache-control",
                    "content-location",
                    "date",
                    "expires",
                    "vary"
                  ]) {
                    const value = response2.headers.get(key2);
                    if (value)
                      headers.set(key2, value);
                  }
                  return new Response(void 0, {
                    status: 304,
                    headers
                  });
                }
              }
              return response2;
            }
          }
          if (!state.initiator) {
            const $session = await options.hooks.getSession(event2);
            return await respond_with_error({
              event: event2,
              options,
              state,
              $session,
              status: 404,
              error: new Error(`Not found: ${event2.url.pathname}`),
              resolve_opts
            });
          }
          if (state.prerender) {
            return new Response("not found", { status: 404 });
          }
          return await fetch(request);
        },
        get request() {
          throw new Error("request in handle has been replaced with event" + details);
        }
      });
      if (response && !(response instanceof Response)) {
        throw new Error("handle must return a Response object" + details);
      }
      return response;
    } catch (e) {
      const error2 = coalesce_to_error(e);
      options.handle_error(error2, event);
      try {
        const $session = await options.hooks.getSession(event);
        return await respond_with_error({
          event,
          options,
          state,
          $session,
          status: 500,
          error: error2,
          resolve_opts
        });
      } catch (e2) {
        const error3 = coalesce_to_error(e2);
        return new Response(options.dev ? error3.stack : error3.message, {
          status: 500
        });
      }
    }
  }
  var base = "";
  var assets = "";
  function set_paths(paths) {
    base = paths.base;
    assets = paths.assets || base;
  }
  var template = ({ head, body, assets: assets2, nonce }) => `<!DOCTYPE html>
<!-- Nothing to see here. Thanks for looking though. -->
<html lang="en">
	<head>
		<meta charset="utf-8" />

		<link rel="icon" href="/2020-icon.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="theme-color" content="#ffd100">

		<script>
			// On page load or when changing themes, best to add inline in \`head\` to avoid FOUC
			if (
				'theme' in localStorage && JSON.parse(localStorage.theme) === 'dark' ||
				(!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
			) {
				document.documentElement.classList.add('dark');
			} else {
				document.documentElement.classList.add('light');
			}
		<\/script>

		` + head + '\n		<link rel="preload" href="/fonts/avertastd-regular-webfont.woff2" as="font" type="font/woff2" crossorigin>\n		<link rel="preload" href="/fonts/avertastd-bold-webfont.woff2" as="font" type="font/woff2" crossorigin>\n		<link rel="preload" href="/fonts/alkes_regular-webfont.woff2" as="font" type="font/woff2" crossorigin>\n		<link rel="preload" href="/fonts/alkes_regular_italic-webfont.woff2" as="font" type="font/woff2" crossorigin>\n		<link rel="preload" href="/fonts/alkes_bold-webfont.woff2" as="font" type="font/woff2" crossorigin>\n		<link rel="preload" href="/fonts/alkes_bold_italic-webfont.woff2" as="font" type="font/woff2" crossorigin>\n	</head>\n		<div id="svelte">' + body + "</div>\n	</body>\n</html>\n";
  var read = null;
  set_paths({ "base": "", "assets": "" });
  var Server = class {
    constructor(manifest2) {
      this.options = {
        amp: false,
        csp: { "mode": "auto", "directives": { "upgrade-insecure-requests": false, "block-all-mixed-content": false } },
        dev: false,
        floc: false,
        get_stack: (error2) => String(error2),
        handle_error: (error2, event) => {
          this.options.hooks.handleError({
            error: error2,
            event,
            get request() {
              throw new Error("request in handleError has been replaced with event. See https://github.com/sveltejs/kit/pull/3384 for details");
            }
          });
          error2.stack = this.options.get_stack(error2);
        },
        hooks: null,
        hydrate: true,
        manifest: manifest2,
        method_override: { "parameter": "_method", "allowed": [] },
        paths: { base, assets },
        prefix: assets + "/_app/",
        prerender: true,
        read,
        root: Root,
        service_worker: null,
        router: true,
        template,
        template_contains_nonce: false,
        trailing_slash: "never"
      };
    }
    async respond(request, options = {}) {
      if (!(request instanceof Request)) {
        throw new Error("The first argument to server.respond must be a Request object. See https://github.com/sveltejs/kit/pull/3384 for details");
      }
      if (!this.options.hooks) {
        const module = await Promise.resolve().then(() => (init_hooks_1c45ba0b(), hooks_1c45ba0b_exports));
        this.options.hooks = {
          getSession: module.getSession || (() => ({})),
          handle: module.handle || (({ event, resolve: resolve2 }) => resolve2(event)),
          handleError: module.handleError || (({ error: error2 }) => console.error(error2.stack)),
          externalFetch: module.externalFetch || fetch
        };
      }
      return respond(request, this.options, options);
    }
  };

  // .svelte-kit/cloudflare-workers-tmp/manifest.js
  var manifest = {
    appDir: "_app",
    assets: /* @__PURE__ */ new Set(["2020-icon.svg", "favicon.png", "fonts/alkes_bold-webfont.woff2", "fonts/alkes_bold_italic-webfont.woff2", "fonts/alkes_regular-webfont.woff2", "fonts/alkes_regular_italic-webfont.woff2", "fonts/avertastd-bold-webfont.woff2", "fonts/avertastd-regular-webfont.woff2", "fonts/monolisa-regular-webfont.woff2", "images/bio-photo.jpg", "images/post_images/01-Google-Pixel-4-Front-879x1024.jpg", "images/post_images/01-Google-Pixel-4-Front.jpg", "images/post_images/02-Google-Pixel-4-Front-1024x923.png", "images/post_images/02-Google-Pixel-4-Front.png", "images/post_images/100s.png", "images/post_images/20150401_142813-300x206.jpg", "images/post_images/20150401_142813.jpg", "images/post_images/2018-logo.jpg", "images/post_images/2020-logo-final.svg", "images/post_images/32078472-5053adea-baa7-11e7-9034-519002f12ac7.png", "images/post_images/Alfred.png", "images/post_images/Chrome.png", "images/post_images/ClipMenu.png", "images/post_images/CodeKit.png", "images/post_images/ColorPost-1-1024x316.jpg", "images/post_images/ColorPost-1.jpg", "images/post_images/ColorPost-2-1024x579.jpg", "images/post_images/ColorPost-2.jpg", "images/post_images/ColorPost-3-1024x611.jpg", "images/post_images/ColorPost-3.jpg", "images/post_images/ColorPost-4.jpg", "images/post_images/Dark_Grey_Shortcode-icon.jpeg", "images/post_images/Dropbox.svg", "images/post_images/EQ0-F2nXUAEpgCx.jpeg", "images/post_images/File-Types-Prev.png", "images/post_images/File-Types.png", "images/post_images/FlyFest_site_Flywheel-1800x620.jpeg", "images/post_images/Flywheel-Logo.svg", "images/post_images/Full-Logo-2018.svg", "images/post_images/GenerateWP.png", "images/post_images/GenerateWP_Mark.png", "images/post_images/Image-2017-01-24-at-9.39.57-AM.png", "images/post_images/Image-2017-01-24-at-9.45.27-AM-1024x359.png", "images/post_images/Image-2017-01-24-at-9.45.27-AM-e1485272816136.png", "images/post_images/Image-2020-02-20-at-8.47.39-PM-1024x691.png", "images/post_images/Image-2020-02-20-at-8.47.39-PM.png", "images/post_images/Image-2020-02-20-at-9.10.43-PM-1024x699.png", "images/post_images/Image-2020-02-20-at-9.10.43-PM.png", "images/post_images/Image-2020-06-05-at-11.47.11-AM-1024x391.png", "images/post_images/Image-2020-06-05-at-11.47.11-AM.png", "images/post_images/Image-2020-06-13-at-9.57.00-PM-1024x976.png", "images/post_images/Image-2020-06-13-at-9.57.00-PM.png", "images/post_images/Jetpack_plugins.png", "images/post_images/LastPass-Logo-Color.svg", "images/post_images/Local-Logo.svg", "images/post_images/Negative-Space.png", "images/post_images/Screen-Recording-2020-02-20-at-09.55-PM-1.gif", "images/post_images/Screen-Recording-2020-02-20-at-09.55-PM.gif", "images/post_images/Screen-Shot-2015-04-01-at-11.57.35-AM.png", "images/post_images/Screen-Shot-2015-04-01-at-11.57.53-AM.png", "images/post_images/Screen-Shot-2015-04-01-at-11.59.07-AM.png", "images/post_images/Screen-Shot-2015-04-01-at-12.00.41-PM.png", "images/post_images/Screen-Shot-2015-04-01-at-12.00.57-PM.png", "images/post_images/Screen-Shot-2015-04-01-at-12.01.50-PM.png", "images/post_images/Screen-Shot-2015-04-01-at-12.02.15-PM.png", "images/post_images/Screen-Shot-2015-04-01-at-12.02.28-PM.png", "images/post_images/Screen-Shot-2015-04-01-at-12.02.37-PM.png", "images/post_images/Screen-Shot-2015-04-01-at-12.03.00-PM.png", "images/post_images/Screen-Shot-2015-09-03-at-9.07.07-AM.png", "images/post_images/Screen-Shot-2015-09-03-at-9.08.06-AM.png", "images/post_images/Screen-Shot-2015-09-03-at-9_14_54-AM.png", "images/post_images/Screenshot-2015-12-31-11.24.32.png", "images/post_images/Screenshot-2015-12-31-11.26.45.png", "images/post_images/Screenshot-2016-01-17-20.11.39.png", "images/post_images/Screenshot-2016-06-24-20_45_21.png", "images/post_images/Spectacle-Logo.jpg", "images/post_images/Sublime_Text_Logo.png", "images/post_images/Swatch-Panel.jpg", "images/post_images/Transmit.png", "images/post_images/Untitled-1.png", "images/post_images/Untitled-1024x928.png", "images/post_images/Untitled-2.png", "images/post_images/Untitled-21.png", "images/post_images/Untitled.png", "images/post_images/WP-plus-Jetpack.png", "images/post_images/Wunderlist_Logo.png", "images/post_images/acf-fields-1-1024x797.png", "images/post_images/acf-fields-1.png", "images/post_images/acf-fields.png", "images/post_images/acf-pro-dev-launch.png", "images/post_images/add-new-block-1024x687.png", "images/post_images/add-new-block.png", "images/post_images/affinity-photo-available-on-the-mac-app-store.png", "images/post_images/block-lab-banner.png", "images/post_images/block-selection.png", "images/post_images/build-better-css-forms-design-principles.png", "images/post_images/building-pwa-vue-js.webp", "images/post_images/caniuse-css-vars-1-1.png", "images/post_images/caniuse-css-vars-1.png", "images/post_images/changing-css-var-color.gif", "images/post_images/codekit-magic.gif", "images/post_images/codekit-preview-window.png", "images/post_images/codekit-public-folder.png", "images/post_images/codekit-window.png", "images/post_images/codepen.svg", "images/post_images/converting-to-sveltekit.png", "images/post_images/create-new-block.png", "images/post_images/css-variables-1.png", "images/post_images/css-variables-media-queries-1.gif", "images/post_images/css-variables-media-queries-2.gif", "images/post_images/css-variables-media-queries-3.gif", "images/post_images/css-variables-media-queries.gif", "images/post_images/elegant-themes-logo.svg", "images/post_images/fullwidth-achieved.png", "images/post_images/fullwidth-left.png", "images/post_images/fullwidth-overflow-1024x600.png", "images/post_images/fullwidth-overflow.png", "images/post_images/fullwidth-widewidth.png", "images/post_images/github_desktop.png", "images/post_images/gridsome-to-sveltekit.png", "images/post_images/gtmetrix-1024x330.png", "images/post_images/gtmetrix.png", "images/post_images/gutenberg-image-toolbar-with-wide.png", "images/post_images/gutenberg-wide-illustration.png", "images/post_images/gw.png", "images/post_images/hello-world-button.gif", "images/post_images/icon.png", "images/post_images/image-1-1024x155.png", "images/post_images/image-1.png", "images/post_images/image-1024x124.png", "images/post_images/image-1024x557.png", "images/post_images/image-2-1024x865.png", "images/post_images/image-2.png", "images/post_images/image-3-1024x449.png", "images/post_images/image-3.png", "images/post_images/image.png", "images/post_images/instagram-over-1.png", "images/post_images/instagram-over.png", "images/post_images/introducing_svelte.png", "images/post_images/inverted-sliders.gif", "images/post_images/local-new-site-setup.png", "images/post_images/money.png", "images/post_images/next-step-1024x381.png", "images/post_images/next-step.png", "images/post_images/npm.webp", "images/post_images/port-conflict.png", "images/post_images/quina-post-hero.jpg", "images/post_images/sass-grid.png", "images/post_images/sass-variables.png", "images/post_images/seesaw.png", "images/post_images/side-note-block-backend-1024x405.png", "images/post_images/side-note-block-backend.png", "images/post_images/side-note-options-1024x694.png", "images/post_images/side-note-options.png", "images/post_images/social-share-image.png", "images/post_images/svelte-react-vue.png", "images/post_images/sveltekit-about-page-created.png", "images/post_images/sveltekit-css.png", "images/post_images/sveltekit-dummy-json.png", "images/post_images/sveltekit-header-component.png", "images/post_images/sveltekit-init.png", "images/post_images/sveltekit-installation-confirmation.png", "images/post_images/sveltekit-layout-shown.png", "images/post_images/sveltekit-learn.png", "images/post_images/sveltekit-min-blog-post-render.png", "images/post_images/sveltekit-posts-json.png", "images/post_images/sveltekit-posts-list.png", "images/post_images/sveltekit-rehype-css.png", "images/post_images/sveltekit-rehype.png", "images/post_images/sveltekit-rendered-md-post-with-meta.png", "images/post_images/sveltekit-scoped.png", "images/post_images/sveltekit-uses-rendered.png", "images/post_images/toa-heftiba-195458-1-1.jpg", "images/post_images/tutorial-1-1024x576.png", "images/post_images/tutorial-1.png", "images/post_images/tutorial-3-1024x576.png", "images/post_images/tutorial-3.png", "images/post_images/tutorial-4-1024x576.png", "images/post_images/tutorial-4.png", "images/post_images/ultimate-guide-SVGs-vue-js.webp", "images/post_images/utterances.png", "images/post_images/welcome-to-sveltekit.png", "images/post_images/what-i-wish.png", "images/post_images/wide-width-only-1024x713.png", "images/post_images/wide-width-only.png", "images/post_images/wordpress-bg-medblue.png", "images/post_images/wordpress.jpg", "images/post_images/wp-plus-gridsome.png", "images/quina-clues.png", "images/quina-mockup1.png", "images/site-image.png"]),
    mimeTypes: { ".svg": "image/svg+xml", ".png": "image/png", ".woff2": "font/woff2", ".jpg": "image/jpeg", ".jpeg": "image/jpeg", ".gif": "image/gif", ".webp": "image/webp" },
    _: {
      entry: { "file": "start-af8445ff.js", "js": ["start-af8445ff.js", "chunks/vendor-b62d7b9b.js", "chunks/preload-helper-e4860ae8.js", "chunks/singletons-d1fb5791.js"], "css": [] },
      nodes: [
        () => Promise.resolve().then(() => (init__(), __exports)),
        () => Promise.resolve().then(() => (init__2(), __exports2)),
        () => Promise.resolve().then(() => (init__3(), __exports3)),
        () => Promise.resolve().then(() => (init__4(), __exports4)),
        () => Promise.resolve().then(() => (init__5(), __exports5)),
        () => Promise.resolve().then(() => (init__6(), __exports6)),
        () => Promise.resolve().then(() => (init__7(), __exports7)),
        () => Promise.resolve().then(() => (init__8(), __exports8)),
        () => Promise.resolve().then(() => (init__9(), __exports9)),
        () => Promise.resolve().then(() => (init__10(), __exports10)),
        () => Promise.resolve().then(() => (init__11(), __exports11)),
        () => Promise.resolve().then(() => (init__12(), __exports12)),
        () => Promise.resolve().then(() => (init__13(), __exports13)),
        () => Promise.resolve().then(() => (init__14(), __exports14)),
        () => Promise.resolve().then(() => (init__15(), __exports15)),
        () => Promise.resolve().then(() => (init__16(), __exports16)),
        () => Promise.resolve().then(() => (init__17(), __exports17)),
        () => Promise.resolve().then(() => (init__18(), __exports18)),
        () => Promise.resolve().then(() => (init__19(), __exports19)),
        () => Promise.resolve().then(() => (init__20(), __exports20)),
        () => Promise.resolve().then(() => (init__21(), __exports21)),
        () => Promise.resolve().then(() => (init__22(), __exports22)),
        () => Promise.resolve().then(() => (init__23(), __exports23))
      ],
      routes: [
        {
          type: "page",
          id: "",
          pattern: /^\/$/,
          names: [],
          types: [],
          path: "/",
          shadow: null,
          a: [0, 2],
          b: [1]
        },
        {
          type: "page",
          id: "writing-and-speaking",
          pattern: /^\/writing-and-speaking\/?$/,
          names: [],
          types: [],
          path: "/writing-and-speaking",
          shadow: null,
          a: [0, 3],
          b: [1]
        },
        {
          type: "endpoint",
          id: "berita.json",
          pattern: /^\/berita\.json$/,
          names: [],
          types: [],
          load: () => Promise.resolve().then(() => (init_berita_json(), berita_json_exports))
        },
        {
          type: "page",
          id: "products",
          pattern: /^\/products\/?$/,
          names: [],
          types: [],
          path: "/products",
          shadow: null,
          a: [0, 4, 5],
          b: [1]
        },
        {
          type: "page",
          id: "products/[slug]",
          pattern: /^\/products\/([^/]+?)\/?$/,
          names: ["slug"],
          types: [null],
          path: null,
          shadow: null,
          a: [0, 4, 6],
          b: [1]
        },
        {
          type: "page",
          id: "projects",
          pattern: /^\/projects\/?$/,
          names: [],
          types: [],
          path: "/projects",
          shadow: null,
          a: [0, 7],
          b: [1]
        },
        {
          type: "page",
          id: "contact",
          pattern: /^\/contact\/?$/,
          names: [],
          types: [],
          path: "/contact",
          shadow: null,
          a: [0, 8],
          b: [1]
        },
        {
          type: "page",
          id: "berita",
          pattern: /^\/berita\/?$/,
          names: [],
          types: [],
          path: "/berita",
          shadow: null,
          a: [0, 9, 10],
          b: [1]
        },
        {
          type: "page",
          id: "berita/[slug]",
          pattern: /^\/berita\/([^/]+?)\/?$/,
          names: ["slug"],
          types: [null],
          path: null,
          shadow: null,
          a: [0, 9, 11],
          b: [1]
        },
        {
          type: "page",
          id: "resume",
          pattern: /^\/resume\/?$/,
          names: [],
          types: [],
          path: "/resume",
          shadow: null,
          a: [0, 12],
          b: [1]
        },
        {
          type: "page",
          id: "blog",
          pattern: /^\/blog\/?$/,
          names: [],
          types: [],
          path: "/blog",
          shadow: null,
          a: [0, 13, 14],
          b: [1]
        },
        {
          type: "page",
          id: "blog/category",
          pattern: /^\/blog\/category\/?$/,
          names: [],
          types: [],
          path: "/blog/category",
          shadow: null,
          a: [0, 13, 15],
          b: [1]
        },
        {
          type: "page",
          id: "blog/category/[category]",
          pattern: /^\/blog\/category\/([^/]+?)\/?$/,
          names: ["category"],
          types: [null],
          path: null,
          shadow: null,
          a: [0, 13, 16],
          b: [1]
        },
        {
          type: "page",
          id: "blog/preview/[slug]",
          pattern: /^\/blog\/preview\/([^/]+?)\/?$/,
          names: ["slug"],
          types: [null],
          path: null,
          shadow: null,
          a: [0, 13, 17],
          b: [1]
        },
        {
          type: "page",
          id: "blog/page/[page]",
          pattern: /^\/blog\/page\/([^/]+?)\/?$/,
          names: ["page"],
          types: [null],
          path: null,
          shadow: null,
          a: [0, 13, 18],
          b: [1]
        },
        {
          type: "page",
          id: "blog/[post]",
          pattern: /^\/blog\/([^/]+?)\/?$/,
          names: ["post"],
          types: [null],
          path: null,
          shadow: null,
          a: [0, 13, 19],
          b: [1]
        },
        {
          type: "page",
          id: "uses",
          pattern: /^\/uses\/?$/,
          names: [],
          types: [],
          path: "/uses",
          shadow: null,
          a: [0, 20],
          b: [1]
        },
        {
          type: "endpoint",
          id: "api/products/products.json",
          pattern: /^\/api\/products\/products\.json$/,
          names: [],
          types: [],
          load: () => Promise.resolve().then(() => (init_products_json(), products_json_exports))
        },
        {
          type: "endpoint",
          id: "api/products/[slug].json",
          pattern: /^\/api\/products\/([^/]+?)\.json$/,
          names: ["slug"],
          types: [null],
          load: () => Promise.resolve().then(() => (init_slug_json(), slug_json_exports))
        },
        {
          type: "endpoint",
          id: "api/rss.xml",
          pattern: /^\/api\/rss\.xml$/,
          names: [],
          types: [],
          load: () => Promise.resolve().then(() => (init_rss_xml_ts(), rss_xml_ts_exports))
        },
        {
          type: "endpoint",
          id: "api/berita/berita.json",
          pattern: /^\/api\/berita\/berita\.json$/,
          names: [],
          types: [],
          load: () => Promise.resolve().then(() => (init_berita_json2(), berita_json_exports2))
        },
        {
          type: "endpoint",
          id: "api/berita/[slug].json",
          pattern: /^\/api\/berita\/([^/]+?)\.json$/,
          names: ["slug"],
          types: [null],
          load: () => Promise.resolve().then(() => (init_slug_json2(), slug_json_exports2))
        },
        {
          type: "endpoint",
          id: "api/posts.json",
          pattern: /^\/api\/posts\.json$/,
          names: [],
          types: [],
          load: () => Promise.resolve().then(() => (init_index_json_ts(), index_json_ts_exports))
        },
        {
          type: "endpoint",
          id: "api/posts/count.json",
          pattern: /^\/api\/posts\/count\.json$/,
          names: [],
          types: [],
          load: () => Promise.resolve().then(() => (init_count_json_ts(), count_json_ts_exports))
        },
        {
          type: "endpoint",
          id: "api/ukm/ukm.json",
          pattern: /^\/api\/ukm\/ukm\.json$/,
          names: [],
          types: [],
          load: () => Promise.resolve().then(() => (init_ukm_json(), ukm_json_exports))
        },
        {
          type: "endpoint",
          id: "api/ukm/[slug].json",
          pattern: /^\/api\/ukm\/([^/]+?)\.json$/,
          names: ["slug"],
          types: [null],
          load: () => Promise.resolve().then(() => (init_slug_json3(), slug_json_exports3))
        },
        {
          type: "page",
          id: "ukm",
          pattern: /^\/ukm\/?$/,
          names: [],
          types: [],
          path: "/ukm",
          shadow: null,
          a: [0, 21],
          b: [1]
        },
        {
          type: "page",
          id: "ukm/[slug]",
          pattern: /^\/ukm\/([^/]+?)\/?$/,
          names: ["slug"],
          types: [null],
          path: null,
          shadow: null,
          a: [0, 22],
          b: [1]
        }
      ],
      matchers: async () => {
        return {};
      }
    }
  };
  var prerendered = /* @__PURE__ */ new Set([]);

  // .svelte-kit/cloudflare-workers-tmp/entry.js
  var import_kv_asset_handler = __toESM(require_dist());
  var server = new Server(manifest);
  var prefix = `/${manifest.appDir}/`;
  addEventListener("fetch", (event) => {
    event.respondWith(handle(event));
  });
  async function handle(event) {
    const { request } = event;
    const url = new URL(request.url);
    if (url.pathname.startsWith(prefix)) {
      const res = await (0, import_kv_asset_handler.getAssetFromKV)(event);
      return new Response(res.body, {
        headers: {
          "cache-control": "public, immutable, max-age=31536000",
          "content-type": res.headers.get("content-type")
        }
      });
    }
    const pathname = url.pathname.replace(/\/$/, "");
    let file = pathname.substring(1);
    try {
      file = decodeURIComponent(file);
    } catch (err) {
    }
    if (manifest.assets.has(file) || manifest.assets.has(file + "/index.html") || prerendered.has(pathname || "/")) {
      return await (0, import_kv_asset_handler.getAssetFromKV)(event);
    }
    try {
      return await server.respond(request, {
        getClientAddress() {
          return request.headers.get("cf-connecting-ip");
        }
      });
    } catch (e) {
      return new Response("Error rendering route:" + (e.message || e.toString()), { status: 500 });
    }
  }
})();
